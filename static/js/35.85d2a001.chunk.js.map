{"version":3,"sources":["components/Modal/Spacer.tsx","components/Modal/ModalActions.tsx","components/Modal/ModalInput.tsx","components/ExpandableSectionButton/ExpandableSectionButton.tsx","utils/getLiquidityUrlPathParts.ts","views/Farms/components/FarmCard/DetailsSection.tsx","views/Farms/components/FarmCard/CardHeading.tsx","views/Farms/components/DepositModal.tsx","views/Farms/components/WithdrawModal.tsx","views/Farms/hooks/useUnstakeFarms.ts","views/Farms/hooks/useStakeFarms.ts","views/Farms/components/FarmCard/StakeAction.tsx","views/Farms/hooks/useHarvestFarm.ts","views/Farms/components/FarmCard/HarvestAction.tsx","views/Farms/hooks/useApproveFarm.ts","views/Farms/components/FarmCard/CardActionsContainer.tsx","views/Farms/components/FarmCard/ApyButton.tsx","views/Farms/components/FarmCard/FarmCard.tsx","views/Farms/components/FarmTable/Apr.tsx","views/Farms/components/FarmTable/Farm.tsx","views/Farms/components/FarmTable/Earned.tsx","views/Farms/components/FarmTable/Details.tsx","views/Farms/components/FarmTable/Multiplier.tsx","views/Farms/components/FarmTable/Liquidity.tsx","views/Farms/components/FarmTable/Actions/styles.ts","views/Farms/components/FarmTable/Actions/HarvestAction.tsx","views/Farms/components/FarmTable/Actions/StakedAction.tsx","views/Farms/components/FarmTable/Actions/ActionPanel.tsx","views/Farms/components/FarmTable/CellLayout.tsx","views/Farms/components/types.ts","views/Farms/components/FarmTable/Row.tsx","views/Farms/components/FarmTable/FarmTable.tsx","views/Farms/components/FarmTabButtons/index.tsx","views/Farms/components/ToggleView/ToggleView.tsx","views/Farms/Farms.tsx"],"names":["StyledSpacer","styled","div","props","size","Spacer","s","spacing","useContext","ThemeContext","StyledModalActions","theme","colors","primaryDark","StyledModalAction","ModalActions","children","l","React","Children","toArray","length","map","child","i","StyledTokenInput","input","isWarning","shadows","warning","inset","text","StyledInput","Input","mediaQueries","xs","sm","StyledErrorMessage","Text","ModalInput","max","symbol","onChange","onSelectMax","value","addLiquidityUrl","inputTitle","decimals","t","useTranslation","isBalanceZero","style","position","justifyContent","pl","fontSize","balance","balanceUnits","parseUnits","formatBigNumber","displayBalance","alignItems","pattern","inputMode","step","min","placeholder","scale","onClick","mr","color","bold","href","external","Wrapper","primary","ExpandableSectionButton","expanded","role","defaultProps","getLiquidityUrlPathParts","quoteTokenAddress","tokenAddress","wBnbAddress","tokens","wbnb","address","firstPart","ETHER","secondPart","StyledLinkExternal","LinkExternal","DetailsSection","bscScanAddress","infoAddress","removed","totalValueFormatted","lpLabel","width","height","Flex","MultiplierTag","Tag","CardHeading","multiplier","isCommunityFarm","token","quoteToken","mb","variant","primaryToken","secondaryToken","flexDirection","split","ml","AnnualRoiContainer","AnnualRoiDisplay","DepositModal","stakedBalance","onConfirm","onDismiss","tokenName","displayApr","lpPrice","apr","cakePrice","useState","val","setVal","useToast","toastSuccess","toastError","pendingTx","setPendingTx","showRoiCalculator","setShowRoiCalculator","fullBalance","useMemo","getFullDisplayBalance","lpTokensToStake","BigNumber","fullBalanceNumber","usdToStake","times","interestBreakdown","getInterestBreakdown","principalInUSD","isNaN","toNumber","earningTokenPrice","annualRoi","formattedAnnualRoi","formatNumber","gt","handleChange","useCallback","e","currentTarget","validity","valid","replace","handleSelectMax","RoiCalculatorModal","linkLabel","stakingTokenBalance","plus","stakingTokenSymbol","stakingTokenPrice","linkHref","isFarm","initialValue","onBack","title","Modal","mt","disabled","isFinite","eq","a","console","error","alignSelf","WithdrawModal","valNumber","useUnstakeFarms","pid","masterChefContract","useMasterchef","handleUnstake","amount","unstakeFarm","onUnstake","useStakeFarms","handleStake","stakeFarm","txHash","info","onStake","IconButtonWrapper","StakeAction","tokenBalance","location","useLocation","dispatch","useAppDispatch","account","useWeb3React","useLpTokenPrice","fetchFarmUserDataAsync","pids","stakedBalanceBigNumber","getBalanceAmount","lt","toFixed","ROUND_DOWN","useModal","onPresentDeposit","onPresentWithdraw","Balance","getBalanceNumber","unit","prefix","some","item","pathname","includes","useHarvestFarm","farmPid","onReward","harvestFarm","HarvestAction","earnings","usePriceCakeBusd","rawEarningsBalance","BIG_ZERO","earningsBusd","multipliedBy","useApproveFarm","lpContract","callWithGasPrice","useCallWithGasPrice","onApprove","ethers","constants","MaxUint256","tx","wait","receipt","status","Action","CardActions","farm","requestedApproval","setRequestedApproval","lpAddresses","userData","allowance","lpAddress","getAddress","isApproved","isGreaterThan","useERC20","handleApprove","textTransform","pr","lpSymbol","ConnectWalletButton","ApyLabelContainer","ApyButton","useFarmUser","onPresentApyModal","event","stopPropagation","StyledCard","Card","FarmCardInnerContainer","ExpandingWrapper","cardBorder","FarmCard","showExpandableSection","setShowExpandableSection","liquidity","toLocaleString","undefined","maximumFractionDigits","toUpperCase","earnLabel","dual","liquidityUrlPathParts","BASE_ADD_LIQUIDITY_URL","isPromotedFarm","isActive","isCommunity","display","CardActionsContainer","getBscScanLink","Container","textSubtle","AprWrapper","Apr","originalValue","hideButton","TokenWrapper","Farm","label","rawStakedBalance","Amount","span","earned","textDisabled","Earned","userDataReady","ArrowIcon","ChevronDownIcon","toggled","Details","actionPanelToggled","isDesktop","useMatchBreakpoints","ReferenceElement","MultiplierWrapper","lg","Multiplier","displayMultiplier","toLowerCase","tooltipContent","my","useTooltip","placement","tooltipOffset","targetRef","tooltip","tooltipVisible","ref","LiquidityWrapper","Liquidity","displayLiquidity","Number","ActionContainer","xl","ActionTitles","ActionContent","earningsBigNumber","isZero","Staked","marginBottom","marginTop","expandAnimation","keyframes","collapseAnimation","css","background","StakeContainer","TagsContainer","InfoContainer","ValueContainer","ValueWrapper","ActionPanel","details","bsc","StakedAction","Label","ContentContainer","CellLayout","MobileColumnSchema","id","name","sortable","DesktopColumnSchema","cells","CellInner","StyledTr","tr","EarnedMobileCell","td","AprMobileCell","FarmMobileCell","Row","hasStakedAmount","actionPanelExpanded","setActionPanelExpanded","shouldRenderChild","useDelayedUnmount","toggleActionPanel","useEffect","isMobile","isSmallerScreen","tableSchema","columnNames","column","Object","keys","key","columnIndex","indexOf","createElement","colSpan","card","dropShadow","TableWrapper","StyledTable","table","TableBody","tbody","TableContainer","ScrollButtonContainer","FarmTable","tableWrapperEl","useRef","data","columns","rows","useTable","sortColumn","row","original","current","scrollIntoView","behavior","FarmTabButtons","activeIndex","hasStakeInFinishedFarms","url","useRouteMatch","as","Link","to","show","ToggleView","viewMode","onToggle","handleToggle","mode","ViewMode","CARD","TABLE","ControlContainer","ToggleWrapper","ViewControls","getDisplayApr","Image","cakeRewardsApr","lpRewardsApr","Farms","path","useFarms","farmsLP","userDataLoaded","query","useUserFarmsViewMode","setViewMode","sortOption","useIntersectionObserver","observerRef","isIntersecting","chosenFarmsLength","isArchived","isInactive","usePollFarmsWithUserData","useUserFarmStakedOnly","stakedOnly","setStakedOnly","activeFarms","filter","isArchivedPid","inactiveFarms","archivedFarms","stakedOnlyFarms","stakedInactiveFarms","stakedArchivedFarms","farmsList","farmsToDisplay","farmsToDisplayWithAPR","lpTotalInQuoteToken","quoteTokenPriceBusd","totalLiquidity","getFarmApr","poolWeight","crowPerBlock","parseInt","process","lowercaseQuery","latinise","numberOfFarmsVisible","setNumberOfFarmsVisible","chosenFarmsMemoized","chosenFarms","farms","orderBy","slice","sortFarms","farmsCurrentlyVisible","rowData","Page","checked","sort","b","exact","renderContent","Loading"],"mappings":"sPA8BMA,EAAeC,IAAOC,IAAV,+DACN,SAACC,GAAD,OAAWA,EAAMC,QAClB,SAACD,GAAD,OAAWA,EAAMC,QAGbC,EA5BuB,SAAC,GAAqB,IAGtDC,EAHqD,IAAlBF,YAAkB,MAAX,KAAW,EACjDG,EAAYC,qBAAWC,KAAvBF,QAGR,OAAQH,GACN,IAAK,KACHE,EAAIC,EAAQ,GACZ,MACF,IAAK,KACHD,EAAIC,EAAQ,GACZ,MAEF,QACED,EAAIC,EAAQ,GAGhB,OAAO,cAACP,EAAD,CAAcI,KAAME,KCLvBI,EAAqBT,IAAOC,IAAV,qIAEF,SAACC,GAAD,OAAWA,EAAMQ,MAAMC,OAAOC,eAGvC,SAACV,GAAD,OAAWA,EAAMQ,MAAMJ,QAAQ,MAGtCO,EAAoBb,IAAOC,IAAV,wCAIRa,EA1BgB,SAAC,GAAkB,IAAhBC,EAAe,EAAfA,SAC1BC,EAAIC,IAAMC,SAASC,QAAQJ,GAAUK,OAC3C,OACE,cAACX,EAAD,UACGQ,IAAMC,SAASG,IAAIN,GAAU,SAACO,EAAOC,GAAR,OAC5B,qCACE,cAACV,EAAD,UAAoBS,IACnBC,EAAIP,EAAI,GAAK,cAAC,EAAD,a,+BCgBlBQ,EAAmBxB,IAAOC,IAAV,0MAGA,qBAAGS,MAAkBC,OAAOc,SAX7B,SAAC,GAAkC,IAAD,IAA/BC,iBAA+B,SAAZhB,EAAY,EAAZA,MACzC,OAAIgB,EACKhB,EAAMiB,QAAQC,QAGhBlB,EAAMiB,QAAQE,SASZ,qBAAGnB,MAAkBC,OAAOmB,QAKjCC,EAAc/B,YAAOgC,KAAPhC,CAAH,2LAOb,qBAAGU,MAAkBuB,aAAaC,MAIlC,qBAAGxB,MAAkBuB,aAAaE,MAKhCC,EAAqBpC,YAAOqC,KAAPrC,CAAH,uGAiETsC,EAzD+B,SAAC,GASxC,IARLC,EAQI,EARJA,IACAC,EAOI,EAPJA,OACAC,EAMI,EANJA,SACAC,EAKI,EALJA,YACAC,EAII,EAJJA,MACAC,EAGI,EAHJA,gBACAC,EAEI,EAFJA,WAEI,IADJC,gBACI,MADO,GACP,EACIC,EAAMC,cAAND,EACFE,EAAwB,MAARV,IAAgBA,EAWtC,OACE,sBAAKW,MAAO,CAAEC,SAAU,YAAxB,UACE,eAAC3B,EAAD,CAAkBE,UAAWuB,EAA7B,UACE,eAAC,KAAD,CAAMG,eAAe,gBAAgBC,GAAG,OAAxC,UACE,cAAC,KAAD,CAAMC,SAAS,OAAf,SAAuBT,IACvB,cAAC,KAAD,CAAMS,SAAS,OAAf,SAAuBP,EAAE,qBAAsB,CAAEQ,QAdlC,SAACA,GACtB,GAAIN,EACF,MAAO,IAGT,IAAMO,EAAeC,qBAAWF,EAAST,GACzC,OAAOY,YAAgBF,EAAcV,EAAUA,GAQiBa,CAAepB,UAE3E,eAAC,KAAD,CAAMqB,WAAW,WAAWR,eAAe,eAA3C,UACE,cAACrB,EAAD,CACE8B,QAAO,8BAAyBf,EAAzB,MACPgB,UAAU,UACVC,KAAK,MACLC,IAAI,IACJvB,SAAUA,EACVwB,YAAY,IACZtB,MAAOA,IAET,cAAC,IAAD,CAAQuB,MAAM,KAAKC,QAASzB,EAAa0B,GAAG,MAA5C,SACGrB,EAAE,SAEL,cAAC,KAAD,CAAMO,SAAS,OAAf,SAAuBd,UAG1BS,GACC,eAACb,EAAD,CAAoBkB,SAAS,OAAOe,MAAM,UAA1C,UACGtB,EAAE,sBADL,IAC6B,IAC3B,cAAC,KAAD,CAAMO,SAAS,OAAOgB,MAAM,EAAOC,KAAM3B,EAAiB4B,UAAQ,EAACH,MAAM,UAAzE,SACGtB,EAAE,eAAgB,CAAEP,qB,8SCrG3BiC,EAAUzE,IAAOC,IAAV,sJAOD,qBAAGS,MAAkBC,OAAO+D,WAIlCC,EAAkE,SAAC,GAA2B,IAAzBR,EAAwB,EAAxBA,QAASS,EAAe,EAAfA,SAC1E7B,EAAMC,cAAND,EAER,OACE,eAAC0B,EAAD,CAAS,aAAY1B,EAAE,mCAAoC8B,KAAK,SAASV,QAAS,kBAAMA,KAAxF,UACE,cAAC,KAAD,CAAME,MAAM,UAAUC,MAAI,EAA1B,SACcvB,EAAX6B,EAAa,OAAY,aAE3BA,EAAW,cAAC,IAAD,IAAoB,cAAC,IAAD,QAKtCD,EAAwBG,aAAe,CACrCF,UAAU,GAGGD,I,oKAAAA,K,mCCpBAI,GAbkB,SAAC,GAMnB,IALbC,EAKY,EALZA,kBACAC,EAIY,EAJZA,aAKMC,EAAcC,KAAOC,KAAKC,QAC1BC,EAAaN,GAAqBA,IAAsBE,EAA6BF,EAAfO,KAAM/C,OAC5EgD,EAAcP,GAAgBA,IAAiBC,EAA6BD,EAAfM,KAAM/C,OACzE,MAAM,GAAN,OAAU8C,EAAV,YAAuBE,ICDnBf,GAAUzE,IAAOC,IAAV,iDAIPwF,GAAqBzF,YAAO0F,KAAP1F,CAAH,iDA6BT2F,GAzB0C,SAAC,GAOnD,IANLC,EAMI,EANJA,eACAC,EAKI,EALJA,YACAC,EAII,EAJJA,QACAC,EAGI,EAHJA,oBACAC,EAEI,EAFJA,QACApD,EACI,EADJA,gBAEQG,EAAMC,cAAND,EAER,OACE,eAAC,GAAD,WACE,eAAC,KAAD,CAAMK,eAAe,gBAArB,UACE,eAAC,KAAD,WAAOL,EAAE,mBAAT,OACCgD,EAAsB,cAAC,KAAD,UAAOA,IAA8B,cAAC,KAAD,CAAUE,MAAO,GAAIC,OAAQ,SAEzFJ,GACA,cAACL,GAAD,CAAoBlB,KAAM3B,EAA1B,SAA4CG,EAAE,eAAgB,CAAEP,OAAQwD,MAE1E,cAACP,GAAD,CAAoBlB,KAAMqB,EAA1B,SAA2C7C,EAAE,mBAC7C,cAAC0C,GAAD,CAAoBlB,KAAMsB,EAA1B,SAAwC9C,EAAE,uB,oBC3B1C0B,GAAUzE,YAAOmG,KAAPnG,CAAH,kEAMPoG,GAAgBpG,YAAOqG,KAAPrG,CAAH,iDAuBJsG,GAnBuC,SAAC,GAAiE,IAA/DN,EAA8D,EAA9DA,QAASO,EAAqD,EAArDA,WAAYC,EAAyC,EAAzCA,gBAAiBC,EAAwB,EAAxBA,MAAOC,EAAiB,EAAjBA,WACpG,OACE,eAAC,GAAD,CAAStD,eAAe,gBAAgBQ,WAAW,SAAS+C,GAAG,OAA/D,UACE,cAAC,KAAD,CAAgBC,QAAQ,WAAWC,aAAcJ,EAAOK,eAAgBJ,EAAYT,MAAO,GAAIC,OAAQ,KACvG,eAAC,KAAD,CAAMa,cAAc,SAASnD,WAAW,WAAxC,UACE,cAAC,KAAD,CAAS+C,GAAG,MAAZ,SAAmBX,EAAQgB,MAAM,KAAK,KACtC,eAAC,KAAD,CAAM5D,eAAe,SAArB,UACGoD,EAAkB,cAAC,KAAD,IAAmB,cAAC,KAAD,IACrCD,EACC,cAACH,GAAD,CAAeQ,QAAQ,YAAvB,SAAoCL,IAEpC,cAAC,KAAD,CAAUU,GAAG,MAAMhB,MAAO,GAAIC,OAAQ,e,oHCzB5CgB,GAAqBlH,YAAOmG,KAAPnG,CAAH,gDAIlBmH,GAAmBnH,YAAOqC,KAAPrC,CAAH,uIA0JPoH,GAnImC,SAAC,GAa5C,IAZL7E,EAYI,EAZJA,IACA8E,EAWI,EAXJA,cACAC,EAUI,EAVJA,UACAC,EASI,EATJA,UASI,IARJC,iBAQI,MARQ,GAQR,EAPJjB,EAOI,EAPJA,WACAkB,EAMI,EANJA,WACAC,EAKI,EALJA,QACA1B,EAII,EAJJA,QACA2B,EAGI,EAHJA,IACA/E,EAEI,EAFJA,gBACAgF,EACI,EADJA,UAEA,EAAsBC,mBAAS,IAA/B,mBAAOC,EAAP,KAAYC,EAAZ,KACA,EAAqCC,eAA7BC,EAAR,EAAQA,aAAcC,EAAtB,EAAsBA,WACtB,EAAkCL,oBAAS,GAA3C,mBAAOM,EAAP,KAAkBC,EAAlB,KACA,EAAkDP,oBAAS,GAA3D,mBAAOQ,EAAP,KAA0BC,EAA1B,KACQvF,EAAMC,cAAND,EACFwF,EAAcC,mBAAQ,WAC1B,OAAOC,YAAsBlG,KAC5B,CAACA,IAEEmG,EAAkB,IAAIC,IAAUb,GAChCc,EAAoB,IAAID,IAAUJ,GAElCM,EAAaH,EAAgBI,MAAMpB,GAEnCqB,EAAoBC,aAAqB,CAC7CC,eAAiBP,EAAgBQ,QAAkC,EAAxBL,EAAWM,WACtDxB,MACAyB,kBAAmBxB,EAAUuB,aAGzBE,EAAYzB,EAAUkB,MAAMC,EAAkB,IAC9CO,EAAqBC,YACzBF,EAAUF,WACVE,EAAUG,GAAG,KAAS,EAAI,EAC1BH,EAAUG,GAAG,KAAS,EAAI,GAGtBC,EAAeC,uBACnB,SAACC,GACKA,EAAEC,cAAcC,SAASC,OAC3B/B,EAAO4B,EAAEC,cAAcjH,MAAMoH,QAAQ,KAAM,QAG/C,CAAChC,IAGGiC,EAAkBN,uBAAY,WAClC3B,EAAOQ,KACN,CAACA,EAAaR,IAEjB,OAAIM,EAEA,cAAC4B,GAAA,EAAD,CACEC,UAAWnH,EAAE,eAAgB,CAAEP,OAAQwD,IACvCmE,oBAAqB9C,EAAc+C,KAAK7H,GACxC8H,mBAAoB7C,EACpB8C,kBAAmB5C,EAAQyB,WAC3BC,kBAAmBxB,EAAUuB,WAC7BxB,IAAKA,EACLpB,WAAYA,EACZkB,WAAYA,EACZ8C,SAAU3H,EACV4H,QAAM,EACNC,aAAc3C,EACd4C,OAAQ,kBAAMpC,GAAqB,MAMvC,eAAC,KAAD,CAAOqC,MAAO5H,EAAE,mBAAoBwE,UAAWA,EAA/C,UACE,cAACqD,GAAA,EAAD,CACEjI,MAAOmF,EACPpF,YAAasH,EACbvH,SAAUgH,EACVlH,IAAKgG,EACL/F,OAAQgF,EACR5E,gBAAiBA,EACjBC,WAAYE,EAAE,WAEhB,eAAC,KAAD,CAAM8H,GAAG,OAAOjH,WAAW,SAASR,eAAe,gBAAnD,UACE,eAAC,KAAD,CAAMgB,GAAG,MAAMC,MAAM,aAArB,UACGtB,EAAE,+BADL,OAGA,eAACmE,GAAD,CAAoBtD,WAAW,SAASO,QAAS,kBAAMmE,GAAqB,IAA5E,UACE,eAACnB,GAAD,eAAoBmC,KACpB,cAAC,KAAD,CAAY1C,QAAQ,OAAO1C,MAAM,KAAjC,SACE,cAAC,IAAD,CAAeG,MAAM,aAAa4B,MAAM,iBAI9C,eAAC2E,GAAA,EAAD,WACE,cAAC,IAAD,CAAQhE,QAAQ,YAAYzC,QAASoD,EAAWtB,MAAM,OAAO6E,SAAU3C,EAAvE,SACGpF,EAAE,YAEL,cAAC,IAAD,CACEkD,MAAM,OACN6E,SACE3C,IAAcO,EAAgBqC,YAAcrC,EAAgBsC,GAAG,IAAMtC,EAAgBc,GAAGZ,GAE1FzE,QAAO,wBAAE,uBAAA8G,EAAA,6DACP7C,GAAa,GADN,kBAGCd,EAAUQ,GAHX,OAILG,EAAalF,EAAE,WAAYA,EAAE,4CAC7BwE,IALK,gDAOLW,EACEnF,EAAE,SACFA,EAAE,uFAEJmI,QAAQC,MAAR,MAXK,yBAaL/C,GAAa,GAbR,4EALX,SAsBerF,EAAZoF,EAAc,aAAkB,gBAGrC,cAAC,KAAD,CAAc5D,KAAM3B,EAAiBM,MAAO,CAAEkI,UAAW,UAAzD,SACGrI,EAAE,eAAgB,CAAEP,OAAQgF,UClFtB6D,GAlEqC,SAAC,GAAmD,IAAjD/D,EAAgD,EAAhDA,UAAWC,EAAqC,EAArCA,UAAWhF,EAA0B,EAA1BA,IAA0B,IAArBiF,iBAAqB,MAAT,GAAS,EACrG,EAAsBK,mBAAS,IAA/B,mBAAOC,EAAP,KAAYC,EAAZ,KACA,EAAqCC,eAA7BC,EAAR,EAAQA,aAAcC,EAAtB,EAAsBA,WACtB,EAAkCL,oBAAS,GAA3C,mBAAOM,EAAP,KAAkBC,EAAlB,KACQrF,EAAMC,cAAND,EACFwF,EAAcC,mBAAQ,WAC1B,OAAOC,YAAsBlG,KAC5B,CAACA,IAEE+I,EAAY,IAAI3C,IAAUb,GAC1Bc,EAAoB,IAAID,IAAUJ,GAElCkB,EAAeC,uBACnB,SAACC,GACKA,EAAEC,cAAcC,SAASC,OAC3B/B,EAAO4B,EAAEC,cAAcjH,MAAMoH,QAAQ,KAAM,QAG/C,CAAChC,IAGGiC,EAAkBN,uBAAY,WAClC3B,EAAOQ,KACN,CAACA,EAAaR,IAEjB,OACE,eAAC,KAAD,CAAO4C,MAAO5H,EAAE,qBAAsBwE,UAAWA,EAAjD,UACE,cAACqD,GAAA,EAAD,CACElI,YAAasH,EACbvH,SAAUgH,EACV9G,MAAOmF,EACPvF,IAAKgG,EACL/F,OAAQgF,EACR3E,WAAYE,EAAE,aAEhB,eAAC6H,GAAA,EAAD,WACE,cAAC,IAAD,CAAQhE,QAAQ,YAAYzC,QAASoD,EAAWtB,MAAM,OAAO6E,SAAU3C,EAAvE,SACGpF,EAAE,YAEL,cAAC,IAAD,CACE+H,SAAU3C,IAAcmD,EAAUP,YAAcO,EAAUN,GAAG,IAAMM,EAAU9B,GAAGZ,GAChFzE,QAAO,wBAAE,uBAAA8G,EAAA,6DACP7C,GAAa,GADN,kBAGCd,EAAUQ,GAHX,OAILG,EAAalF,EAAE,aAAcA,EAAE,0DAC/BwE,IALK,gDAOLW,EACEnF,EAAE,SACFA,EAAE,uFAEJmI,QAAQC,MAAR,MAXK,yBAaL/C,GAAa,GAbR,4EAgBTnC,MAAM,OAlBR,SAoBelD,EAAZoF,EAAc,aAAkB,oB,UCzD5BoD,GAbS,SAACC,GACvB,IAAMC,EAAqBC,eAErBC,EAAgBjC,sBAAW,yCAC/B,WAAOkC,GAAP,UAAAX,EAAA,sEACQY,aAAYJ,EAAoBD,EAAKI,GAD7C,2CAD+B,sDAI/B,CAACH,EAAoBD,IAGvB,MAAO,CAAEM,UAAWH,ICIPI,GAdO,SAACP,GACrB,IAAMC,EAAqBC,eAErBM,EAActC,sBAAW,yCAC7B,WAAOkC,GAAP,gBAAAX,EAAA,sEACuBgB,aAAUR,EAAoBD,EAAKI,GAD1D,OACQM,EADR,OAEEhB,QAAQiB,KAAKD,GAFf,2CAD6B,sDAK7B,CAACT,EAAoBD,IAGvB,MAAO,CAAEY,QAASJ,ICedK,GAAoBrM,IAAOC,IAAV,8EA+GRqM,GAxGqC,SAAC,GAW9C,IAVLjF,EAUI,EAVJA,cACAkF,EASI,EATJA,aACA/E,EAQI,EARJA,UACAgE,EAOI,EAPJA,IACAjF,EAMI,EANJA,WACAoB,EAKI,EALJA,IACAF,EAII,EAJJA,WACA7E,EAGI,EAHJA,gBACAgF,EAEI,EAFJA,UACA5B,EACI,EADJA,QAEQjD,EAAMC,cAAND,EACAqJ,EAAYL,GAAcP,GAA1BY,QACAN,EAAcP,GAAgBC,GAA9BM,UACFU,EAAWC,cACXC,EAAWC,eACTC,EAAYC,cAAZD,QACFlF,EAAUoF,YAAgBtF,GAE1BwE,EAAW,yCAAG,WAAOJ,GAAP,UAAAX,EAAA,sEACZmB,EAAQR,GADI,OAElBc,EAASK,aAAuB,CAAEH,UAASI,KAAM,CAACxB,MAFhC,2CAAH,sDAKXG,EAAa,yCAAG,WAAOC,GAAP,UAAAX,EAAA,sEACda,EAAUF,GADI,OAEpBc,EAASK,aAAuB,CAAEH,UAASI,KAAM,CAACxB,MAF9B,2CAAH,sDAKb7H,EAAiB+F,uBAAY,WACjC,IAAMuD,EAAyBC,YAAiB7F,GAChD,OAAI4F,EAAuBzD,GAAG,IAAMyD,EAAuBE,GAAG,MACrD,aAELF,EAAuBzD,GAAG,GACrByD,EAAuBG,QAAQ,EAAGzE,IAAU0E,YAE9CJ,EAAuBG,QAAQ,EAAGzE,IAAU0E,cAClD,CAAChG,IAEJ,EAA2BiG,aACzB,cAAC,GAAD,CACE/K,IAAKgK,EACLlF,cAAeA,EACfC,UAAW0E,EACXxE,UAAWA,EACXjB,WAAYA,EACZmB,QAASA,EACT1B,QAASA,EACT2B,IAAKA,EACLF,WAAYA,EACZ7E,gBAAiBA,EACjBgF,UAAWA,KAZR2F,EAAP,oBAeA,EAA4BD,aAC1B,cAAC,GAAD,CAAe/K,IAAK8E,EAAeC,UAAWqE,EAAenE,UAAWA,KADnEgG,EAAP,oBA4BA,OACE,eAAC,KAAD,CAAMpK,eAAe,gBAAgBQ,WAAW,SAAhD,UACE,eAAC,KAAD,CAAMmD,cAAc,SAASnD,WAAW,aAAxC,UACE,cAAC,KAAD,CAASS,MAAOgD,EAAc2D,GAAG,GAAK,eAAiB,OAAvD,SAAgErH,MAC/D0D,EAAcmC,GAAG,IAAM9B,EAAQ8B,GAAG,IACjC,cAACiE,GAAA,EAAD,CACEnK,SAAS,OACTe,MAAM,aACNvB,SAAU,EACVH,MAAO+K,YAAiBhG,EAAQoB,MAAMzB,IACtCsG,KAAK,OACLC,OAAO,SAlCRvG,EAAc2D,GAAG,GACtB,cAAC,IAAD,CACE7G,QAASoJ,EACTzC,SAAU,CAAC,UAAW,YAAY+C,MAAK,SAACC,GAAD,OAAUtB,EAASuB,SAASC,SAASF,MAF9E,SAIG/K,EAAE,cAGL,eAACsJ,GAAD,WACE,cAAC,KAAD,CAAYzF,QAAQ,WAAWzC,QAASqJ,EAAmBpJ,GAAG,MAA9D,SACE,cAAC,KAAD,CAAWC,MAAM,UAAU4B,MAAM,WAEnC,cAAC,KAAD,CACEW,QAAQ,WACRzC,QAASoJ,EACTzC,SAAU,CAAC,UAAW,YAAY+C,MAAK,SAACC,GAAD,OAAUtB,EAASuB,SAASC,SAASF,MAH9E,SAKE,cAAC,IAAD,CAASzJ,MAAM,UAAU4B,MAAM,kB,SCrG1BgI,GAVQ,SAACC,GACtB,IAAMzC,EAAqBC,eAM3B,MAAO,CAAEyC,SAJazE,sBAAW,wBAAC,uBAAAuB,EAAA,sEAC1BmD,aAAY3C,EAAoByC,GADN,2CAE/B,CAACA,EAASzC,MC0DA4C,GAhDuC,SAAC,GAAuB,IAArBC,EAAoB,EAApBA,SAAU9C,EAAU,EAAVA,IACzDoB,EAAYC,cAAZD,QACR,EAAqC5E,eAA7BC,EAAR,EAAQA,aAAcC,EAAtB,EAAsBA,WACdnF,EAAMC,cAAND,EACR,EAAkC8E,oBAAS,GAA3C,mBAAOM,EAAP,KAAkBC,EAAlB,KACQ+F,EAAaF,GAAezC,GAA5B2C,SACFvG,EAAY2G,cACZ7B,EAAWC,eACX6B,EAAqB5B,EAAUM,YAAiBoB,EAAU,GAAKG,KAC/D9K,EAAiB6K,EAAmBpB,QAAQ,EAAGzE,IAAU0E,YACzDqB,EAAeF,EAAqBA,EAAmBG,aAAa/G,GAAWuB,WAAa,EAElG,OACE,eAAC,KAAD,CAAMxC,GAAG,MAAMvD,eAAe,gBAAgBQ,WAAW,SAAzD,UACE,eAAC,KAAD,CAAMmD,cAAc,SAASnD,WAAW,aAAxC,UACE,cAAC,KAAD,CAASS,MAAOmK,EAAmBxD,GAAG,GAAK,eAAiB,OAA5D,SAAqErH,IACpE+K,EAAe,GACd,cAACjB,GAAA,EAAD,CAASnK,SAAS,OAAOe,MAAM,aAAavB,SAAU,EAAGH,MAAO+L,EAAcf,KAAK,OAAOC,OAAO,SAGrG,cAAC,IAAD,CACE9C,SAAU0D,EAAmBxD,GAAG,IAAM7C,EACtChE,QAAO,wBAAE,uBAAA8G,EAAA,6DACP7C,GAAa,GADN,kBAGC+F,IAHD,OAILlG,EAAa,GAAD,OACPlF,EAAE,aADK,KAEVA,EAAE,wDAAyD,CAAEP,OAAQ,UANlE,gDASL0F,EACEnF,EAAE,SACFA,EAAE,uFAEJmI,QAAQC,MAAR,MAbK,yBAeL/C,GAAa,GAfR,qBAiBPsE,EAASK,aAAuB,CAAEH,UAASI,KAAM,CAACxB,MAjB3C,+DAFX,SAsBezI,EAAZoF,EAAc,aAAkB,iB,mBC5C1ByG,GAZQ,SAACC,GACtB,IAAMpD,EAAqBC,eACnBoD,EAAqBC,eAArBD,iBAOR,MAAO,CAAEE,UANatF,sBAAW,wBAAC,+BAAAuB,EAAA,sEACf6D,EAAiBD,EAAY,UAAW,CAACpD,EAAmBpG,QAAS4J,KAAOC,UAAUC,aADvE,cAC1BC,EAD0B,gBAEVA,EAAGC,OAFO,cAE1BC,EAF0B,yBAGzBA,EAAQC,QAHiB,2CAI/B,CAACV,EAAYpD,EAAoBqD,MCIhCU,GAASxP,IAAOC,IAAV,kDAqFGwP,GAtEqC,SAAC,GAA4D,IAA1DC,EAAyD,EAAzDA,KAAM9C,EAAmD,EAAnDA,QAAShK,EAA0C,EAA1CA,gBAAiBgF,EAAyB,EAAzBA,UAAW5B,EAAc,EAAdA,QACxFjD,EAAMC,cAAND,EACAmF,EAAeF,eAAfE,WACR,EAAkDL,oBAAS,GAA3D,mBAAO8H,EAAP,KAA0BC,EAA1B,KACQpE,EAAqBkE,EAArBlE,IAAKqE,EAAgBH,EAAhBG,YACb,EAA6DH,EAAKI,UAAY,GAAtEC,EAAR,EAAQA,UAAWxD,EAAnB,EAAmBA,aAAclF,EAAjC,EAAiCA,cAAeiH,EAAhD,EAAgDA,SAC1C0B,EAAYC,aAAWJ,GACvBK,EAAatD,GAAWmD,GAAaA,EAAUI,cAAc,GAC7DzD,EAAWC,eAEXkC,EAAauB,aAASJ,GAEpBhB,EAAcJ,GAAeC,GAA7BG,UAEFqB,EAAgB3G,sBAAW,wBAAC,uBAAAuB,EAAA,sEAE9B2E,GAAqB,GAFS,SAGxBZ,IAHwB,OAI9BtC,EAASK,aAAuB,CAAEH,UAASI,KAAM,CAACxB,MAJpB,gDAM9BtD,EAAWnF,EAAE,SAAUA,EAAE,uFACzBmI,QAAQC,MAAR,MAP8B,yBAS9ByE,GAAqB,GATS,4EAW/B,CAACZ,EAAWtC,EAAUE,EAASpB,EAAKzI,EAAGmF,IAqB1C,OACE,eAACsH,GAAD,WACE,eAAC,KAAD,WACE,cAAC,KAAD,CAAMlL,MAAI,EAACgM,cAAc,YAAYjM,MAAM,YAAYf,SAAS,OAAOiN,GAAG,MAA1E,kBAGA,cAAC,KAAD,CAAMjM,MAAI,EAACgM,cAAc,YAAYjM,MAAM,aAAaf,SAAS,OAAjE,SACGP,EAAE,eAGP,cAAC,GAAD,CAAeuL,SAAUA,EAAU9C,IAAKA,IACxC,eAAC,KAAD,WACE,cAAC,KAAD,CAAMlH,MAAI,EAACgM,cAAc,YAAYjM,MAAM,YAAYf,SAAS,OAAOiN,GAAG,MAA1E,SACGb,EAAKc,WAER,cAAC,KAAD,CAAMlM,MAAI,EAACgM,cAAc,YAAYjM,MAAM,aAAaf,SAAS,OAAjE,SACGP,EAAE,eAGL6J,EArCGsD,EACL,cAAC,GAAD,CACE7I,cAAeA,EACfkF,aAAcA,EACd/E,UAAWkI,EAAKc,SAChBhF,IAAKA,EACL7D,IAAK+H,EAAK/H,IACV3B,QAASA,EACT4B,UAAWA,EACXhF,gBAAiBA,IAGnB,cAAC,IAAD,CAAQiI,GAAG,MAAM5E,MAAM,OAAO6E,SAAU6E,EAAmBxL,QAASkM,EAApE,SACGtN,EAAE,qBAwBO,cAAC0N,GAAA,EAAD,CAAqB5F,GAAG,MAAM5E,MAAM,aCvFhDyK,GAAoB1Q,YAAOmG,KAAPnG,CAAH,uFAkER2Q,GA9C6B,SAAC,GAUtC,IATL/J,EASI,EATJA,QACA4E,EAQI,EARJA,IACAxF,EAOI,EAPJA,QACAwK,EAMI,EANJA,SACA5I,EAKI,EALJA,UACAD,EAII,EAJJA,IACApB,EAGI,EAHJA,WACAkB,EAEI,EAFJA,WACA7E,EACI,EADJA,gBAEQG,EAAMC,cAAND,EACF2E,EAAUoF,YAAgB0D,GAChC,EAAwCI,YAAYpF,GAA5Ce,EAAR,EAAQA,aAAclF,EAAtB,EAAsBA,cACtB,EAA4BiG,aAC1B,cAACrD,GAAA,EAAD,CACEC,UAAWnH,EAAE,eAAgB,CAAEP,OAAQwD,IACvCmE,oBAAqB9C,EAAc+C,KAAKmC,GACxClC,mBAAoBmG,EACpBlG,kBAAmB5C,EAAQyB,WAC3BC,kBAAmBxB,EAAUuB,WAC7BxB,IAAKA,EACLpB,WAAYA,EACZkB,WAAYA,EACZ8C,SAAU3H,EACV4H,QAAM,KAXHqG,EAAP,oBAoBA,OACE,eAACH,GAAD,CAAmB9M,WAAW,SAASO,QANf,SAAC2M,GACzBA,EAAMC,kBACNF,KAIA,UACGpJ,EADH,IAEe,oBAAZb,GACC,cAAC,KAAD,CAAYA,QAAQ,OAAO1C,MAAM,KAAK+C,GAAG,MAAzC,SACE,cAAC,IAAD,CAAehB,MAAM,eC7CzB+K,GAAahR,YAAOiR,IAAPjR,CAAH,qDAIVkR,GAAyBlR,YAAOmG,KAAPnG,CAAH,2GAMtBmR,GAAmBnR,IAAOC,IAAV,iGAEI,qBAAGS,MAAkBC,OAAOyQ,cAkGvCC,GAtF2B,SAAC,GAAuD,IAArD3B,EAAoD,EAApDA,KAAMjI,EAA8C,EAA9CA,WAAY3B,EAAkC,EAAlCA,QAAS8B,EAAyB,EAAzBA,UAAWgF,EAAc,EAAdA,QACzE7J,EAAMC,cAAND,EAER,EAA0D8E,oBAAS,GAAnE,mBAAOyJ,EAAP,KAA8BC,EAA9B,KAEMxL,EACJ2J,EAAK8B,WAAa9B,EAAK8B,UAAUhI,GAAG,GAApC,WACQkG,EAAK8B,UAAUrI,WAAWsI,oBAAeC,EAAW,CAAEC,sBAAuB,KACjF,GAEA3L,EAAU0J,EAAKc,UAAYd,EAAKc,SAASoB,cAAc7H,QAAQ,UAAW,IAC1E8H,EAAYnC,EAAKoC,KAAOpC,EAAKoC,KAAKD,UAAY9O,EAAE,eAEhDgP,EAAwBhN,GAAyB,CACrDC,kBAAmB0K,EAAKhJ,WAAWrB,QACnCJ,aAAcyK,EAAKjJ,MAAMpB,UAErBzC,EAAe,UAAMoP,KAAN,YAAgCD,GAC/C/B,EAAYC,aAAWP,EAAKG,aAC5BoC,EAAuC,SAAtBvC,EAAKjJ,MAAMjE,OAElC,OACE,eAACwO,GAAD,CAAYkB,SAAUD,EAAtB,UACE,eAACf,GAAD,WACE,cAAC,GAAD,CACElL,QAASA,EACTO,WAAYmJ,EAAKnJ,WACjBC,gBAAiBkJ,EAAKyC,YACtB1L,MAAOiJ,EAAKjJ,MACZC,WAAYgJ,EAAKhJ,cAEjBZ,GACA,eAAC,KAAD,CAAM1C,eAAe,gBAAgBQ,WAAW,SAAhD,UACE,eAAC,KAAD,WAAOb,EAAE,OAAT,OACA,cAAC,KAAD,CAAMuB,MAAI,EAACpB,MAAO,CAAEkP,QAAS,OAAQxO,WAAY,UAAjD,SACG8L,EAAK/H,IACJ,cAAC,GAAD,CACEf,QAAQ,kBACR4E,IAAKkE,EAAKlE,IACVgF,SAAUd,EAAKc,SACfjK,WAAYmJ,EAAKnJ,WACjBP,QAASA,EACTpD,gBAAiBA,EACjBgF,UAAWA,EACXD,IAAK+H,EAAK/H,IACVF,WAAYA,IAGd,cAAC,KAAD,CAAUvB,OAAQ,GAAID,MAAO,UAKrC,eAAC,KAAD,CAAM7C,eAAe,gBAArB,UACE,eAAC,KAAD,WAAOL,EAAE,QAAT,OACA,cAAC,KAAD,CAAMuB,MAAI,EAAV,SAAYuN,OAEd,cAACQ,GAAD,CACE3C,KAAMA,EACN1J,QAASA,EACT4G,QAASA,EACThF,UAAWA,EACXhF,gBAAiBA,OAIrB,eAACuO,GAAD,WACE,cAAC,GAAD,CACEhN,QAAS,kBAAMoN,GAA0BD,IACzC1M,SAAU0M,IAEXA,GACC,cAAC,GAAD,CACExL,QAASA,EACTF,eAAgB0M,YAAetC,EAAW,WAC1CnK,YAAW,qBAAgBmK,GAC3BjK,oBAAqBA,EACrBC,QAASA,EACTpD,gBAAiBA,W,UCxGvB2P,GAAYvS,IAAOC,IAAV,4MAGJ,qBAAGS,MAAkBC,OAAOmB,QAQvB,qBAAGpB,MAAkBC,OAAO6R,cAMtCC,GAAazS,IAAOC,IAAV,qEA+CDyS,GA1CiB,SAAC,GAW1B,IAVL/P,EAUI,EAVJA,MACA6I,EASI,EATJA,IACAxF,EAQI,EARJA,QACAwK,EAOI,EAPJA,SACAjK,EAMI,EANJA,WACAtB,EAKI,EALJA,aACAD,EAII,EAJJA,kBACA4C,EAGI,EAHJA,UACA+K,EAEI,EAFJA,cAEI,IADJC,kBACI,SACEb,EAAwBhN,GAAyB,CAAEC,oBAAmBC,iBACtErC,EAAe,UAAMoP,KAAN,YAAgCD,GAErD,OAAyB,IAAlBY,EACL,cAACJ,GAAD,UACGI,EACC,cAAC,GAAD,CACE/L,QAASgM,EAAa,OAAS,kBAC/BpH,IAAKA,EACLgF,SAAUA,EACVxK,QAASA,EACTO,WAAYA,EACZqB,UAAWA,EACXD,IAAKgL,EACLlL,WAAY9E,EACZC,gBAAiBA,IAGnB,cAAC6P,GAAD,UACE,cAAC,KAAD,CAAUxM,MAAO,SAKvB,cAACsM,GAAD,UACE,eAACE,GAAD,WAAaE,EAAb,UChEAJ,GAAYvS,IAAOC,IAAV,sIAKX,qBAAGS,MAAkBuB,aAAaE,MAKhC0Q,GAAe7S,IAAOC,IAAV,qGAId,qBAAGS,MAAkBuB,aAAaE,MAmCvB2Q,GA9BkC,SAAC,GAAuC,IAArCrM,EAAoC,EAApCA,MAAOC,EAA6B,EAA7BA,WAAYqM,EAAiB,EAAjBA,MAAOvH,EAAU,EAAVA,IACpEnE,EAAkBuJ,YAAYpF,GAA9BnE,cACAtE,EAAMC,cAAND,EACFiQ,EAAmBtF,YAAiBrG,GAc1C,OACE,eAAC,GAAD,WACE,cAACwL,GAAD,UACE,cAAC,KAAD,CAAgBjM,QAAQ,WAAWC,aAAcJ,EAAOK,eAAgBJ,EAAYT,MAAO,GAAIC,OAAQ,OAEzG,gCAhBE8M,EAEA,cAAC,KAAD,CAAM3O,MAAM,YAAYf,SAAS,OAAOgB,MAAI,EAACgM,cAAc,YAA3D,SACGvN,EAAE,aAKF,KAUH,cAAC,KAAD,CAAMuB,MAAI,EAAV,SAAYyO,WC9CdE,GAASjT,IAAOkT,KAAV,qFACD,gBAAGC,EAAH,EAAGA,OAAQzS,EAAX,EAAWA,MAAX,OAAwByS,EAASzS,EAAMC,OAAOmB,KAAOpB,EAAMC,OAAOyS,gBAgB9DC,GAXiD,SAAC,GAAiC,IAA/B/E,EAA8B,EAA9BA,SACjE,OAD+F,EAApBgF,cAElE,cAACL,GAAD,CAAQE,OAAQ7E,EAAhB,SAA2BA,EAASmD,mBAG3C,cAACwB,GAAD,CAAQE,OAAQ,EAAhB,SACE,cAAC,KAAD,CAAUlN,MAAO,QChBjBsM,GAAYvS,IAAOC,IAAV,2KAKJ,qBAAGS,MAAkBC,OAAO+D,WAEnC,qBAAGhE,MAAkBuB,aAAaE,MAKhCoR,GAAYvT,YAAOwT,IAAPxT,CAAH,gEACA,qBAAGyT,QAAyB,iBAAmB,eAgB/CC,GAZyB,SAAC,GAA4B,IAA1BC,EAAyB,EAAzBA,mBACjC5Q,EAAMC,cAAND,EACA6Q,EAAcC,eAAdD,UAER,OACE,eAAC,GAAD,YACIA,GAAa7Q,EAAE,WACjB,cAACwQ,GAAD,CAAWlP,MAAM,UAAUoP,QAASE,QC5BpCG,GAAmB9T,IAAOC,IAAV,sDAQhB8T,GAAoB/T,IAAOC,IAAV,qKACZ,qBAAGS,MAAkBC,OAAOmB,QAKnC,qBAAGpB,MAAkBuB,aAAa+R,MAMhCzB,GAAYvS,IAAOC,IAAV,sEAqCAgU,GAhC8C,SAAC,GAAoB,IAAlB1N,EAAiB,EAAjBA,WACxD2N,EAAoB3N,EAAaA,EAAW4N,cAAgB,cAAC,KAAD,CAAUlO,MAAO,KAC3ElD,EAAMC,cAAND,EACFqR,EACJ,qCACE,cAAC,KAAD,UACGrR,EACC,mIAGJ,cAAC,KAAD,CAAMsR,GAAG,OAAT,SACGtR,EAAE,sGAEL,cAAC,KAAD,UAAOA,EAAE,8EAGb,EAA+CuR,aAAWF,EAAgB,CACxEG,UAAW,UACXC,cAAe,CAAC,GAAI,MAFdC,EAAR,EAAQA,UAAWC,EAAnB,EAAmBA,QAASC,EAA5B,EAA4BA,eAK5B,OACE,eAAC,GAAD,WACE,cAACZ,GAAD,UAAoBG,IACpB,cAACJ,GAAD,CAAkBc,IAAKH,EAAvB,SACE,cAAC,KAAD,CAAUpQ,MAAM,iBAEjBsQ,GAAkBD,MCnDnBZ,GAAmB9T,IAAOC,IAAV,wDAQhB4U,GAAmB7U,IAAOC,IAAV,kLAMlB,qBAAGS,MAAkBuB,aAAa+R,MAMhCzB,GAAYvS,IAAOC,IAAV,wEA+BA6U,GA1B4C,SAAC,GAAmB,IAAjBtD,EAAgB,EAAhBA,UACtDuD,EACJvD,GAAaA,EAAUhI,GAAG,GAA1B,WACMwL,OAAOxD,GAAWC,oBAAeC,EAAW,CAAEC,sBAAuB,KAEzE,cAAC,KAAD,CAAU1L,MAAO,KAEblD,EAAMC,cAAND,EACR,EAA+CuR,aAC7CvR,EAAE,+DACF,CAAEwR,UAAW,UAAWC,cAAe,CAAC,GAAI,MAFtCC,EAAR,EAAQA,UAAWC,EAAnB,EAAmBA,QAASC,EAA5B,EAA4BA,eAK5B,OACE,eAAC,GAAD,WACE,cAACE,GAAD,UACE,cAAC,KAAD,UAAOE,MAET,cAAC,GAAD,CAAkBH,IAAKH,EAAvB,SACE,cAAC,KAAD,CAAUpQ,MAAM,iBAEjBsQ,GAAkBD,MClDZO,GAAkBjV,IAAOC,IAAV,0XAEN,qBAAGS,MAAkBC,OAAOc,SAM9C,qBAAGf,MAAkBuB,aAAaE,MAOlC,qBAAGzB,MAAkBuB,aAAaiT,MAQzBC,GAAenV,IAAOC,IAAV,gDAIZmV,GAAgBpV,IAAOC,IAAV,2GC4DXoO,GApEoD,SAAC,GAAsC,IAApC7C,EAAmC,EAAnCA,IAAKsE,EAA8B,EAA9BA,SAAUwD,EAAoB,EAApBA,cACnF,EAAqCtL,eAA7BC,EAAR,EAAQA,aAAcC,EAAtB,EAAsBA,WAChBmN,EAAoB,IAAI1M,IAAUmH,EAASxB,UAC3C1G,EAAY2G,cACdD,EAAWG,KACXC,EAAe,EACf/K,EAAiB2P,EAAgBhF,EAASmD,iBAAmB,cAAC,KAAD,CAAUxL,MAAO,KAG7EoP,EAAkBC,WAErB5G,GADAJ,EAAWpB,YAAiBmI,IACJ1G,aAAa/G,GAAWuB,WAChDxF,EAAiB2K,EAASlB,QAAQ,EAAGzE,IAAU0E,aAGjD,MAAkCxF,oBAAS,GAA3C,mBAAOM,EAAP,KAAkBC,EAAlB,KACQ+F,EAAaF,GAAezC,GAA5B2C,SACApL,EAAMC,cAAND,EACF2J,EAAWC,eACTC,EAAYC,cAAZD,QAER,OACE,eAACqI,GAAD,WACE,eAACE,GAAD,WACE,cAAC,KAAD,CAAM7Q,MAAI,EAACgM,cAAc,YAAYjM,MAAM,YAAYf,SAAS,OAAOiN,GAAG,MAA1E,kBAGA,cAAC,KAAD,CAAMjM,MAAI,EAACgM,cAAc,YAAYjM,MAAM,aAAaf,SAAS,OAAjE,SACGP,EAAE,eAGP,eAACqS,GAAD,WACE,gCACE,cAAC,KAAD,UAAUzR,IACT+K,EAAe,GACd,cAACjB,GAAA,EAAD,CAASnK,SAAS,OAAOe,MAAM,aAAavB,SAAU,EAAGH,MAAO+L,EAAcf,KAAK,OAAOC,OAAO,SAGrG,cAAC,IAAD,CACE9C,SAAUwD,EAAStD,GAAG,IAAM7C,IAAcmL,EAC1CnP,QAAO,wBAAE,uBAAA8G,EAAA,6DACP7C,GAAa,GADN,kBAGC+F,IAHD,OAILlG,EAAa,GAAD,OACPlF,EAAE,aADK,KAEVA,EAAE,wDAAyD,CAAEP,OAAQ,UANlE,gDASL0F,EACEnF,EAAE,SACFA,EAAE,uFAEJmI,QAAQC,MAAR,MAbK,yBAeL/C,GAAa,GAfR,qBAiBPsE,EAASK,aAAuB,CAAEH,UAASI,KAAM,CAACxB,MAjB3C,+DAmBTvE,GAAG,MArBL,SAuBelE,EAAZoF,EAAc,aAAkB,oBCxDrCkE,GAAoBrM,IAAOC,IAAV,gDAmNRsV,GAzM6C,SAAC,GAWtD,IAVL/J,EAUI,EAVJA,IACA7D,EASI,EATJA,IACApB,EAQI,EARJA,WACAiK,EAOI,EAPJA,SACAxK,EAMI,EANJA,QACA6J,EAKI,EALJA,YACAnJ,EAII,EAJJA,WACAD,EAGI,EAHJA,MACA6M,EAEI,EAFJA,cACA7L,EACI,EADJA,WAEQ1E,EAAMC,cAAND,EACAmF,EAAeF,eAAfE,WACA0E,EAAYC,cAAZD,QACR,EAAkD/E,oBAAS,GAA3D,mBAAO8H,EAAP,KAA0BC,EAA1B,KACA,EAAmDgB,YAAYpF,GAAvDuE,EAAR,EAAQA,UAAWxD,EAAnB,EAAmBA,aAAclF,EAAjC,EAAiCA,cACzB+E,EAAYL,GAAcP,GAA1BY,QACAN,EAAcP,GAAgBC,GAA9BM,UACFU,EAAWC,cACX/E,EAAUoF,YAAgB0D,GAC1B5I,EAAY2G,cAEZ2B,EAAatD,GAAWmD,GAAaA,EAAUI,cAAc,GAE7DH,EAAYC,aAAWJ,GACvBkC,EAAwBhN,GAAyB,CACrDC,kBAAmB0B,EAAWrB,QAC9BJ,aAAcwB,EAAMpB,UAEhBzC,EAAe,UAAMoP,KAAN,YAAgCD,GAE/C/F,EAAW,yCAAG,WAAOJ,GAAP,UAAAX,EAAA,sEACZmB,EAAQR,GADI,OAElBc,EAASK,aAAuB,CAAEH,UAASI,KAAM,CAACxB,MAFhC,2CAAH,sDAKXG,EAAa,yCAAG,WAAOC,GAAP,UAAAX,EAAA,sEACda,EAAUF,GADI,OAEpBc,EAASK,aAAuB,CAAEH,UAASI,KAAM,CAACxB,MAF9B,2CAAH,sDAKb7H,EAAiB+F,uBAAY,WACjC,IAAMuD,EAAyBC,YAAiB7F,GAChD,OAAI4F,EAAuBzD,GAAG,IAAMyD,EAAuBE,GAAG,MACrDF,EAAuBG,QAAQ,GAAIzE,YAAU0E,YAElDJ,EAAuBzD,GAAG,IAAMyD,EAAuBE,GAAG,MACrD1E,YAAsBpB,GAAeoK,iBAEvCxE,EAAuBG,QAAQ,EAAGzE,YAAU0E,cAClD,CAAChG,IAEJ,EAA2BiG,aACzB,cAAC,GAAD,CACE/K,IAAKgK,EACL7E,QAASA,EACT1B,QAASA,EACT2B,IAAKA,EACLF,WAAYA,EACZJ,cAAeA,EACfC,UAAW0E,EACXxE,UAAWgJ,EACXjK,WAAYA,EACZ3D,gBAAiBA,EACjBgF,UAAWA,KAZR2F,EAAP,oBAeA,EAA4BD,aAC1B,cAAC,GAAD,CAAe/K,IAAK8E,EAAeC,UAAWqE,EAAenE,UAAWgJ,KADnEhD,EAAP,oBAGMqB,EAAauB,aAASJ,GACtBtD,EAAWC,eACTqC,EAAcJ,GAAeC,GAA7BG,UAEFqB,EAAgB3G,sBAAW,wBAAC,uBAAAuB,EAAA,sEAE9B2E,GAAqB,GAFS,SAGxBZ,IAHwB,OAI9BtC,EAASK,aAAuB,CAAEH,UAASI,KAAM,CAACxB,MAJpB,gDAM9BtD,EAAWnF,EAAE,SAAUA,EAAE,uFACzBmI,QAAQC,MAAR,MAP8B,yBAS9ByE,GAAqB,GATS,4EAW/B,CAACZ,EAAWtC,EAAUE,EAASpB,EAAKzI,EAAGmF,IAE1C,OAAK0E,EAeDsD,EACE7I,EAAcmC,GAAG,GAEjB,eAACyL,GAAD,WACE,eAACE,GAAD,WACE,cAAC,KAAD,CAAM7Q,MAAI,EAACgM,cAAc,YAAYjM,MAAM,YAAYf,SAAS,OAAOiN,GAAG,MAA1E,SACGC,IAEH,cAAC,KAAD,CAAMlM,MAAI,EAACgM,cAAc,YAAYjM,MAAM,aAAaf,SAAS,OAAjE,SACGP,EAAE,eAGP,eAACqS,GAAD,WACE,gCACE,cAAC,KAAD,UAAUzR,MACT0D,EAAcmC,GAAG,IAAM9B,EAAQ8B,GAAG,IACjC,cAACiE,GAAA,EAAD,CACEnK,SAAS,OACTe,MAAM,aACNvB,SAAU,EACVH,MAAO+K,YAAiBhG,EAAQoB,MAAMzB,IACtCsG,KAAK,OACLC,OAAO,SAIb,eAAC,GAAD,WACE,cAAC,KAAD,CAAYhH,QAAQ,YAAYzC,QAASqJ,EAAmBpJ,GAAG,MAA/D,SACE,cAAC,KAAD,CAAWC,MAAM,UAAU4B,MAAM,WAEnC,cAAC,KAAD,CACEW,QAAQ,YACRzC,QAASoJ,EACTzC,SAAU,CAAC,UAAW,YAAY+C,MAAK,SAACC,GAAD,OAAUtB,EAASuB,SAASC,SAASF,MAH9E,SAKE,cAAC,IAAD,CAASzJ,MAAM,UAAU4B,MAAM,oBASzC,eAACgP,GAAD,WACE,eAACE,GAAD,WACE,cAAC,KAAD,CAAM7Q,MAAI,EAACgM,cAAc,YAAYjM,MAAM,aAAaf,SAAS,OAAOiN,GAAG,MAA3E,SACGxN,EAAE,WAEL,cAAC,KAAD,CAAMuB,MAAI,EAACgM,cAAc,YAAYjM,MAAM,YAAYf,SAAS,OAAhE,SACGkN,OAGL,cAAC4E,GAAD,UACE,cAAC,IAAD,CACEnP,MAAM,OACN9B,QAASoJ,EACT3G,QAAQ,YACRkE,SAAU,CAAC,UAAW,YAAY+C,MAAK,SAACC,GAAD,OAAUtB,EAASuB,SAASC,SAASF,MAJ9E,SAMG/K,EAAE,mBAORuQ,EAgBH,eAAC2B,GAAD,WACE,cAACE,GAAD,UACE,cAAC,KAAD,CAAM7Q,MAAI,EAACgM,cAAc,YAAYjM,MAAM,aAAaf,SAAS,OAAjE,SACGP,EAAE,mBAGP,cAACqS,GAAD,UACE,cAAC,IAAD,CAAQnP,MAAM,OAAO6E,SAAU6E,EAAmBxL,QAASkM,EAAezJ,QAAQ,YAAlF,SACG7D,EAAE,iBAtBP,eAACkS,GAAD,WACE,cAACE,GAAD,UACE,cAAC,KAAD,CAAM7Q,MAAI,EAACgM,cAAc,YAAYjM,MAAM,aAAaf,SAAS,OAAjE,SACGP,EAAE,qBAGP,cAACqS,GAAD,UACE,cAAC,KAAD,CAAUnP,MAAO,IAAKuP,aAAc,GAAIC,UAAW,UAzFvD,eAACR,GAAD,WACE,cAACE,GAAD,UACE,cAAC,KAAD,CAAM7Q,MAAI,EAACgM,cAAc,YAAYjM,MAAM,aAAaf,SAAS,OAAjE,SACGP,EAAE,qBAGP,cAACqS,GAAD,UACE,cAAC3E,GAAA,EAAD,CAAqBxK,MAAM,eC5G/ByP,GAAkBC,YAAH,wGASfC,GAAoBD,YAAH,wGASjBpD,GAAYvS,IAAOC,IAAV,oPACA,qBAAG2E,SAEViR,YADI,0EAEAH,IAEJG,YAJI,0EAKAD,OAGI,qBAAGlV,MAAkBC,OAAOmV,cAMxC,qBAAGpV,MAAkBuB,aAAa+R,MAMhCvO,GAAqBzF,YAAO0F,KAAP1F,CAAH,mDAIlB+V,GAAiB/V,IAAOC,IAAV,4KACT,qBAAGS,MAAkBC,OAAOmB,QAKnC,qBAAGpB,MAAkBuB,aAAaE,MAKhC6T,GAAgBhW,IAAOC,IAAV,oRAKf,qBAAGS,MAAkBuB,aAAaE,MAgBhC8S,GAAkBjV,IAAOC,IAAV,sLAIjB,qBAAGS,MAAkBuB,aAAaE,MAQhC8T,GAAgBjW,IAAOC,IAAV,mDAIbiW,GAAiBlW,IAAOC,IAAV,qFAGhB,qBAAGS,MAAkBuB,aAAa+R,MAKhCmC,GAAenW,IAAOC,IAAV,+HAoEHmW,GA7DgD,SAAC,GAOzD,IANLC,EAMI,EANJA,QACA1O,EAKI,EALJA,IACApB,EAII,EAJJA,WACAiL,EAGI,EAHJA,UACA8B,EAEI,EAFJA,cACA1O,EACI,EADJA,SAEM8K,EAAO2G,EAELtT,EAAMC,cAAND,EACFmP,EAA+B,OAApBxC,EAAKnJ,WACdG,EAA4BgJ,EAA5BhJ,WAAYD,EAAgBiJ,EAAhBjJ,MAAOqL,EAASpC,EAAToC,KACrB9L,EAAU0J,EAAKc,UAAYd,EAAKc,SAASoB,cAAc7H,QAAQ,UAAW,IAC1EgI,EAAwBhN,GAAyB,CACrDC,kBAAmB0B,EAAWrB,QAC9BJ,aAAcwB,EAAMpB,UAEhB2K,EAAYC,aAAWP,EAAKG,aAC5ByG,EAAMhE,YAAetC,EAAW,WAChC7D,EAAI,qBAAiB6D,GAE3B,OACE,eAAC,GAAD,CAAWpL,SAAUA,EAArB,UACE,eAACqR,GAAD,WACG/D,GACC,cAAC6D,GAAD,UACE,cAAC,GAAD,CAAoBxR,KAAI,eAAUwN,GAAlC,SACGhP,EAAE,eAAgB,CAAEP,OAAQwD,QAInC,cAAC,GAAD,CAAoBzB,KAAM+R,EAA1B,SAAgCvT,EAAE,mBAClC,cAAC,GAAD,CAAoBwB,KAAM4H,EAA1B,SAAiCpJ,EAAE,mBACnC,eAACiT,GAAD,WACGtG,EAAKyC,YAAc,cAAC,KAAD,IAAmB,cAAC,KAAD,IACtCL,EAAO,cAAC,KAAD,IAAc,WAG1B,eAACoE,GAAD,WACE,eAACC,GAAD,WACE,cAAC,KAAD,UAAOpT,EAAE,SACT,cAAC,GAAD,eAAS4E,OAEX,eAACwO,GAAD,WACE,cAAC,KAAD,UAAOpT,EAAE,gBACT,cAAC,GAAD,eAAgBwD,OAElB,eAAC4P,GAAD,WACE,cAAC,KAAD,UAAOpT,EAAE,eACT,cAAC,GAAD,eAAeyO,UAGnB,eAAC,GAAD,WACE,cAAC,GAAD,2BAAmB9B,GAAnB,IAAyB4D,cAAeA,KACxC,cAACiD,GAAD,2BAAkB7G,GAAlB,IAAwB4D,cAAeA,EAAetN,QAASA,EAASyB,WAAYE,EAAIhF,gBCxL1F6T,GAAQxW,IAAOC,IAAV,sFAEA,qBAAGS,MAAkBC,OAAO6R,cAIjCiE,GAAmBzW,IAAOC,IAAV,6FAmBPyW,GAT+B,SAAC,GAA8B,IAAD,IAA3B3D,aAA2B,MAAnB,GAAmB,EAAfhS,EAAe,EAAfA,SAC3D,OACE,gCACGgS,GAAS,cAACyD,GAAD,UAAQzD,IAClB,cAAC0D,GAAD,UAAmB1V,QCMZ4V,GAAwC,CACnD,CACEC,GAAI,EACJC,KAAM,OACNC,UAAU,EACV/D,MAAO,IAET,CACE6D,GAAI,EACJC,KAAM,SACNC,UAAU,EACV/D,MAAO,UAET,CACE6D,GAAI,EACJC,KAAM,MACNC,UAAU,EACV/D,MAAO,OAET,CACE6D,GAAI,EACJC,KAAM,UACNC,UAAU,EACV/D,MAAO,KAIEgE,GAAyC,CACpD,CACEH,GAAI,EACJC,KAAM,OACNC,UAAU,EACV/D,MAAO,IAET,CACE6D,GAAI,EACJC,KAAM,SACNC,UAAU,EACV/D,MAAO,UAET,CACE6D,GAAI,EACJC,KAAM,MACNC,UAAU,EACV/D,MAAO,OAET,CACE6D,GAAI,EACJC,KAAM,YACNC,UAAU,EACV/D,MAAO,aAET,CACE6D,GAAI,EACJC,KAAM,aACNC,UAAU,EACV/D,MAAO,cAET,CACE6D,GAAI,EACJC,KAAM,UACNC,UAAU,EACV/D,MAAO,KC5DLiE,GAAQ,CACZrP,IAAK+K,GACLhD,KAAMoD,GACNK,OAAQE,GACRgD,QAAS3C,GACTnN,WAAY0N,GACZzC,UAAWsD,IAGPmC,GAAYjX,IAAOC,IAAV,+KAOX,qBAAGS,MAAkBuB,aAAaiT,MAKhCgC,GAAWlX,IAAOmX,GAAV,mFAEe,qBAAGzW,MAAkBC,OAAOyQ,cAGnDgG,GAAmBpX,IAAOqX,GAAV,4DAIhBC,GAAgBtX,IAAOqX,GAAV,6EAKbE,GAAiBvX,IAAOqX,GAAV,oDAwHLG,GApH2C,SAACtX,GACzD,IAAQmW,EAA2BnW,EAA3BmW,QAAS/C,EAAkBpT,EAAlBoT,cACXmE,IAAoB7G,YAAYyF,EAAQ7K,KAAKnE,cAAc8B,WACjE,EAAsDtB,mBAAS4P,GAA/D,mBAAOC,EAAP,KAA4BC,EAA5B,KACMC,EAAoBC,aAAkBH,EAAqB,KACzD3U,EAAMC,cAAND,EAEF+U,EAAoB,WACxBH,GAAwBD,IAG1BK,qBAAU,WACRJ,EAAuBF,KACtB,CAACA,IAEJ,MAAgC5D,eAAxBD,EAAR,EAAQA,UAAWoE,EAAnB,EAAmBA,SAEbC,GAAmBrE,EACnBsE,EAAcD,EAAkBtB,GAAqBI,GACrDoB,EAAcD,EAAY7W,KAAI,SAAC+W,GAAD,OAAYA,EAAOvB,QAmFvD,OACE,qCAjFKmB,EA+CH,eAACd,GAAD,CAAU/S,QAAS2T,EAAnB,UACE,+BACE,6BACE,cAACP,GAAD,UACE,cAAC,GAAD,UACE,cAAC,GAAD,eAAUrX,EAAMwP,aAItB,+BACE,cAAC0H,GAAD,UACE,cAAC,GAAD,CAAYrE,MAAOhQ,EAAE,UAArB,SACE,cAAC,GAAD,2BAAY7C,EAAMiT,QAAlB,IAA0BG,cAAeA,SAG7C,cAACgE,GAAD,UACE,cAAC,GAAD,CAAYvE,MAAOhQ,EAAE,OAArB,SACE,cAAC,GAAD,2BAAS7C,EAAMyH,KAAf,IAAoBiL,YAAU,eAKtC,6BACE,cAACqE,GAAD,UACE,cAAC,GAAD,UACE,cAAC,GAAD,CAAStD,mBAAoB+D,aAtEnC,cAACR,GAAD,CAAU/S,QAAS2T,EAAnB,SACGO,OAAOC,KAAKpY,GAAOmB,KAAI,SAACkX,GACvB,IAAMC,EAAcL,EAAYM,QAAQF,GACxC,IAAqB,IAAjBC,EACF,OAAO,KAGT,OAAQD,GACN,IAAK,UACH,OACE,6BACE,cAACtB,GAAD,UACE,cAAC,GAAD,UACE,cAAC,GAAD,CAAStD,mBAAoB+D,SAH1Ba,GAQb,IAAK,MACH,OACE,6BACE,cAACtB,GAAD,UACE,cAAC,GAAD,CAAYlE,MAAOhQ,EAAE,OAArB,SACE,cAAC,GAAD,2BAAS7C,EAAMyH,KAAf,IAAoBiL,WAAYqF,UAH7BM,GAQb,QACE,OACE,6BACE,cAACtB,GAAD,UACE,cAAC,GAAD,CAAYlE,MAAOhQ,EAAEmV,EAAYM,GAAazF,OAA9C,SACG9R,IAAMyX,cAAc1B,GAAMuB,GAA1B,2BAAqCrY,EAAMqY,IAA3C,IAAiDjF,wBAH/CiF,SAmDpBX,GACC,6BACE,oBAAIe,QAAS,EAAb,SACE,cAAC,GAAD,2BAAiBzY,GAAjB,IAAwB0E,SAAU8S,aCpKxCnF,GAAYvS,IAAOC,IAAV,+HACH,qBAAGS,MAAkBkY,KAAKC,cAEtB,qBAAGnY,MAAkBkY,KAAK9C,cAKpCgD,GAAe9Y,IAAOC,IAAV,qIASZ8Y,GAAc/Y,IAAOgZ,MAAV,oKASXC,GAAYjZ,IAAOkZ,MAAV,qHASTC,GAAiBnZ,IAAOC,IAAV,qDAIdmZ,GAAwBpZ,IAAOC,IAAV,yHA2CZoZ,GApC0B,SAACnZ,GACxC,IAAMoZ,EAAiBC,iBAAuB,MACtCxW,EAAMC,cAAND,EACAyW,EAAiCtZ,EAAjCsZ,KAAMC,EAA2BvZ,EAA3BuZ,QAASnG,EAAkBpT,EAAlBoT,cAEfoG,EAASC,aAASF,EAASD,EAAM,CAAE1C,UAAU,EAAM8C,WAAY,SAA/DF,KAQR,OACE,cAAC,GAAD,CAAW9C,GAAG,cAAd,SACE,eAACuC,GAAD,WACE,cAACL,GAAD,CAAclE,IAAK0E,EAAnB,SACE,cAACP,GAAD,UACE,cAACE,GAAD,UACGS,EAAKrY,KAAI,SAACwY,GACT,OAAO,wBAAC,GAAD,2BAASA,EAAIC,UAAb,IAAuBxG,cAAeA,EAAeiF,IAAG,oBAAesB,EAAIjD,gBAK1F,cAACwC,GAAD,UACE,eAAC,IAAD,CAAQxS,QAAQ,OAAOzC,QAnBX,WAClBmV,EAAeS,QAAQC,eAAe,CACpCC,SAAU,YAiBN,UACGlX,EAAE,UACH,cAAC,IAAD,CAAesB,MAAM,uB,UCzClB6V,GArCuC,SAAC,GAAiC,IAKlFC,EALmDC,EAA8B,EAA9BA,wBAC/CC,EAAQC,cAARD,IACF7N,EAAWC,cACT1J,EAAMC,cAAND,EAGR,OAAQyJ,EAASuB,UACf,IAAK,SASL,QACEoM,EAAc,EACd,MARF,IAAK,iBACHA,EAAc,EACd,MACF,IAAK,kBACHA,EAAc,EAOlB,OACE,cAAC,GAAD,UACE,eAAC,IAAD,CAAYA,YAAaA,EAAajW,MAAM,KAAK0C,QAAQ,SAAzD,UACE,cAAC,IAAD,CAAgB2T,GAAIC,KAAMC,GAAE,UAAKJ,GAAjC,SACGtX,EAAE,UAEL,cAAC,KAAD,CAAiB2X,KAAMN,EAAvB,SACE,cAAC,IAAD,CAAgBxD,GAAG,wBAAwB2D,GAAIC,KAAMC,GAAE,UAAKJ,EAAL,YAAvD,SACGtX,EAAE,sBAUT0B,GAAUzE,IAAOC,IAAV,6MAUT,qBAAGS,MAAkBuB,aAAaE,MCjDhCoQ,GAAYvS,IAAOC,IAAV,yFAGX,qBAAGS,MAAkBuB,aAAaE,MAwBvBwY,GAnB8C,SAAC,GAA4B,IAA1BC,EAAyB,EAAzBA,SAAUC,EAAe,EAAfA,SAClEC,EAAe,SAACC,GAChBH,IAAaG,GACfF,EAASE,IAIb,OACE,eAAC,GAAD,WACE,cAAC,KAAD,CAAYnU,QAAQ,OAAO1C,MAAM,KAAK0S,GAAG,oBAAoBzS,QAAS,kBAAM2W,EAAaE,IAASC,OAAlG,SACE,cAAC,IAAD,CAAc5W,MAAOuW,IAAaI,IAASC,KAAO,UAAY,mBAEhE,cAAC,KAAD,CAAYrU,QAAQ,OAAO1C,MAAM,KAAK0S,GAAG,qBAAqBzS,QAAS,kBAAM2W,EAAaE,IAASE,QAAnG,SACE,cAAC,KAAD,CAAc7W,MAAOuW,IAAaI,IAASE,MAAQ,UAAY,uBCAjEC,GAAmBnb,IAAOC,IAAV,uTAUlB,qBAAGS,MAAkBuB,aAAaE,MAQhCiZ,GAAgBpb,IAAOC,IAAV,oIAKfoC,MAuBEgZ,IAlBerb,IAAOC,IAAV,mEACZoC,MAKkBrC,IAAOC,IAAV,gKAMjB,qBAAGS,MAAkBuB,aAAaE,MAMjBnC,IAAOC,IAAV,qSAWd,qBAAGS,MAAkBuB,aAAaE,OAiBhCmZ,IAPctb,YAAOub,KAAPvb,CAAH,gGAOK,SAACwb,EAAyBC,GAC9C,OAAID,GAAkBC,GACZD,EAAiBC,GAAchK,eAAe,QAAS,CAAEE,sBAAuB,IAEtF6J,EACKA,EAAe/J,eAAe,QAAS,CAAEE,sBAAuB,IAElE,OAkVM+J,GA/US,WACtB,IAAQC,EAASrB,cAATqB,KACA5N,EAAatB,cAAbsB,SACAhL,EAAMC,cAAND,EACR,EAA0C6Y,cAA5BC,EAAd,EAAQrC,KAAesC,EAAvB,EAAuBA,eACjBlU,EAAY2G,cAClB,EAA0B1G,mBAAS,IAAnC,mBAAOkU,EAAP,KACA,GADA,KACgCC,eAAhC,mBAAOpB,EAAP,KAAiBqB,EAAjB,KACQrP,EAAYC,cAAZD,QACR,EAAoC/E,mBAAS,OAA7C,mBAAOqU,EAAP,KACA,GADA,KACwCC,eAAhCC,EAAR,EAAQA,YAAaC,EAArB,EAAqBA,eACfC,EAAoB/C,iBAAO,GAE3BgD,EAAaxO,EAASC,SAAS,YAC/BwO,EAAazO,EAASC,SAAS,WAC/BkE,GAAYsK,IAAeD,EAEjCE,YAAyBF,GAIzB,IAAMjJ,GAAiB1G,KAAcA,GAAWkP,EAEhD,EAAoCY,YAAsBxK,GAA1D,mBAAOyK,EAAP,KAAmBC,EAAnB,KAEMC,EAAchB,EAAQiB,QAAO,SAACpN,GAAD,MAA8B,OAApBA,EAAKnJ,aAAwBwW,YAAcrN,EAAKlE,QACvFwR,EAAgBnB,EAAQiB,QAAO,SAACpN,GAAD,MAA8B,OAApBA,EAAKnJ,aAAwBwW,YAAcrN,EAAKlE,QACzFyR,EAAgBpB,EAAQiB,QAAO,SAACpN,GAAD,OAAUqN,YAAcrN,EAAKlE,QAE5D0R,GAAkBL,EAAYC,QAClC,SAACpN,GAAD,OAAUA,EAAKI,UAAY,IAAInH,IAAU+G,EAAKI,SAASzI,eAAe8I,cAAc,MAGhFgN,GAAsBH,EAAcF,QACxC,SAACpN,GAAD,OAAUA,EAAKI,UAAY,IAAInH,IAAU+G,EAAKI,SAASzI,eAAe8I,cAAc,MAGhFiN,GAAsBH,EAAcH,QACxC,SAACpN,GAAD,OAAUA,EAAKI,UAAY,IAAInH,IAAU+G,EAAKI,SAASzI,eAAe8I,cAAc,MAGhFkN,GAAY3T,uBAChB,SAAC4T,GACC,IAAIC,EAA+CD,EAAejc,KAAI,SAACqO,GACrE,IAAKA,EAAK8N,sBAAwB9N,EAAK+N,oBACrC,OAAO/N,EAET,IAAMgO,EAAiB,IAAI/U,IAAU+G,EAAK8N,qBAAqB1U,MAAM4G,EAAK+N,qBAC1E,EAAyCvL,EACrCyL,YAAW,IAAIhV,IAAU+G,EAAKkO,YAAalO,EAAKmO,aAAcjW,EAAW8V,EAAgBhO,EAAKG,YAAYiO,SAASC,KAAgC,MACnJ,CAAEvC,eAAgB,EAAGC,aAAc,GAF/BD,EAAR,EAAQA,eAAgBC,EAAxB,EAAwBA,aAIxB,OAAO,2BAAK/L,GAAZ,IAAkB/H,IAAK6T,EAAgBC,eAAcjK,UAAWkM,OAGlE,GAAI3B,EAAO,CACT,IAAMiC,EAAiBC,YAASlC,EAAM5H,eACtCoJ,EAAwBA,EAAsBT,QAAO,SAACpN,GACpD,OAAOuO,YAASvO,EAAKc,SAAS2D,eAAenG,SAASgQ,MAG1D,OAAOT,IAET,CAAC3V,EAAWmU,EAAO7J,IAOrB,GAAwDrK,mBAlF1B,IAkF9B,qBAAOqW,GAAP,MAA6BC,GAA7B,MAEMC,GAAsB5V,mBAAQ,WAClC,IAAI6V,EAAc,GAmClB,OAVInM,IACFmM,EAA2BhB,GAAbV,EAAuBO,GAA6BL,IAEhEL,IACF6B,EAA2BhB,GAAbV,EAAuBQ,GAAiCH,IAEpET,IACF8B,EAA2BhB,GAAbV,EAAuBS,GAAiCH,IA9BtD,SAACqB,GACjB,OAAQpC,GACN,IAAK,MACH,OAAOqC,kBAAQD,GAAO,SAAC5O,GAAD,OAA+BA,EAAK/H,IAAM+H,EAAK+L,eAAc,QACrF,IAAK,aACH,OAAO8C,kBACLD,GACA,SAAC5O,GAAD,OAAgCA,EAAKnJ,WAAayO,OAAOtF,EAAKnJ,WAAWiY,MAAM,GAAI,IAAM,IACzF,QAEJ,IAAK,SACH,OAAOD,kBACLD,GACA,SAAC5O,GAAD,OAAgCA,EAAKI,SAAWkF,OAAOtF,EAAKI,SAASxB,UAAY,IACjF,QAEJ,IAAK,YACH,OAAOiQ,kBAAQD,GAAO,SAAC5O,GAAD,OAA+BsF,OAAOtF,EAAK8B,aAAY,QAC/E,QACE,OAAO8M,GAcNG,CAAUJ,GAAaG,MAAM,EAAGN,MACtC,CACDhC,EACAW,EACAQ,GACAL,EACAC,EACA/K,EACAsK,EACAD,EACAa,GACAD,GACAR,EACAO,GACAgB,KAGF5B,EAAkBvC,QAAUqE,GAAoBhd,OAEhD2W,qBAAU,WACJsE,GACF8B,IAAwB,SAACO,GACvB,OAAIA,GAAyBpC,EAAkBvC,QACtC2E,EA/Ie,GAiJjBA,OAGV,CAACrC,IAEJ,IAAMsC,GAAUP,GAAoB/c,KAAI,SAACqO,GACvC,IAAQjJ,EAAsBiJ,EAAtBjJ,MAAOC,EAAegJ,EAAfhJ,WACTzB,EAAewB,EAAMpB,QACrBL,EAAoB0B,EAAWrB,QAC/BW,EAAU0J,EAAKc,UAAYd,EAAKc,SAASxJ,MAAM,KAAK,GAAG4K,cAAc7H,QAAQ,UAAW,IAiC9F,MA/BsB,CACpBpC,IAAK,CACHhF,MAAO2Y,GAAc5L,EAAK/H,IAAK+H,EAAK+L,cACpCjQ,IAAKkE,EAAKlE,IACVjF,WAAYmJ,EAAKnJ,WACjBP,UACAwK,SAAUd,EAAKc,SACfvL,eACAD,oBACA4C,YACA+K,cAAejD,EAAK/H,KAEtB+H,KAAM,CACJqD,MAAO/M,EACPwF,IAAKkE,EAAKlE,IACV/E,MAAOiJ,EAAKjJ,MACZC,WAAYgJ,EAAKhJ,YAEnByM,OAAQ,CACN7E,SAAUZ,YAAiB,IAAI/E,IAAU+G,EAAKI,SAASxB,WACvD9C,IAAKkE,EAAKlE,KAEZgG,UAAW,CACTA,UAAW9B,EAAK8B,WAElBjL,WAAY,CACVA,WAAYmJ,EAAKnJ,YAEnB8P,QAAS3G,MAkFb,OACE,mCAiBE,eAACkP,EAAA,EAAD,WACE,cAACzD,GAAD,UACE,eAACE,GAAD,WACE,cAAC,GAAD,CAAYT,SAAUA,EAAUC,SAAU,SAACE,GAAD,OAAoBkB,EAAYlB,MAC1E,eAACK,GAAD,WACE,cAAC,KAAD,CACExE,GAAG,oBACHiI,QAASlC,EACTla,SAAU,kBAAMma,GAAeD,IAC/BzY,MAAM,OAER,eAAC,KAAD,eAAQnB,EAAE,qBAEZ,cAAC,GAAD,CAAgBqX,wBAAyB+C,GAAoB/b,OAAS,SA3G1D,WACpB,GAAIwZ,IAAaI,IAASC,MAAQ0D,GAAQvd,OAAQ,CAChD,IAEMqY,EAFe1C,GAEQ1V,KAAI,SAAC+W,GAAD,MAAa,CAC5CxB,GAAIwB,EAAOxB,GACXC,KAAMuB,EAAOvB,KACb9D,MAAOqF,EAAOrF,MACd+L,KAAM,SAAC7T,EAAsB8T,GAC3B,OAAQ3G,EAAOvB,MACb,IAAK,OACH,OAAOkI,EAAEnI,GAAK3L,EAAE2L,GAClB,IAAK,MACH,OAAI3L,EAAE6O,SAASnS,IAAIhF,OAASoc,EAAEjF,SAASnS,IAAIhF,MAClCqS,OAAO/J,EAAE6O,SAASnS,IAAIhF,OAASqS,OAAO+J,EAAEjF,SAASnS,IAAIhF,OAGvD,EACT,IAAK,SACH,OAAOsI,EAAE6O,SAAS3G,OAAO7E,SAAWyQ,EAAEjF,SAAS3G,OAAO7E,SACxD,QACE,OAAO,IAGbwI,SAAUsB,EAAOtB,aAGnB,OAAO,cAAC,GAAD,CAAO0C,KAAMmF,GAASlF,QAASA,EAASnG,cAAeA,IAGhE,OACE,eAACnN,EAAA,EAAD,WACE,cAAC,IAAD,CAAO6Y,OAAK,EAACrD,KAAI,UAAKA,GAAtB,SACGyC,GAAoB/c,KAAI,SAACqO,GAAD,OACvB,cAAC,GAAD,CAEEA,KAAMA,EACNjI,WAAY6T,GAAc5L,EAAK/H,IAAK+H,EAAK+L,cACzC7T,UAAWA,EACXgF,QAASA,EACT9G,SAAS,GALJ4J,EAAKlE,UAShB,cAAC,IAAD,CAAOwT,OAAK,EAACrD,KAAI,UAAKA,EAAL,YAAjB,SACGyC,GAAoB/c,KAAI,SAACqO,GAAD,OACvB,cAAC,GAAD,CAEEA,KAAMA,EACNjI,WAAY6T,GAAc5L,EAAK/H,IAAK+H,EAAK+L,cACzC7T,UAAWA,EACXgF,QAASA,EACT9G,SAAO,GALF4J,EAAKlE,UAShB,cAAC,IAAD,CAAOwT,OAAK,EAACrD,KAAI,UAAKA,EAAL,aAAjB,SACGyC,GAAoB/c,KAAI,SAACqO,GAAD,OACvB,cAAC,GAAD,CAEEA,KAAMA,EACNjI,WAAY6T,GAAc5L,EAAK/H,IAAK+H,EAAK+L,cACzC7T,UAAWA,EACXgF,QAASA,EACT9G,SAAO,GALF4J,EAAKlE,aAqFfyT,GACArS,IAAYkP,GAAkBa,GAC7B,cAAC,KAAD,CAAMvZ,eAAe,SAArB,SACE,cAAC8b,EAAA,EAAD,MAGJ,qBAAKtK,IAAKwH","file":"static/js/35.85d2a001.chunk.js","sourcesContent":["import React, { useContext } from 'react'\nimport styled, { ThemeContext } from 'styled-components'\n\ninterface SpacerProps {\n  size?: 'sm' | 'md' | 'lg'\n}\n\nconst Spacer: React.FC<SpacerProps> = ({ size = 'md' }) => {\n  const { spacing } = useContext(ThemeContext)\n\n  let s: number\n  switch (size) {\n    case 'lg':\n      s = spacing[6]\n      break\n    case 'sm':\n      s = spacing[2]\n      break\n    case 'md':\n    default:\n      s = spacing[4]\n  }\n\n  return <StyledSpacer size={s} />\n}\n\ninterface StyledSpacerProps {\n  size: number\n}\n\nconst StyledSpacer = styled.div<StyledSpacerProps>`\n  height: ${(props) => props.size}px;\n  width: ${(props) => props.size}px;\n`\n\nexport default Spacer\n","import React from 'react'\nimport styled from 'styled-components'\nimport Spacer from './Spacer'\n\nconst ModalActions: React.FC = ({ children }) => {\n  const l = React.Children.toArray(children).length\n  return (\n    <StyledModalActions>\n      {React.Children.map(children, (child, i) => (\n        <>\n          <StyledModalAction>{child}</StyledModalAction>\n          {i < l - 1 && <Spacer />}\n        </>\n      ))}\n    </StyledModalActions>\n  )\n}\n\nconst StyledModalActions = styled.div`\n  align-items: center;\n  background-color: ${(props) => props.theme.colors.primaryDark}00;\n  display: flex;\n  margin: 0;\n  padding: ${(props) => props.theme.spacing[4]}px 0;\n`\n\nconst StyledModalAction = styled.div`\n  flex: 1;\n`\n\nexport default ModalActions\n","import React from 'react'\nimport styled from 'styled-components'\nimport { Text, Button, Input, InputProps, Flex, Link } from '@pancakeswap/uikit'\nimport { useTranslation } from 'contexts/Localization'\nimport { parseUnits } from 'ethers/lib/utils'\nimport { formatBigNumber } from 'utils/formatBalance'\n\ninterface ModalInputProps {\n  max: string\n  symbol: string\n  onSelectMax?: () => void\n  onChange: (e: React.FormEvent<HTMLInputElement>) => void\n  placeholder?: string\n  value: string\n  addLiquidityUrl?: string\n  inputTitle?: string\n  decimals?: number\n}\n\nconst getBoxShadow = ({ isWarning = false, theme }) => {\n  if (isWarning) {\n    return theme.shadows.warning\n  }\n\n  return theme.shadows.inset\n}\n\nconst StyledTokenInput = styled.div<InputProps>`\n  display: flex;\n  flex-direction: column;\n  background-color: ${({ theme }) => theme.colors.input};\n  border-radius: 16px;\n  box-shadow: ${getBoxShadow};\n  color: ${({ theme }) => theme.colors.text};\n  padding: 8px 16px 8px 0;\n  width: 100%;\n`\n\nconst StyledInput = styled(Input)`\n  box-shadow: none;\n  width: 60px;\n  margin: 0 8px;\n  padding: 0 8px;\n  border: none;\n\n  ${({ theme }) => theme.mediaQueries.xs} {\n    width: 80px;\n  }\n\n  ${({ theme }) => theme.mediaQueries.sm} {\n    width: auto;\n  }\n`\n\nconst StyledErrorMessage = styled(Text)`\n  position: absolute;\n  bottom: -22px;\n  a {\n    display: inline;\n  }\n`\n\nconst ModalInput: React.FC<ModalInputProps> = ({\n  max,\n  symbol,\n  onChange,\n  onSelectMax,\n  value,\n  addLiquidityUrl,\n  inputTitle,\n  decimals = 18,\n}) => {\n  const { t } = useTranslation()\n  const isBalanceZero = max === '0' || !max\n\n  const displayBalance = (balance: string) => {\n    if (isBalanceZero) {\n      return '0'\n    }\n\n    const balanceUnits = parseUnits(balance, decimals)\n    return formatBigNumber(balanceUnits, decimals, decimals)\n  }\n\n  return (\n    <div style={{ position: 'relative' }}>\n      <StyledTokenInput isWarning={isBalanceZero}>\n        <Flex justifyContent=\"space-between\" pl=\"16px\">\n          <Text fontSize=\"14px\">{inputTitle}</Text>\n          <Text fontSize=\"14px\">{t('Balance: %balance%', { balance: displayBalance(max) })}</Text>\n        </Flex>\n        <Flex alignItems=\"flex-end\" justifyContent=\"space-around\">\n          <StyledInput\n            pattern={`^[0-9]*[.,]?[0-9]{0,${decimals}}$`}\n            inputMode=\"decimal\"\n            step=\"any\"\n            min=\"0\"\n            onChange={onChange}\n            placeholder=\"0\"\n            value={value}\n          />\n          <Button scale=\"sm\" onClick={onSelectMax} mr=\"8px\">\n            {t('Max')}\n          </Button>\n          <Text fontSize=\"16px\">{symbol}</Text>\n        </Flex>\n      </StyledTokenInput>\n      {isBalanceZero && (\n        <StyledErrorMessage fontSize=\"14px\" color=\"failure\">\n          {t('No tokens to stake')}:{' '}\n          <Link fontSize=\"14px\" bold={false} href={addLiquidityUrl} external color=\"failure\">\n            {t('Get %symbol%', { symbol })}\n          </Link>\n        </StyledErrorMessage>\n      )}\n    </div>\n  )\n}\n\nexport default ModalInput\n","import React from 'react'\nimport styled from 'styled-components'\nimport { ChevronDownIcon, ChevronUpIcon, Text } from '@pancakeswap/uikit'\nimport { useTranslation } from 'contexts/Localization'\n\nexport interface ExpandableSectionButtonProps {\n  onClick?: () => void\n  expanded?: boolean\n}\n\nconst Wrapper = styled.div`\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  cursor: pointer;\n\n  svg {\n    fill: ${({ theme }) => theme.colors.primary};\n  }\n`\n\nconst ExpandableSectionButton: React.FC<ExpandableSectionButtonProps> = ({ onClick, expanded }) => {\n  const { t } = useTranslation()\n\n  return (\n    <Wrapper aria-label={t('Hide or show expandable content')} role=\"button\" onClick={() => onClick()}>\n      <Text color=\"primary\" bold>\n        {expanded ? t('Hide') : t('Details')}\n      </Text>\n      {expanded ? <ChevronUpIcon /> : <ChevronDownIcon />}\n    </Wrapper>\n  )\n}\n\nExpandableSectionButton.defaultProps = {\n  expanded: false,\n}\n\nexport default ExpandableSectionButton\n","// Constructing the two forward-slash-separated parts of the 'Add Liquidity' URL\n// Each part of the url represents a different side of the LP pair.\nimport tokens from 'config/constants/tokens'\nimport { ETHER } from '@pancakeswap/sdk'\n\nconst getLiquidityUrlPathParts = ({\n  quoteTokenAddress,\n  tokenAddress,\n}: {\n  quoteTokenAddress: string\n  tokenAddress: string\n}): string => {\n  const wBnbAddress = tokens.wbnb.address\n  const firstPart = !quoteTokenAddress || quoteTokenAddress === wBnbAddress ? ETHER.symbol : quoteTokenAddress\n  const secondPart = !tokenAddress || tokenAddress === wBnbAddress ? ETHER.symbol : tokenAddress\n  return `${firstPart}/${secondPart}`\n}\n\nexport default getLiquidityUrlPathParts\n","import React from 'react'\nimport { useTranslation } from 'contexts/Localization'\nimport styled from 'styled-components'\nimport { Text, Flex, LinkExternal, Skeleton } from '@pancakeswap/uikit'\n\nexport interface ExpandableSectionProps {\n  bscScanAddress?: string\n  infoAddress?: string\n  removed?: boolean\n  totalValueFormatted?: string\n  lpLabel?: string\n  addLiquidityUrl?: string\n}\n\nconst Wrapper = styled.div`\n  margin-top: 24px;\n`\n\nconst StyledLinkExternal = styled(LinkExternal)`\n  font-weight: 400;\n`\n\nconst DetailsSection: React.FC<ExpandableSectionProps> = ({\n  bscScanAddress,\n  infoAddress,\n  removed,\n  totalValueFormatted,\n  lpLabel,\n  addLiquidityUrl,\n}) => {\n  const { t } = useTranslation()\n\n  return (\n    <Wrapper>\n      <Flex justifyContent=\"space-between\">\n        <Text>{t('Total Liquidity')}:</Text>\n        {totalValueFormatted ? <Text>{totalValueFormatted}</Text> : <Skeleton width={75} height={25} />}\n      </Flex>\n      {!removed && (\n        <StyledLinkExternal href={addLiquidityUrl}>{t('Get %symbol%', { symbol: lpLabel })}</StyledLinkExternal>\n      )}\n      <StyledLinkExternal href={bscScanAddress}>{t('View Contract')}</StyledLinkExternal>\n      <StyledLinkExternal href={infoAddress}>{t('See Pair Info')}</StyledLinkExternal>\n    </Wrapper>\n  )\n}\n\nexport default DetailsSection\n","import React from 'react'\nimport styled from 'styled-components'\nimport { Tag, Flex, Heading, Skeleton } from '@pancakeswap/uikit'\nimport { Token } from '@pancakeswap/sdk'\nimport { CommunityTag, CoreTag } from 'components/Tags'\nimport { TokenPairImage } from 'components/TokenImage'\n\nexport interface ExpandableSectionProps {\n  lpLabel?: string\n  multiplier?: string\n  isCommunityFarm?: boolean\n  token: Token\n  quoteToken: Token\n}\n\nconst Wrapper = styled(Flex)`\n  svg {\n    margin-right: 4px;\n  }\n`\n\nconst MultiplierTag = styled(Tag)`\n  margin-left: 4px;\n`\n\nconst CardHeading: React.FC<ExpandableSectionProps> = ({ lpLabel, multiplier, isCommunityFarm, token, quoteToken }) => {\n  return (\n    <Wrapper justifyContent=\"space-between\" alignItems=\"center\" mb=\"12px\">\n      <TokenPairImage variant=\"inverted\" primaryToken={token} secondaryToken={quoteToken} width={64} height={64} />\n      <Flex flexDirection=\"column\" alignItems=\"flex-end\">\n        <Heading mb=\"4px\">{lpLabel.split(' ')[0]}</Heading>\n        <Flex justifyContent=\"center\">\n          {isCommunityFarm ? <CommunityTag /> : <CoreTag />}\n          {multiplier ? (\n            <MultiplierTag variant=\"secondary\">{multiplier}</MultiplierTag>\n          ) : (\n            <Skeleton ml=\"4px\" width={42} height={28} />\n          )}\n        </Flex>\n      </Flex>\n    </Wrapper>\n  )\n}\n\nexport default CardHeading\n","import BigNumber from 'bignumber.js'\nimport React, { useCallback, useMemo, useState } from 'react'\nimport styled from 'styled-components'\nimport { Flex, Text, Button, Modal, LinkExternal, CalculateIcon, IconButton } from '@pancakeswap/uikit'\nimport { ModalActions, ModalInput } from 'components/Modal'\nimport RoiCalculatorModal from 'components/RoiCalculatorModal'\nimport { useTranslation } from 'contexts/Localization'\nimport { getFullDisplayBalance, formatNumber } from 'utils/formatBalance'\nimport useToast from 'hooks/useToast'\nimport { getInterestBreakdown } from 'utils/compoundApyHelpers'\n\nconst AnnualRoiContainer = styled(Flex)`\n  cursor: pointer;\n`\n\nconst AnnualRoiDisplay = styled(Text)`\n  width: 72px;\n  max-width: 72px;\n  overflow: hidden;\n  text-align: right;\n  text-overflow: ellipsis;\n`\n\ninterface DepositModalProps {\n  max: BigNumber\n  stakedBalance: BigNumber\n  multiplier?: string\n  lpPrice: BigNumber\n  lpLabel?: string\n  onConfirm: (amount: string) => void\n  onDismiss?: () => void\n  tokenName?: string\n  apr?: number\n  displayApr?: string\n  addLiquidityUrl?: string\n  cakePrice?: BigNumber\n}\n\nconst DepositModal: React.FC<DepositModalProps> = ({\n  max,\n  stakedBalance,\n  onConfirm,\n  onDismiss,\n  tokenName = '',\n  multiplier,\n  displayApr,\n  lpPrice,\n  lpLabel,\n  apr,\n  addLiquidityUrl,\n  cakePrice,\n}) => {\n  const [val, setVal] = useState('')\n  const { toastSuccess, toastError } = useToast()\n  const [pendingTx, setPendingTx] = useState(false)\n  const [showRoiCalculator, setShowRoiCalculator] = useState(false)\n  const { t } = useTranslation()\n  const fullBalance = useMemo(() => {\n    return getFullDisplayBalance(max)\n  }, [max])\n\n  const lpTokensToStake = new BigNumber(val)\n  const fullBalanceNumber = new BigNumber(fullBalance)\n\n  const usdToStake = lpTokensToStake.times(lpPrice)\n\n  const interestBreakdown = getInterestBreakdown({\n    principalInUSD: !lpTokensToStake.isNaN() ? usdToStake.toNumber() : 0,\n    apr,\n    earningTokenPrice: cakePrice.toNumber(),\n  })\n\n  const annualRoi = cakePrice.times(interestBreakdown[3])\n  const formattedAnnualRoi = formatNumber(\n    annualRoi.toNumber(),\n    annualRoi.gt(10000) ? 0 : 2,\n    annualRoi.gt(10000) ? 0 : 2,\n  )\n\n  const handleChange = useCallback(\n    (e: React.FormEvent<HTMLInputElement>) => {\n      if (e.currentTarget.validity.valid) {\n        setVal(e.currentTarget.value.replace(/,/g, '.'))\n      }\n    },\n    [setVal],\n  )\n\n  const handleSelectMax = useCallback(() => {\n    setVal(fullBalance)\n  }, [fullBalance, setVal])\n\n  if (showRoiCalculator) {\n    return (\n      <RoiCalculatorModal\n        linkLabel={t('Get %symbol%', { symbol: lpLabel })}\n        stakingTokenBalance={stakedBalance.plus(max)}\n        stakingTokenSymbol={tokenName}\n        stakingTokenPrice={lpPrice.toNumber()}\n        earningTokenPrice={cakePrice.toNumber()}\n        apr={apr}\n        multiplier={multiplier}\n        displayApr={displayApr}\n        linkHref={addLiquidityUrl}\n        isFarm\n        initialValue={val}\n        onBack={() => setShowRoiCalculator(false)}\n      />\n    )\n  }\n\n  return (\n    <Modal title={t('Stake LP tokens')} onDismiss={onDismiss}>\n      <ModalInput\n        value={val}\n        onSelectMax={handleSelectMax}\n        onChange={handleChange}\n        max={fullBalance}\n        symbol={tokenName}\n        addLiquidityUrl={addLiquidityUrl}\n        inputTitle={t('Stake')}\n      />\n      <Flex mt=\"24px\" alignItems=\"center\" justifyContent=\"space-between\">\n        <Text mr=\"8px\" color=\"textSubtle\">\n          {t('Annual ROI at current rates')}:\n        </Text>\n        <AnnualRoiContainer alignItems=\"center\" onClick={() => setShowRoiCalculator(true)}>\n          <AnnualRoiDisplay>${formattedAnnualRoi}</AnnualRoiDisplay>\n          <IconButton variant=\"text\" scale=\"sm\">\n            <CalculateIcon color=\"textSubtle\" width=\"18px\" />\n          </IconButton>\n        </AnnualRoiContainer>\n      </Flex>\n      <ModalActions>\n        <Button variant=\"secondary\" onClick={onDismiss} width=\"100%\" disabled={pendingTx}>\n          {t('Cancel')}\n        </Button>\n        <Button\n          width=\"100%\"\n          disabled={\n            pendingTx || !lpTokensToStake.isFinite() || lpTokensToStake.eq(0) || lpTokensToStake.gt(fullBalanceNumber)\n          }\n          onClick={async () => {\n            setPendingTx(true)\n            try {\n              await onConfirm(val)\n              toastSuccess(t('Staked!'), t('Your funds have been staked in the farm'))\n              onDismiss()\n            } catch (e) {\n              toastError(\n                t('Error'),\n                t('Please try again. Confirm the transaction and make sure you are paying enough gas!'),\n              )\n              console.error(e)\n            } finally {\n              setPendingTx(false)\n            }\n          }}\n        >\n          {pendingTx ? t('Confirming') : t('Confirm')}\n        </Button>\n      </ModalActions>\n      <LinkExternal href={addLiquidityUrl} style={{ alignSelf: 'center' }}>\n        {t('Get %symbol%', { symbol: tokenName })}\n      </LinkExternal>\n    </Modal>\n  )\n}\n\nexport default DepositModal\n","import BigNumber from 'bignumber.js'\nimport React, { useCallback, useMemo, useState } from 'react'\nimport { Button, Modal } from '@pancakeswap/uikit'\nimport { ModalActions, ModalInput } from 'components/Modal'\nimport { useTranslation } from 'contexts/Localization'\nimport { getFullDisplayBalance } from 'utils/formatBalance'\nimport useToast from 'hooks/useToast'\n\ninterface WithdrawModalProps {\n  max: BigNumber\n  onConfirm: (amount: string) => void\n  onDismiss?: () => void\n  tokenName?: string\n}\n\nconst WithdrawModal: React.FC<WithdrawModalProps> = ({ onConfirm, onDismiss, max, tokenName = '' }) => {\n  const [val, setVal] = useState('')\n  const { toastSuccess, toastError } = useToast()\n  const [pendingTx, setPendingTx] = useState(false)\n  const { t } = useTranslation()\n  const fullBalance = useMemo(() => {\n    return getFullDisplayBalance(max)\n  }, [max])\n\n  const valNumber = new BigNumber(val)\n  const fullBalanceNumber = new BigNumber(fullBalance)\n\n  const handleChange = useCallback(\n    (e: React.FormEvent<HTMLInputElement>) => {\n      if (e.currentTarget.validity.valid) {\n        setVal(e.currentTarget.value.replace(/,/g, '.'))\n      }\n    },\n    [setVal],\n  )\n\n  const handleSelectMax = useCallback(() => {\n    setVal(fullBalance)\n  }, [fullBalance, setVal])\n\n  return (\n    <Modal title={t('Unstake LP tokens')} onDismiss={onDismiss}>\n      <ModalInput\n        onSelectMax={handleSelectMax}\n        onChange={handleChange}\n        value={val}\n        max={fullBalance}\n        symbol={tokenName}\n        inputTitle={t('Unstake')}\n      />\n      <ModalActions>\n        <Button variant=\"secondary\" onClick={onDismiss} width=\"100%\" disabled={pendingTx}>\n          {t('Cancel')}\n        </Button>\n        <Button\n          disabled={pendingTx || !valNumber.isFinite() || valNumber.eq(0) || valNumber.gt(fullBalanceNumber)}\n          onClick={async () => {\n            setPendingTx(true)\n            try {\n              await onConfirm(val)\n              toastSuccess(t('Unstaked!'), t('Your earnings have also been harvested to your wallet'))\n              onDismiss()\n            } catch (e) {\n              toastError(\n                t('Error'),\n                t('Please try again. Confirm the transaction and make sure you are paying enough gas!'),\n              )\n              console.error(e)\n            } finally {\n              setPendingTx(false)\n            }\n          }}\n          width=\"100%\"\n        >\n          {pendingTx ? t('Confirming') : t('Confirm')}\n        </Button>\n      </ModalActions>\n    </Modal>\n  )\n}\n\nexport default WithdrawModal\n","import { useCallback } from 'react'\nimport { unstakeFarm } from 'utils/calls'\nimport { useMasterchef } from 'hooks/useContract'\n\nconst useUnstakeFarms = (pid: number) => {\n  const masterChefContract = useMasterchef()\n\n  const handleUnstake = useCallback(\n    async (amount: string) => {\n      await unstakeFarm(masterChefContract, pid, amount)\n    },\n    [masterChefContract, pid],\n  )\n\n  return { onUnstake: handleUnstake }\n}\n\nexport default useUnstakeFarms\n","import { useCallback } from 'react'\nimport { stakeFarm } from 'utils/calls'\nimport { useMasterchef } from 'hooks/useContract'\n\nconst useStakeFarms = (pid: number) => {\n  const masterChefContract = useMasterchef()\n\n  const handleStake = useCallback(\n    async (amount: string) => {\n      const txHash = await stakeFarm(masterChefContract, pid, amount)\n      console.info(txHash)\n    },\n    [masterChefContract, pid],\n  )\n\n  return { onStake: handleStake }\n}\n\nexport default useStakeFarms\n","import React, { useCallback } from 'react'\nimport { useWeb3React } from '@web3-react/core'\nimport styled from 'styled-components'\nimport BigNumber from 'bignumber.js'\nimport { Button, Flex, Heading, IconButton, AddIcon, MinusIcon, useModal } from '@pancakeswap/uikit'\nimport { useLocation } from 'react-router-dom'\nimport Balance from 'components/Balance'\nimport { useTranslation } from 'contexts/Localization'\nimport { useAppDispatch } from 'state'\nimport { fetchFarmUserDataAsync } from 'state/farms'\nimport { useLpTokenPrice } from 'state/farms/hooks'\nimport { getBalanceAmount, getBalanceNumber } from 'utils/formatBalance'\nimport DepositModal from '../DepositModal'\nimport WithdrawModal from '../WithdrawModal'\nimport useUnstakeFarms from '../../hooks/useUnstakeFarms'\nimport useStakeFarms from '../../hooks/useStakeFarms'\n\ninterface FarmCardActionsProps {\n  stakedBalance?: BigNumber\n  tokenBalance?: BigNumber\n  tokenName?: string\n  pid?: number\n  multiplier?: string\n  apr?: number\n  displayApr?: string\n  addLiquidityUrl?: string\n  cakePrice?: BigNumber\n  lpLabel?: string\n}\n\nconst IconButtonWrapper = styled.div`\n  display: flex;\n  svg {\n    width: 20px;\n  }\n`\n\nconst StakeAction: React.FC<FarmCardActionsProps> = ({\n  stakedBalance,\n  tokenBalance,\n  tokenName,\n  pid,\n  multiplier,\n  apr,\n  displayApr,\n  addLiquidityUrl,\n  cakePrice,\n  lpLabel,\n}) => {\n  const { t } = useTranslation()\n  const { onStake } = useStakeFarms(pid)\n  const { onUnstake } = useUnstakeFarms(pid)\n  const location = useLocation()\n  const dispatch = useAppDispatch()\n  const { account } = useWeb3React()\n  const lpPrice = useLpTokenPrice(tokenName)\n\n  const handleStake = async (amount: string) => {\n    await onStake(amount)\n    dispatch(fetchFarmUserDataAsync({ account, pids: [pid] }))\n  }\n\n  const handleUnstake = async (amount: string) => {\n    await onUnstake(amount)\n    dispatch(fetchFarmUserDataAsync({ account, pids: [pid] }))\n  }\n\n  const displayBalance = useCallback(() => {\n    const stakedBalanceBigNumber = getBalanceAmount(stakedBalance)\n    if (stakedBalanceBigNumber.gt(0) && stakedBalanceBigNumber.lt(0.0000001)) {\n      return '<0.0000001'\n    }\n    if (stakedBalanceBigNumber.gt(0)) {\n      return stakedBalanceBigNumber.toFixed(8, BigNumber.ROUND_DOWN)\n    }\n    return stakedBalanceBigNumber.toFixed(3, BigNumber.ROUND_DOWN)\n  }, [stakedBalance])\n\n  const [onPresentDeposit] = useModal(\n    <DepositModal\n      max={tokenBalance}\n      stakedBalance={stakedBalance}\n      onConfirm={handleStake}\n      tokenName={tokenName}\n      multiplier={multiplier}\n      lpPrice={lpPrice}\n      lpLabel={lpLabel}\n      apr={apr}\n      displayApr={displayApr}\n      addLiquidityUrl={addLiquidityUrl}\n      cakePrice={cakePrice}\n    />,\n  )\n  const [onPresentWithdraw] = useModal(\n    <WithdrawModal max={stakedBalance} onConfirm={handleUnstake} tokenName={tokenName} />,\n  )\n\n  const renderStakingButtons = () => {\n    return stakedBalance.eq(0) ? (\n      <Button\n        onClick={onPresentDeposit}\n        disabled={['history', 'archived'].some((item) => location.pathname.includes(item))}\n      >\n        {t('Stake LP')}\n      </Button>\n    ) : (\n      <IconButtonWrapper>\n        <IconButton variant=\"tertiary\" onClick={onPresentWithdraw} mr=\"6px\">\n          <MinusIcon color=\"primary\" width=\"14px\" />\n        </IconButton>\n        <IconButton\n          variant=\"tertiary\"\n          onClick={onPresentDeposit}\n          disabled={['history', 'archived'].some((item) => location.pathname.includes(item))}\n        >\n          <AddIcon color=\"primary\" width=\"14px\" />\n        </IconButton>\n      </IconButtonWrapper>\n    )\n  }\n\n  return (\n    <Flex justifyContent=\"space-between\" alignItems=\"center\">\n      <Flex flexDirection=\"column\" alignItems=\"flex-start\">\n        <Heading color={stakedBalance.eq(0) ? 'textDisabled' : 'text'}>{displayBalance()}</Heading>\n        {stakedBalance.gt(0) && lpPrice.gt(0) && (\n          <Balance\n            fontSize=\"12px\"\n            color=\"textSubtle\"\n            decimals={2}\n            value={getBalanceNumber(lpPrice.times(stakedBalance))}\n            unit=\" USD\"\n            prefix=\"~\"\n          />\n        )}\n      </Flex>\n      {renderStakingButtons()}\n    </Flex>\n  )\n}\n\nexport default StakeAction\n","import { useCallback } from 'react'\nimport { harvestFarm } from 'utils/calls'\nimport { useMasterchef } from 'hooks/useContract'\n\nconst useHarvestFarm = (farmPid: number) => {\n  const masterChefContract = useMasterchef()\n\n  const handleHarvest = useCallback(async () => {\n    await harvestFarm(masterChefContract, farmPid)\n  }, [farmPid, masterChefContract])\n\n  return { onReward: handleHarvest }\n}\n\nexport default useHarvestFarm\n","import React, { useState } from 'react'\nimport BigNumber from 'bignumber.js'\nimport { Button, Flex, Heading } from '@pancakeswap/uikit'\nimport { useTranslation } from 'contexts/Localization'\nimport { useAppDispatch } from 'state'\nimport { fetchFarmUserDataAsync } from 'state/farms'\nimport useToast from 'hooks/useToast'\nimport { getBalanceAmount } from 'utils/formatBalance'\nimport { BIG_ZERO } from 'utils/bigNumber'\nimport { useWeb3React } from '@web3-react/core'\nimport { usePriceCakeBusd } from 'state/farms/hooks'\nimport Balance from 'components/Balance'\nimport useHarvestFarm from '../../hooks/useHarvestFarm'\n\ninterface FarmCardActionsProps {\n  earnings?: BigNumber\n  pid?: number\n}\n\nconst HarvestAction: React.FC<FarmCardActionsProps> = ({ earnings, pid }) => {\n  const { account } = useWeb3React()\n  const { toastSuccess, toastError } = useToast()\n  const { t } = useTranslation()\n  const [pendingTx, setPendingTx] = useState(false)\n  const { onReward } = useHarvestFarm(pid)\n  const cakePrice = usePriceCakeBusd()\n  const dispatch = useAppDispatch()\n  const rawEarningsBalance = account ? getBalanceAmount(earnings, 0) : BIG_ZERO\n  const displayBalance = rawEarningsBalance.toFixed(3, BigNumber.ROUND_DOWN)\n  const earningsBusd = rawEarningsBalance ? rawEarningsBalance.multipliedBy(cakePrice).toNumber() : 0\n\n  return (\n    <Flex mb=\"8px\" justifyContent=\"space-between\" alignItems=\"center\">\n      <Flex flexDirection=\"column\" alignItems=\"flex-start\">\n        <Heading color={rawEarningsBalance.eq(0) ? 'textDisabled' : 'text'}>{displayBalance}</Heading>\n        {earningsBusd > 0 && (\n          <Balance fontSize=\"12px\" color=\"textSubtle\" decimals={2} value={earningsBusd} unit=\" USD\" prefix=\"~\" />\n        )}\n      </Flex>\n      <Button\n        disabled={rawEarningsBalance.eq(0) || pendingTx}\n        onClick={async () => {\n          setPendingTx(true)\n          try {\n            await onReward()\n            toastSuccess(\n              `${t('Harvested')}!`,\n              t('Your %symbol% earnings have been sent to your wallet!', { symbol: 'CAKE' }),\n            )\n          } catch (e) {\n            toastError(\n              t('Error'),\n              t('Please try again. Confirm the transaction and make sure you are paying enough gas!'),\n            )\n            console.error(e)\n          } finally {\n            setPendingTx(false)\n          }\n          dispatch(fetchFarmUserDataAsync({ account, pids: [pid] }))\n        }}\n      >\n        {pendingTx ? t('Harvesting') : t('Harvest')}\n      </Button>\n    </Flex>\n  )\n}\n\nexport default HarvestAction\n","import { useCallback } from 'react'\nimport { ethers, Contract } from 'ethers'\nimport { useMasterchef } from 'hooks/useContract'\nimport { useCallWithGasPrice } from 'hooks/useCallWithGasPrice'\n\nconst useApproveFarm = (lpContract: Contract) => {\n  const masterChefContract = useMasterchef()\n  const { callWithGasPrice } = useCallWithGasPrice()\n  const handleApprove = useCallback(async () => {\n    const tx = await callWithGasPrice(lpContract, 'approve', [masterChefContract.address, ethers.constants.MaxUint256])\n    const receipt = await tx.wait()\n    return receipt.status\n  }, [lpContract, masterChefContract, callWithGasPrice])\n\n  return { onApprove: handleApprove }\n}\n\nexport default useApproveFarm\n","import React, { useState, useCallback } from 'react'\nimport styled from 'styled-components'\nimport BigNumber from 'bignumber.js'\nimport { Button, Flex, Text } from '@pancakeswap/uikit'\nimport { getAddress } from 'utils/addressHelpers'\nimport { useAppDispatch } from 'state'\nimport { fetchFarmUserDataAsync } from 'state/farms'\nimport { DeserializedFarm } from 'state/types'\nimport { useTranslation } from 'contexts/Localization'\nimport useToast from 'hooks/useToast'\nimport { useERC20 } from 'hooks/useContract'\nimport ConnectWalletButton from 'components/ConnectWalletButton'\nimport StakeAction from './StakeAction'\nimport HarvestAction from './HarvestAction'\nimport useApproveFarm from '../../hooks/useApproveFarm'\n\nconst Action = styled.div`\n  padding-top: 16px;\n`\nexport interface FarmWithStakedValue extends DeserializedFarm {\n  apr?: number\n}\n\ninterface FarmCardActionsProps {\n  farm: FarmWithStakedValue\n  account?: string\n  addLiquidityUrl?: string\n  cakePrice?: BigNumber\n  lpLabel?: string\n}\n\nconst CardActions: React.FC<FarmCardActionsProps> = ({ farm, account, addLiquidityUrl, cakePrice, lpLabel }) => {\n  const { t } = useTranslation()\n  const { toastError } = useToast()\n  const [requestedApproval, setRequestedApproval] = useState(false)\n  const { pid, lpAddresses } = farm\n  const { allowance, tokenBalance, stakedBalance, earnings } = farm.userData || {}\n  const lpAddress = getAddress(lpAddresses)\n  const isApproved = account && allowance && allowance.isGreaterThan(0)\n  const dispatch = useAppDispatch()\n\n  const lpContract = useERC20(lpAddress)\n\n  const { onApprove } = useApproveFarm(lpContract)\n\n  const handleApprove = useCallback(async () => {\n    try {\n      setRequestedApproval(true)\n      await onApprove()\n      dispatch(fetchFarmUserDataAsync({ account, pids: [pid] }))\n    } catch (e) {\n      toastError(t('Error'), t('Please try again. Confirm the transaction and make sure you are paying enough gas!'))\n      console.error(e)\n    } finally {\n      setRequestedApproval(false)\n    }\n  }, [onApprove, dispatch, account, pid, t, toastError])\n\n  const renderApprovalOrStakeButton = () => {\n    return isApproved ? (\n      <StakeAction\n        stakedBalance={stakedBalance}\n        tokenBalance={tokenBalance}\n        tokenName={farm.lpSymbol}\n        pid={pid}\n        apr={farm.apr}\n        lpLabel={lpLabel}\n        cakePrice={cakePrice}\n        addLiquidityUrl={addLiquidityUrl}\n      />\n    ) : (\n      <Button mt=\"8px\" width=\"100%\" disabled={requestedApproval} onClick={handleApprove}>\n        {t('Enable Contract')}\n      </Button>\n    )\n  }\n\n  return (\n    <Action>\n      <Flex>\n        <Text bold textTransform=\"uppercase\" color=\"secondary\" fontSize=\"12px\" pr=\"4px\">\n          CROW\n        </Text>\n        <Text bold textTransform=\"uppercase\" color=\"textSubtle\" fontSize=\"12px\">\n          {t('Earned')}\n        </Text>\n      </Flex>\n      <HarvestAction earnings={earnings} pid={pid} />\n      <Flex>\n        <Text bold textTransform=\"uppercase\" color=\"secondary\" fontSize=\"12px\" pr=\"4px\">\n          {farm.lpSymbol}\n        </Text>\n        <Text bold textTransform=\"uppercase\" color=\"textSubtle\" fontSize=\"12px\">\n          {t('Staked')}\n        </Text>\n      </Flex>\n      {!account ? <ConnectWalletButton mt=\"8px\" width=\"100%\" /> : renderApprovalOrStakeButton()}\n    </Action>\n  )\n}\n\nexport default CardActions\n","import React from 'react'\nimport styled from 'styled-components'\nimport BigNumber from 'bignumber.js'\nimport { Flex, IconButton, useModal, CalculateIcon } from '@pancakeswap/uikit'\nimport RoiCalculatorModal from 'components/RoiCalculatorModal'\nimport { useTranslation } from 'contexts/Localization'\nimport { useFarmUser, useLpTokenPrice } from 'state/farms/hooks'\nimport { getApy } from 'utils/apr'\n\nconst ApyLabelContainer = styled(Flex)`\n  cursor: pointer;\n\n  &:hover {\n    opacity: 0.5;\n  }\n`\n\nexport interface ApyButtonProps {\n  variant: 'text' | 'text-and-button'\n  pid: number\n  lpSymbol: string\n  lpLabel?: string\n  multiplier: string\n  cakePrice?: BigNumber\n  apr?: number\n  displayApr?: string\n  addLiquidityUrl?: string\n}\n\nconst ApyButton: React.FC<ApyButtonProps> = ({\n  variant,\n  pid,\n  lpLabel,\n  lpSymbol,\n  cakePrice,\n  apr,\n  multiplier,\n  displayApr,\n  addLiquidityUrl,\n}) => {\n  const { t } = useTranslation()\n  const lpPrice = useLpTokenPrice(lpSymbol)\n  const { tokenBalance, stakedBalance } = useFarmUser(pid)\n  const [onPresentApyModal] = useModal(\n    <RoiCalculatorModal\n      linkLabel={t('Get %symbol%', { symbol: lpLabel })}\n      stakingTokenBalance={stakedBalance.plus(tokenBalance)}\n      stakingTokenSymbol={lpSymbol}\n      stakingTokenPrice={lpPrice.toNumber()}\n      earningTokenPrice={cakePrice.toNumber()}\n      apr={apr}\n      multiplier={multiplier}\n      displayApr={displayApr}\n      linkHref={addLiquidityUrl}\n      isFarm\n    />,\n  )\n\n  const handleClickButton = (event): void => {\n    event.stopPropagation()\n    onPresentApyModal()\n  }\n\n  return (\n    <ApyLabelContainer alignItems=\"center\" onClick={handleClickButton}>\n      {displayApr}%\n      {variant === 'text-and-button' && (\n        <IconButton variant=\"text\" scale=\"sm\" ml=\"4px\">\n          <CalculateIcon width=\"18px\" />\n        </IconButton>\n      )}\n    </ApyLabelContainer>\n  )\n}\n\nexport default ApyButton\n","import React, { useState } from 'react'\nimport BigNumber from 'bignumber.js'\nimport styled from 'styled-components'\nimport { Card, Flex, Text, Skeleton } from '@pancakeswap/uikit'\nimport { DeserializedFarm } from 'state/types'\nimport { getBscScanLink } from 'utils'\nimport { useTranslation } from 'contexts/Localization'\nimport ExpandableSectionButton from 'components/ExpandableSectionButton'\nimport { BASE_ADD_LIQUIDITY_URL } from 'config'\nimport { getAddress } from 'utils/addressHelpers'\nimport getLiquidityUrlPathParts from 'utils/getLiquidityUrlPathParts'\nimport { getApy } from 'utils/compoundApyHelpers'\nimport DetailsSection from './DetailsSection'\nimport CardHeading from './CardHeading'\nimport CardActionsContainer from './CardActionsContainer'\nimport ApyButton from './ApyButton'\n\nexport interface FarmWithStakedValue extends DeserializedFarm {\n  apr?: number\n  lpRewardsApr?: number\n  liquidity?: BigNumber\n}\n\nconst StyledCard = styled(Card)`\n  align-self: baseline;\n`\n\nconst FarmCardInnerContainer = styled(Flex)`\n  flex-direction: column;\n  justify-content: space-around;\n  padding: 24px;\n`\n\nconst ExpandingWrapper = styled.div`\n  padding: 24px;\n  border-top: 2px solid ${({ theme }) => theme.colors.cardBorder};\n  overflow: hidden;\n`\n\ninterface FarmCardProps {\n  farm: FarmWithStakedValue\n  displayApr: string\n  removed: boolean\n  cakePrice?: BigNumber\n  account?: string\n}\n\nconst FarmCard: React.FC<FarmCardProps> = ({ farm, displayApr, removed, cakePrice, account }) => {\n  const { t } = useTranslation()\n\n  const [showExpandableSection, setShowExpandableSection] = useState(false)\n\n  const totalValueFormatted =\n    farm.liquidity && farm.liquidity.gt(0)\n      ? `$${farm.liquidity.toNumber().toLocaleString(undefined, { maximumFractionDigits: 0 })}`\n      : ''\n\n  const lpLabel = farm.lpSymbol && farm.lpSymbol.toUpperCase().replace('PANCAKE', '')\n  const earnLabel = farm.dual ? farm.dual.earnLabel : t('CROW + Fees')\n\n  const liquidityUrlPathParts = getLiquidityUrlPathParts({\n    quoteTokenAddress: farm.quoteToken.address,\n    tokenAddress: farm.token.address,\n  })\n  const addLiquidityUrl = `${BASE_ADD_LIQUIDITY_URL}/${liquidityUrlPathParts}`\n  const lpAddress = getAddress(farm.lpAddresses)\n  const isPromotedFarm = farm.token.symbol === 'CAKE'\n\n  return (\n    <StyledCard isActive={isPromotedFarm}>\n      <FarmCardInnerContainer>\n        <CardHeading\n          lpLabel={lpLabel}\n          multiplier={farm.multiplier}\n          isCommunityFarm={farm.isCommunity}\n          token={farm.token}\n          quoteToken={farm.quoteToken}\n        />\n        {!removed && (\n          <Flex justifyContent=\"space-between\" alignItems=\"center\">\n            <Text>{t('APY')}:</Text>\n            <Text bold style={{ display: 'flex', alignItems: 'center' }}>\n              {farm.apr ? (\n                <ApyButton\n                  variant=\"text-and-button\"\n                  pid={farm.pid}\n                  lpSymbol={farm.lpSymbol}\n                  multiplier={farm.multiplier}\n                  lpLabel={lpLabel}\n                  addLiquidityUrl={addLiquidityUrl}\n                  cakePrice={cakePrice}\n                  apr={farm.apr}\n                  displayApr={displayApr}\n                />\n              ) : (\n                <Skeleton height={24} width={80} />\n              )}\n            </Text>\n          </Flex>\n        )}\n        <Flex justifyContent=\"space-between\">\n          <Text>{t('Earn')}:</Text>\n          <Text bold>{earnLabel}</Text>\n        </Flex>\n        <CardActionsContainer\n          farm={farm}\n          lpLabel={lpLabel}\n          account={account}\n          cakePrice={cakePrice}\n          addLiquidityUrl={addLiquidityUrl}\n        />\n      </FarmCardInnerContainer>\n\n      <ExpandingWrapper>\n        <ExpandableSectionButton\n          onClick={() => setShowExpandableSection(!showExpandableSection)}\n          expanded={showExpandableSection}\n        />\n        {showExpandableSection && (\n          <DetailsSection\n            removed={removed}\n            bscScanAddress={getBscScanLink(lpAddress, 'address')}\n            infoAddress={`/info/pool/${lpAddress}`}\n            totalValueFormatted={totalValueFormatted}\n            lpLabel={lpLabel}\n            addLiquidityUrl={addLiquidityUrl}\n          />\n        )}\n      </ExpandingWrapper>\n    </StyledCard>\n  )\n}\n\nexport default FarmCard\n","import React from 'react'\nimport styled from 'styled-components'\nimport ApyButton from 'views/Farms/components/FarmCard/ApyButton'\nimport BigNumber from 'bignumber.js'\nimport { BASE_ADD_LIQUIDITY_URL } from 'config'\nimport getLiquidityUrlPathParts from 'utils/getLiquidityUrlPathParts'\nimport { Skeleton } from '@pancakeswap/uikit'\n\nexport interface AprProps {\n  value: string\n  multiplier: string\n  pid: number\n  lpLabel: string\n  lpSymbol: string\n  tokenAddress?: string\n  quoteTokenAddress?: string\n  cakePrice: BigNumber\n  originalValue: number\n  hideButton?: boolean\n}\n\nconst Container = styled.div`\n  display: flex;\n  align-items: center;\n  color: ${({ theme }) => theme.colors.text};\n\n  button {\n    width: 20px;\n    height: 20px;\n\n    svg {\n      path {\n        fill: ${({ theme }) => theme.colors.textSubtle};\n      }\n    }\n  }\n`\n\nconst AprWrapper = styled.div`\n  min-width: 60px;\n  text-align: left;\n`\n\nconst Apr: React.FC<AprProps> = ({\n  value,\n  pid,\n  lpLabel,\n  lpSymbol,\n  multiplier,\n  tokenAddress,\n  quoteTokenAddress,\n  cakePrice,\n  originalValue,\n  hideButton = false,\n}) => {\n  const liquidityUrlPathParts = getLiquidityUrlPathParts({ quoteTokenAddress, tokenAddress })\n  const addLiquidityUrl = `${BASE_ADD_LIQUIDITY_URL}/${liquidityUrlPathParts}`\n\n  return originalValue !== 0 ? (\n    <Container>\n      {originalValue ? (\n        <ApyButton\n          variant={hideButton ? 'text' : 'text-and-button'}\n          pid={pid}\n          lpSymbol={lpSymbol}\n          lpLabel={lpLabel}\n          multiplier={multiplier}\n          cakePrice={cakePrice}\n          apr={originalValue}\n          displayApr={value}\n          addLiquidityUrl={addLiquidityUrl}\n        />\n      ) : (\n        <AprWrapper>\n          <Skeleton width={60} />\n        </AprWrapper>\n      )}\n    </Container>\n  ) : (\n    <Container>\n      <AprWrapper>{originalValue}%</AprWrapper>\n    </Container>\n  )\n}\n\nexport default Apr\n","import React from 'react'\nimport styled from 'styled-components'\nimport { useFarmUser } from 'state/farms/hooks'\nimport { useTranslation } from 'contexts/Localization'\nimport { Text } from '@pancakeswap/uikit'\nimport { Token } from '@pancakeswap/sdk'\nimport { getBalanceNumber } from 'utils/formatBalance'\nimport { TokenPairImage } from 'components/TokenImage'\n\nexport interface FarmProps {\n  label: string\n  pid: number\n  token: Token\n  quoteToken: Token\n}\n\nconst Container = styled.div`\n  padding-left: 16px;\n  display: flex;\n  align-items: center;\n\n  ${({ theme }) => theme.mediaQueries.sm} {\n    padding-left: 32px;\n  }\n`\n\nconst TokenWrapper = styled.div`\n  padding-right: 8px;\n  width: 24px;\n\n  ${({ theme }) => theme.mediaQueries.sm} {\n    width: 40px;\n  }\n`\n\nconst Farm: React.FunctionComponent<FarmProps> = ({ token, quoteToken, label, pid }) => {\n  const { stakedBalance } = useFarmUser(pid)\n  const { t } = useTranslation()\n  const rawStakedBalance = getBalanceNumber(stakedBalance)\n\n  const handleRenderFarming = (): JSX.Element => {\n    if (rawStakedBalance) {\n      return (\n        <Text color=\"secondary\" fontSize=\"12px\" bold textTransform=\"uppercase\">\n          {t('Farming')}\n        </Text>\n      )\n    }\n\n    return null\n  }\n\n  return (\n    <Container>\n      <TokenWrapper>\n        <TokenPairImage variant=\"inverted\" primaryToken={token} secondaryToken={quoteToken} width={40} height={40} />\n      </TokenWrapper>\n      <div>\n        {handleRenderFarming()}\n        <Text bold>{label}</Text>\n      </div>\n    </Container>\n  )\n}\n\nexport default Farm\n","import React from 'react'\nimport styled from 'styled-components'\nimport { Skeleton } from '@pancakeswap/uikit'\n\nexport interface EarnedProps {\n  earnings: number\n  pid: number\n}\n\ninterface EarnedPropsWithLoading extends EarnedProps {\n  userDataReady: boolean\n}\n\nconst Amount = styled.span<{ earned: number }>`\n  color: ${({ earned, theme }) => (earned ? theme.colors.text : theme.colors.textDisabled)};\n  display: flex;\n  align-items: center;\n`\n\nconst Earned: React.FunctionComponent<EarnedPropsWithLoading> = ({ earnings, userDataReady }) => {\n  if (userDataReady) {\n    return <Amount earned={earnings}>{earnings.toLocaleString()}</Amount>\n  }\n  return (\n    <Amount earned={0}>\n      <Skeleton width={60} />\n    </Amount>\n  )\n}\n\nexport default Earned\n","import React from 'react'\nimport styled from 'styled-components'\nimport { ChevronDownIcon, useMatchBreakpoints } from '@pancakeswap/uikit'\nimport { useTranslation } from 'contexts/Localization'\n\ninterface DetailsProps {\n  actionPanelToggled: boolean\n}\n\nconst Container = styled.div`\n  display: flex;\n  width: 100%;\n  justify-content: flex-end;\n  padding-right: 8px;\n  color: ${({ theme }) => theme.colors.primary};\n\n  ${({ theme }) => theme.mediaQueries.sm} {\n    padding-right: 0px;\n  }\n`\n\nconst ArrowIcon = styled(ChevronDownIcon)<{ toggled: boolean }>`\n  transform: ${({ toggled }) => (toggled ? 'rotate(180deg)' : 'rotate(0)')};\n  height: 20px;\n`\n\nconst Details: React.FC<DetailsProps> = ({ actionPanelToggled }) => {\n  const { t } = useTranslation()\n  const { isDesktop } = useMatchBreakpoints()\n\n  return (\n    <Container>\n      {!isDesktop && t('Details')}\n      <ArrowIcon color=\"primary\" toggled={actionPanelToggled} />\n    </Container>\n  )\n}\n\nexport default Details\n","import React from 'react'\nimport styled from 'styled-components'\nimport { Text, HelpIcon, Skeleton, useTooltip } from '@pancakeswap/uikit'\nimport { useTranslation } from 'contexts/Localization'\n\nconst ReferenceElement = styled.div`\n  display: inline-block;\n`\n\nexport interface MultiplierProps {\n  multiplier: string\n}\n\nconst MultiplierWrapper = styled.div`\n  color: ${({ theme }) => theme.colors.text};\n  width: 36px;\n  text-align: right;\n  margin-right: 14px;\n\n  ${({ theme }) => theme.mediaQueries.lg} {\n    text-align: left;\n    margin-right: 0;\n  }\n`\n\nconst Container = styled.div`\n  display: flex;\n  align-items: center;\n`\n\nconst Multiplier: React.FunctionComponent<MultiplierProps> = ({ multiplier }) => {\n  const displayMultiplier = multiplier ? multiplier.toLowerCase() : <Skeleton width={30} />\n  const { t } = useTranslation()\n  const tooltipContent = (\n    <>\n      <Text>\n        {t(\n          'The Multiplier represents the proportion of CAKE rewards each farm receives, as a proportion of the CAKE produced each block.',\n        )}\n      </Text>\n      <Text my=\"24px\">\n        {t('For example, if a 1x farm received 1 CAKE per block, a 40x farm would receive 40 CAKE per block.')}\n      </Text>\n      <Text>{t('This amount is already included in all APR calculations for the farm.')}</Text>\n    </>\n  )\n  const { targetRef, tooltip, tooltipVisible } = useTooltip(tooltipContent, {\n    placement: 'top-end',\n    tooltipOffset: [20, 10],\n  })\n\n  return (\n    <Container>\n      <MultiplierWrapper>{displayMultiplier}</MultiplierWrapper>\n      <ReferenceElement ref={targetRef}>\n        <HelpIcon color=\"textSubtle\" />\n      </ReferenceElement>\n      {tooltipVisible && tooltip}\n    </Container>\n  )\n}\n\nexport default Multiplier\n","import React from 'react'\nimport styled from 'styled-components'\nimport { HelpIcon, Text, Skeleton, useTooltip } from '@pancakeswap/uikit'\nimport { useTranslation } from 'contexts/Localization'\nimport BigNumber from 'bignumber.js'\n\nconst ReferenceElement = styled.div`\n  display: inline-block;\n`\n\nexport interface LiquidityProps {\n  liquidity: BigNumber\n}\n\nconst LiquidityWrapper = styled.div`\n  min-width: 110px;\n  font-weight: 600;\n  text-align: right;\n  margin-right: 14px;\n\n  ${({ theme }) => theme.mediaQueries.lg} {\n    text-align: left;\n    margin-right: 0;\n  }\n`\n\nconst Container = styled.div`\n  display: flex;\n  align-items: center;\n`\n\nconst Liquidity: React.FunctionComponent<LiquidityProps> = ({ liquidity }) => {\n  const displayLiquidity =\n    liquidity && liquidity.gt(0) ? (\n      `$${Number(liquidity).toLocaleString(undefined, { maximumFractionDigits: 0 })}`\n    ) : (\n      <Skeleton width={60} />\n    )\n  const { t } = useTranslation()\n  const { targetRef, tooltip, tooltipVisible } = useTooltip(\n    t('Total value of the funds in this farm’s liquidity pool'),\n    { placement: 'top-end', tooltipOffset: [20, 10] },\n  )\n\n  return (\n    <Container>\n      <LiquidityWrapper>\n        <Text>{displayLiquidity}</Text>\n      </LiquidityWrapper>\n      <ReferenceElement ref={targetRef}>\n        <HelpIcon color=\"textSubtle\" />\n      </ReferenceElement>\n      {tooltipVisible && tooltip}\n    </Container>\n  )\n}\n\nexport default Liquidity\n","import styled from 'styled-components'\n\nexport const ActionContainer = styled.div`\n  padding: 16px;\n  border: 2px solid ${({ theme }) => theme.colors.input};\n  border-radius: 16px;\n  flex-grow: 1;\n  flex-basis: 0;\n  margin-bottom: 16px;\n\n  ${({ theme }) => theme.mediaQueries.sm} {\n    margin-left: 12px;\n    margin-right: 12px;\n    margin-bottom: 0;\n    max-height: 100px;\n  }\n\n  ${({ theme }) => theme.mediaQueries.xl} {\n    margin-left: 48px;\n    margin-right: 0;\n    margin-bottom: 0;\n    max-height: 100px;\n  }\n`\n\nexport const ActionTitles = styled.div`\n  display: flex;\n`\n\nexport const ActionContent = styled.div`\n  display: flex;\n  justify-content: space-between;\n  align-items: center;\n`\n","import React, { useState } from 'react'\nimport { Button, Heading, Skeleton, Text } from '@pancakeswap/uikit'\nimport BigNumber from 'bignumber.js'\nimport { useWeb3React } from '@web3-react/core'\nimport { FarmWithStakedValue } from 'views/Farms/components/FarmCard/FarmCard'\nimport Balance from 'components/Balance'\nimport { BIG_ZERO } from 'utils/bigNumber'\nimport { getBalanceAmount } from 'utils/formatBalance'\nimport { useAppDispatch } from 'state'\nimport { fetchFarmUserDataAsync } from 'state/farms'\nimport { usePriceCakeBusd } from 'state/farms/hooks'\nimport useToast from 'hooks/useToast'\nimport { useTranslation } from 'contexts/Localization'\nimport useHarvestFarm from '../../../hooks/useHarvestFarm'\n\nimport { ActionContainer, ActionTitles, ActionContent } from './styles'\n\ninterface HarvestActionProps extends FarmWithStakedValue {\n  userDataReady: boolean\n}\n\nconst HarvestAction: React.FunctionComponent<HarvestActionProps> = ({ pid, userData, userDataReady }) => {\n  const { toastSuccess, toastError } = useToast()\n  const earningsBigNumber = new BigNumber(userData.earnings)\n  const cakePrice = usePriceCakeBusd()\n  let earnings = BIG_ZERO\n  let earningsBusd = 0\n  let displayBalance = userDataReady ? earnings.toLocaleString() : <Skeleton width={60} />\n\n  // If user didn't connect wallet default balance will be 0\n  if (!earningsBigNumber.isZero()) {\n    earnings = getBalanceAmount(earningsBigNumber)\n    earningsBusd = earnings.multipliedBy(cakePrice).toNumber()\n    displayBalance = earnings.toFixed(3, BigNumber.ROUND_DOWN)\n  }\n\n  const [pendingTx, setPendingTx] = useState(false)\n  const { onReward } = useHarvestFarm(pid)\n  const { t } = useTranslation()\n  const dispatch = useAppDispatch()\n  const { account } = useWeb3React()\n\n  return (\n    <ActionContainer>\n      <ActionTitles>\n        <Text bold textTransform=\"uppercase\" color=\"secondary\" fontSize=\"12px\" pr=\"4px\">\n          CROW\n        </Text>\n        <Text bold textTransform=\"uppercase\" color=\"textSubtle\" fontSize=\"12px\">\n          {t('Earned')}\n        </Text>\n      </ActionTitles>\n      <ActionContent>\n        <div>\n          <Heading>{displayBalance}</Heading>\n          {earningsBusd > 0 && (\n            <Balance fontSize=\"12px\" color=\"textSubtle\" decimals={2} value={earningsBusd} unit=\" USD\" prefix=\"~\" />\n          )}\n        </div>\n        <Button\n          disabled={earnings.eq(0) || pendingTx || !userDataReady}\n          onClick={async () => {\n            setPendingTx(true)\n            try {\n              await onReward()\n              toastSuccess(\n                `${t('Harvested')}!`,\n                t('Your %symbol% earnings have been sent to your wallet!', { symbol: 'CAKE' }),\n              )\n            } catch (e) {\n              toastError(\n                t('Error'),\n                t('Please try again. Confirm the transaction and make sure you are paying enough gas!'),\n              )\n              console.error(e)\n            } finally {\n              setPendingTx(false)\n            }\n            dispatch(fetchFarmUserDataAsync({ account, pids: [pid] }))\n          }}\n          ml=\"4px\"\n        >\n          {pendingTx ? t('Harvesting') : t('Harvest')}\n        </Button>\n      </ActionContent>\n    </ActionContainer>\n  )\n}\n\nexport default HarvestAction\n","import React, { useState, useCallback } from 'react'\nimport styled from 'styled-components'\nimport { Button, useModal, IconButton, AddIcon, MinusIcon, Skeleton, Text, Heading } from '@pancakeswap/uikit'\nimport { useLocation } from 'react-router-dom'\nimport { BigNumber } from 'bignumber.js'\nimport ConnectWalletButton from 'components/ConnectWalletButton'\nimport Balance from 'components/Balance'\nimport { useWeb3React } from '@web3-react/core'\nimport { useFarmUser, useLpTokenPrice, usePriceCakeBusd } from 'state/farms/hooks'\nimport { fetchFarmUserDataAsync } from 'state/farms'\nimport { FarmWithStakedValue } from 'views/Farms/components/FarmCard/FarmCard'\nimport { useTranslation } from 'contexts/Localization'\nimport useToast from 'hooks/useToast'\nimport { useERC20 } from 'hooks/useContract'\nimport { BASE_ADD_LIQUIDITY_URL } from 'config'\nimport { useAppDispatch } from 'state'\nimport { getAddress } from 'utils/addressHelpers'\nimport getLiquidityUrlPathParts from 'utils/getLiquidityUrlPathParts'\nimport { getBalanceAmount, getBalanceNumber, getFullDisplayBalance } from 'utils/formatBalance'\nimport useUnstakeFarms from '../../../hooks/useUnstakeFarms'\nimport DepositModal from '../../DepositModal'\nimport WithdrawModal from '../../WithdrawModal'\nimport useStakeFarms from '../../../hooks/useStakeFarms'\nimport useApproveFarm from '../../../hooks/useApproveFarm'\nimport { ActionContainer, ActionTitles, ActionContent } from './styles'\n\nconst IconButtonWrapper = styled.div`\n  display: flex;\n`\n\ninterface StackedActionProps extends FarmWithStakedValue {\n  userDataReady: boolean\n  lpLabel?: string\n  displayApr?: string\n}\n\nconst Staked: React.FunctionComponent<StackedActionProps> = ({\n  pid,\n  apr,\n  multiplier,\n  lpSymbol,\n  lpLabel,\n  lpAddresses,\n  quoteToken,\n  token,\n  userDataReady,\n  displayApr,\n}) => {\n  const { t } = useTranslation()\n  const { toastError } = useToast()\n  const { account } = useWeb3React()\n  const [requestedApproval, setRequestedApproval] = useState(false)\n  const { allowance, tokenBalance, stakedBalance } = useFarmUser(pid)\n  const { onStake } = useStakeFarms(pid)\n  const { onUnstake } = useUnstakeFarms(pid)\n  const location = useLocation()\n  const lpPrice = useLpTokenPrice(lpSymbol)\n  const cakePrice = usePriceCakeBusd()\n\n  const isApproved = account && allowance && allowance.isGreaterThan(0)\n\n  const lpAddress = getAddress(lpAddresses)\n  const liquidityUrlPathParts = getLiquidityUrlPathParts({\n    quoteTokenAddress: quoteToken.address,\n    tokenAddress: token.address,\n  })\n  const addLiquidityUrl = `${BASE_ADD_LIQUIDITY_URL}/${liquidityUrlPathParts}`\n\n  const handleStake = async (amount: string) => {\n    await onStake(amount)\n    dispatch(fetchFarmUserDataAsync({ account, pids: [pid] }))\n  }\n\n  const handleUnstake = async (amount: string) => {\n    await onUnstake(amount)\n    dispatch(fetchFarmUserDataAsync({ account, pids: [pid] }))\n  }\n\n  const displayBalance = useCallback(() => {\n    const stakedBalanceBigNumber = getBalanceAmount(stakedBalance)\n    if (stakedBalanceBigNumber.gt(0) && stakedBalanceBigNumber.lt(0.0000001)) {\n      return stakedBalanceBigNumber.toFixed(10, BigNumber.ROUND_DOWN)\n    }\n    if (stakedBalanceBigNumber.gt(0) && stakedBalanceBigNumber.lt(0.0001)) {\n      return getFullDisplayBalance(stakedBalance).toLocaleString()\n    }\n    return stakedBalanceBigNumber.toFixed(3, BigNumber.ROUND_DOWN)\n  }, [stakedBalance])\n\n  const [onPresentDeposit] = useModal(\n    <DepositModal\n      max={tokenBalance}\n      lpPrice={lpPrice}\n      lpLabel={lpLabel}\n      apr={apr}\n      displayApr={displayApr}\n      stakedBalance={stakedBalance}\n      onConfirm={handleStake}\n      tokenName={lpSymbol}\n      multiplier={multiplier}\n      addLiquidityUrl={addLiquidityUrl}\n      cakePrice={cakePrice}\n    />,\n  )\n  const [onPresentWithdraw] = useModal(\n    <WithdrawModal max={stakedBalance} onConfirm={handleUnstake} tokenName={lpSymbol} />,\n  )\n  const lpContract = useERC20(lpAddress)\n  const dispatch = useAppDispatch()\n  const { onApprove } = useApproveFarm(lpContract)\n\n  const handleApprove = useCallback(async () => {\n    try {\n      setRequestedApproval(true)\n      await onApprove()\n      dispatch(fetchFarmUserDataAsync({ account, pids: [pid] }))\n    } catch (e) {\n      toastError(t('Error'), t('Please try again. Confirm the transaction and make sure you are paying enough gas!'))\n      console.error(e)\n    } finally {\n      setRequestedApproval(false)\n    }\n  }, [onApprove, dispatch, account, pid, t, toastError])\n\n  if (!account) {\n    return (\n      <ActionContainer>\n        <ActionTitles>\n          <Text bold textTransform=\"uppercase\" color=\"textSubtle\" fontSize=\"12px\">\n            {t('Start Farming')}\n          </Text>\n        </ActionTitles>\n        <ActionContent>\n          <ConnectWalletButton width=\"100%\" />\n        </ActionContent>\n      </ActionContainer>\n    )\n  }\n\n  if (isApproved) {\n    if (stakedBalance.gt(0)) {\n      return (\n        <ActionContainer>\n          <ActionTitles>\n            <Text bold textTransform=\"uppercase\" color=\"secondary\" fontSize=\"12px\" pr=\"4px\">\n              {lpSymbol}\n            </Text>\n            <Text bold textTransform=\"uppercase\" color=\"textSubtle\" fontSize=\"12px\">\n              {t('Staked')}\n            </Text>\n          </ActionTitles>\n          <ActionContent>\n            <div>\n              <Heading>{displayBalance()}</Heading>\n              {stakedBalance.gt(0) && lpPrice.gt(0) && (\n                <Balance\n                  fontSize=\"12px\"\n                  color=\"textSubtle\"\n                  decimals={2}\n                  value={getBalanceNumber(lpPrice.times(stakedBalance))}\n                  unit=\" USD\"\n                  prefix=\"~\"\n                />\n              )}\n            </div>\n            <IconButtonWrapper>\n              <IconButton variant=\"secondary\" onClick={onPresentWithdraw} mr=\"6px\">\n                <MinusIcon color=\"primary\" width=\"14px\" />\n              </IconButton>\n              <IconButton\n                variant=\"secondary\"\n                onClick={onPresentDeposit}\n                disabled={['history', 'archived'].some((item) => location.pathname.includes(item))}\n              >\n                <AddIcon color=\"primary\" width=\"14px\" />\n              </IconButton>\n            </IconButtonWrapper>\n          </ActionContent>\n        </ActionContainer>\n      )\n    }\n\n    return (\n      <ActionContainer>\n        <ActionTitles>\n          <Text bold textTransform=\"uppercase\" color=\"textSubtle\" fontSize=\"12px\" pr=\"4px\">\n            {t('Stake')}\n          </Text>\n          <Text bold textTransform=\"uppercase\" color=\"secondary\" fontSize=\"12px\">\n            {lpSymbol}\n          </Text>\n        </ActionTitles>\n        <ActionContent>\n          <Button\n            width=\"100%\"\n            onClick={onPresentDeposit}\n            variant=\"secondary\"\n            disabled={['history', 'archived'].some((item) => location.pathname.includes(item))}\n          >\n            {t('Stake LP')}\n          </Button>\n        </ActionContent>\n      </ActionContainer>\n    )\n  }\n\n  if (!userDataReady) {\n    return (\n      <ActionContainer>\n        <ActionTitles>\n          <Text bold textTransform=\"uppercase\" color=\"textSubtle\" fontSize=\"12px\">\n            {t('Start Farming')}\n          </Text>\n        </ActionTitles>\n        <ActionContent>\n          <Skeleton width={180} marginBottom={28} marginTop={14} />\n        </ActionContent>\n      </ActionContainer>\n    )\n  }\n\n  return (\n    <ActionContainer>\n      <ActionTitles>\n        <Text bold textTransform=\"uppercase\" color=\"textSubtle\" fontSize=\"12px\">\n          {t('Enable Farm')}\n        </Text>\n      </ActionTitles>\n      <ActionContent>\n        <Button width=\"100%\" disabled={requestedApproval} onClick={handleApprove} variant=\"secondary\">\n          {t('Enable')}\n        </Button>\n      </ActionContent>\n    </ActionContainer>\n  )\n}\n\nexport default Staked\n","import React from 'react'\nimport styled, { keyframes, css } from 'styled-components'\nimport { useTranslation } from 'contexts/Localization'\nimport { LinkExternal, Text } from '@pancakeswap/uikit'\nimport { FarmWithStakedValue } from 'views/Farms/components/FarmCard/FarmCard'\nimport getLiquidityUrlPathParts from 'utils/getLiquidityUrlPathParts'\nimport { getAddress } from 'utils/addressHelpers'\nimport { getBscScanLink } from 'utils'\nimport { CommunityTag, CoreTag, DualTag } from 'components/Tags'\n\nimport HarvestAction from './HarvestAction'\nimport StakedAction from './StakedAction'\nimport Apr, { AprProps } from '../Apr'\nimport Multiplier, { MultiplierProps } from '../Multiplier'\nimport Liquidity, { LiquidityProps } from '../Liquidity'\n\nexport interface ActionPanelProps {\n  apr: AprProps\n  multiplier: MultiplierProps\n  liquidity: LiquidityProps\n  details: FarmWithStakedValue\n  userDataReady: boolean\n  expanded: boolean\n}\n\nconst expandAnimation = keyframes`\n  from {\n    max-height: 0px;\n  }\n  to {\n    max-height: 500px;\n  }\n`\n\nconst collapseAnimation = keyframes`\n  from {\n    max-height: 500px;\n  }\n  to {\n    max-height: 0px;\n  }\n`\n\nconst Container = styled.div<{ expanded }>`\n  animation: ${({ expanded }) =>\n    expanded\n      ? css`\n          ${expandAnimation} 300ms linear forwards\n        `\n      : css`\n          ${collapseAnimation} 300ms linear forwards\n        `};\n  overflow: hidden;\n  background: ${({ theme }) => theme.colors.background};\n  display: flex;\n  width: 100%;\n  flex-direction: column-reverse;\n  padding: 24px;\n\n  ${({ theme }) => theme.mediaQueries.lg} {\n    flex-direction: row;\n    padding: 16px 32px;\n  }\n`\n\nconst StyledLinkExternal = styled(LinkExternal)`\n  font-weight: 400;\n`\n\nconst StakeContainer = styled.div`\n  color: ${({ theme }) => theme.colors.text};\n  align-items: center;\n  display: flex;\n  justify-content: space-between;\n\n  ${({ theme }) => theme.mediaQueries.sm} {\n    justify-content: flex-start;\n  }\n`\n\nconst TagsContainer = styled.div`\n  display: flex;\n  align-items: center;\n  margin-top: 25px;\n\n  ${({ theme }) => theme.mediaQueries.sm} {\n    margin-top: 16px;\n  }\n\n  > div {\n    height: 24px;\n    padding: 0 6px;\n    font-size: 14px;\n    margin-right: 4px;\n\n    svg {\n      width: 14px;\n    }\n  }\n`\n\nconst ActionContainer = styled.div`\n  display: flex;\n  flex-direction: column;\n\n  ${({ theme }) => theme.mediaQueries.sm} {\n    flex-direction: row;\n    align-items: center;\n    flex-grow: 1;\n    flex-basis: 0;\n  }\n`\n\nconst InfoContainer = styled.div`\n  min-width: 200px;\n`\n\nconst ValueContainer = styled.div`\n  display: block;\n\n  ${({ theme }) => theme.mediaQueries.lg} {\n    display: none;\n  }\n`\n\nconst ValueWrapper = styled.div`\n  display: flex;\n  align-items: center;\n  justify-content: space-between;\n  margin: 4px 0px;\n`\n\nconst ActionPanel: React.FunctionComponent<ActionPanelProps> = ({\n  details,\n  apr,\n  multiplier,\n  liquidity,\n  userDataReady,\n  expanded,\n}) => {\n  const farm = details\n\n  const { t } = useTranslation()\n  const isActive = farm.multiplier !== '0X'\n  const { quoteToken, token, dual } = farm\n  const lpLabel = farm.lpSymbol && farm.lpSymbol.toUpperCase().replace('PANCAKE', '')\n  const liquidityUrlPathParts = getLiquidityUrlPathParts({\n    quoteTokenAddress: quoteToken.address,\n    tokenAddress: token.address,\n  })\n  const lpAddress = getAddress(farm.lpAddresses)\n  const bsc = getBscScanLink(lpAddress, 'address')\n  const info = `/info/pool/${lpAddress}`\n\n  return (\n    <Container expanded={expanded}>\n      <InfoContainer>\n        {isActive && (\n          <StakeContainer>\n            <StyledLinkExternal href={`/add/${liquidityUrlPathParts}`}>\n              {t('Get %symbol%', { symbol: lpLabel })}\n            </StyledLinkExternal>\n          </StakeContainer>\n        )}\n        <StyledLinkExternal href={bsc}>{t('View Contract')}</StyledLinkExternal>\n        <StyledLinkExternal href={info}>{t('See Pair Info')}</StyledLinkExternal>\n        <TagsContainer>\n          {farm.isCommunity ? <CommunityTag /> : <CoreTag />}\n          {dual ? <DualTag /> : null}\n        </TagsContainer>\n      </InfoContainer>\n      <ValueContainer>\n        <ValueWrapper>\n          <Text>{t('APR')}</Text>\n          <Apr {...apr} />\n        </ValueWrapper>\n        <ValueWrapper>\n          <Text>{t('Multiplier')}</Text>\n          <Multiplier {...multiplier} />\n        </ValueWrapper>\n        <ValueWrapper>\n          <Text>{t('Liquidity')}</Text>\n          <Liquidity {...liquidity} />\n        </ValueWrapper>\n      </ValueContainer>\n      <ActionContainer>\n        <HarvestAction {...farm} userDataReady={userDataReady} />\n        <StakedAction {...farm} userDataReady={userDataReady} lpLabel={lpLabel} displayApr={apr.value} />\n      </ActionContainer>\n    </Container>\n  )\n}\n\nexport default ActionPanel\n","import React from 'react'\nimport styled from 'styled-components'\n\nconst Label = styled.div`\n  font-size: 12px;\n  color: ${({ theme }) => theme.colors.textSubtle};\n  text-align: left;\n`\n\nconst ContentContainer = styled.div`\n  min-height: 24px;\n  display: flex;\n  align-items: center;\n`\n\ninterface CellLayoutProps {\n  label?: string\n}\n\nconst CellLayout: React.FC<CellLayoutProps> = ({ label = '', children }) => {\n  return (\n    <div>\n      {label && <Label>{label}</Label>}\n      <ContentContainer>{children}</ContentContainer>\n    </div>\n  )\n}\n\nexport default CellLayout\n","export type TableProps = {\n  data?: TableDataTypes[]\n  selectedFilters?: string\n  sortBy?: string\n  sortDir?: string\n  onSort?: (value: string) => void\n}\n\nexport type ColumnsDefTypes = {\n  id: number\n  label: string\n  name: string\n  sortable: boolean\n}\n\nexport type ScrollBarProps = {\n  ref: string\n  width: number\n}\n\nexport type TableDataTypes = {\n  POOL: string\n  APR: string\n  EARNED: string\n  STAKED: string\n  DETAILS: string\n  LINKS: string\n}\n\nexport const MobileColumnSchema: ColumnsDefTypes[] = [\n  {\n    id: 1,\n    name: 'farm',\n    sortable: true,\n    label: '',\n  },\n  {\n    id: 2,\n    name: 'earned',\n    sortable: true,\n    label: 'Earned',\n  },\n  {\n    id: 3,\n    name: 'apr',\n    sortable: true,\n    label: 'APR',\n  },\n  {\n    id: 6,\n    name: 'details',\n    sortable: true,\n    label: '',\n  },\n]\n\nexport const DesktopColumnSchema: ColumnsDefTypes[] = [\n  {\n    id: 1,\n    name: 'farm',\n    sortable: true,\n    label: '',\n  },\n  {\n    id: 2,\n    name: 'earned',\n    sortable: true,\n    label: 'Earned',\n  },\n  {\n    id: 3,\n    name: 'apr',\n    sortable: true,\n    label: 'APR',\n  },\n  {\n    id: 4,\n    name: 'liquidity',\n    sortable: true,\n    label: 'Liquidity',\n  },\n  {\n    id: 5,\n    name: 'multiplier',\n    sortable: true,\n    label: 'Multiplier',\n  },\n  {\n    id: 6,\n    name: 'details',\n    sortable: true,\n    label: '',\n  },\n]\n","import React, { useEffect, useState } from 'react'\nimport styled from 'styled-components'\nimport { FarmWithStakedValue } from 'views/Farms/components/FarmCard/FarmCard'\nimport { useMatchBreakpoints } from '@pancakeswap/uikit'\nimport { useTranslation } from 'contexts/Localization'\nimport useDelayedUnmount from 'hooks/useDelayedUnmount'\nimport { useFarmUser } from 'state/farms/hooks'\n\nimport Apr, { AprProps } from './Apr'\nimport Farm, { FarmProps } from './Farm'\nimport Earned, { EarnedProps } from './Earned'\nimport Details from './Details'\nimport Multiplier, { MultiplierProps } from './Multiplier'\nimport Liquidity, { LiquidityProps } from './Liquidity'\nimport ActionPanel from './Actions/ActionPanel'\nimport CellLayout from './CellLayout'\nimport { DesktopColumnSchema, MobileColumnSchema } from '../types'\n\nexport interface RowProps {\n  apr: AprProps\n  farm: FarmProps\n  earned: EarnedProps\n  multiplier: MultiplierProps\n  liquidity: LiquidityProps\n  details: FarmWithStakedValue\n}\n\ninterface RowPropsWithLoading extends RowProps {\n  userDataReady: boolean\n}\n\nconst cells = {\n  apr: Apr,\n  farm: Farm,\n  earned: Earned,\n  details: Details,\n  multiplier: Multiplier,\n  liquidity: Liquidity,\n}\n\nconst CellInner = styled.div`\n  padding: 24px 0px;\n  display: flex;\n  width: 100%;\n  align-items: center;\n  padding-right: 8px;\n\n  ${({ theme }) => theme.mediaQueries.xl} {\n    padding-right: 32px;\n  }\n`\n\nconst StyledTr = styled.tr`\n  cursor: pointer;\n  border-bottom: 2px solid ${({ theme }) => theme.colors.cardBorder};\n`\n\nconst EarnedMobileCell = styled.td`\n  padding: 16px 0 24px 16px;\n`\n\nconst AprMobileCell = styled.td`\n  padding-top: 16px;\n  padding-bottom: 24px;\n`\n\nconst FarmMobileCell = styled.td`\n  padding-top: 24px;\n`\n\nconst Row: React.FunctionComponent<RowPropsWithLoading> = (props) => {\n  const { details, userDataReady } = props\n  const hasStakedAmount = !!useFarmUser(details.pid).stakedBalance.toNumber()\n  const [actionPanelExpanded, setActionPanelExpanded] = useState(hasStakedAmount)\n  const shouldRenderChild = useDelayedUnmount(actionPanelExpanded, 300)\n  const { t } = useTranslation()\n\n  const toggleActionPanel = () => {\n    setActionPanelExpanded(!actionPanelExpanded)\n  }\n\n  useEffect(() => {\n    setActionPanelExpanded(hasStakedAmount)\n  }, [hasStakedAmount])\n\n  const { isDesktop, isMobile } = useMatchBreakpoints()\n\n  const isSmallerScreen = !isDesktop\n  const tableSchema = isSmallerScreen ? MobileColumnSchema : DesktopColumnSchema\n  const columnNames = tableSchema.map((column) => column.name)\n\n  const handleRenderRow = () => {\n    if (!isMobile) {\n      return (\n        <StyledTr onClick={toggleActionPanel}>\n          {Object.keys(props).map((key) => {\n            const columnIndex = columnNames.indexOf(key)\n            if (columnIndex === -1) {\n              return null\n            }\n\n            switch (key) {\n              case 'details':\n                return (\n                  <td key={key}>\n                    <CellInner>\n                      <CellLayout>\n                        <Details actionPanelToggled={actionPanelExpanded} />\n                      </CellLayout>\n                    </CellInner>\n                  </td>\n                )\n              case 'apr':\n                return (\n                  <td key={key}>\n                    <CellInner>\n                      <CellLayout label={t('APR')}>\n                        <Apr {...props.apr} hideButton={isSmallerScreen} />\n                      </CellLayout>\n                    </CellInner>\n                  </td>\n                )\n              default:\n                return (\n                  <td key={key}>\n                    <CellInner>\n                      <CellLayout label={t(tableSchema[columnIndex].label)}>\n                        {React.createElement(cells[key], { ...props[key], userDataReady })}\n                      </CellLayout>\n                    </CellInner>\n                  </td>\n                )\n            }\n          })}\n        </StyledTr>\n      )\n    }\n\n    return (\n      <StyledTr onClick={toggleActionPanel}>\n        <td>\n          <tr>\n            <FarmMobileCell>\n              <CellLayout>\n                <Farm {...props.farm} />\n              </CellLayout>\n            </FarmMobileCell>\n          </tr>\n          <tr>\n            <EarnedMobileCell>\n              <CellLayout label={t('Earned')}>\n                <Earned {...props.earned} userDataReady={userDataReady} />\n              </CellLayout>\n            </EarnedMobileCell>\n            <AprMobileCell>\n              <CellLayout label={t('APR')}>\n                <Apr {...props.apr} hideButton />\n              </CellLayout>\n            </AprMobileCell>\n          </tr>\n        </td>\n        <td>\n          <CellInner>\n            <CellLayout>\n              <Details actionPanelToggled={actionPanelExpanded} />\n            </CellLayout>\n          </CellInner>\n        </td>\n      </StyledTr>\n    )\n  }\n\n  return (\n    <>\n      {handleRenderRow()}\n      {shouldRenderChild && (\n        <tr>\n          <td colSpan={6}>\n            <ActionPanel {...props} expanded={actionPanelExpanded} />\n          </td>\n        </tr>\n      )}\n    </>\n  )\n}\n\nexport default Row\n","import React, { useRef } from 'react'\nimport styled from 'styled-components'\nimport { useTable, Button, ChevronUpIcon, ColumnType } from '@pancakeswap/uikit'\nimport { useTranslation } from 'contexts/Localization'\n\nimport Row, { RowProps } from './Row'\n\nexport interface ITableProps {\n  data: RowProps[]\n  columns: ColumnType<RowProps>[]\n  userDataReady: boolean\n  sortColumn?: string\n}\n\nconst Container = styled.div`\n  filter: ${({ theme }) => theme.card.dropShadow};\n  width: 100%;\n  background: ${({ theme }) => theme.card.background};\n  border-radius: 16px;\n  margin: 16px 0px;\n`\n\nconst TableWrapper = styled.div`\n  overflow: visible;\n  scroll-margin-top: 64px;\n\n  &::-webkit-scrollbar {\n    display: none;\n  }\n`\n\nconst StyledTable = styled.table`\n  border-collapse: collapse;\n  font-size: 14px;\n  border-radius: 4px;\n  margin-left: auto;\n  margin-right: auto;\n  width: 100%;\n`\n\nconst TableBody = styled.tbody`\n  & tr {\n    td {\n      font-size: 16px;\n      vertical-align: middle;\n    }\n  }\n`\n\nconst TableContainer = styled.div`\n  position: relative;\n`\n\nconst ScrollButtonContainer = styled.div`\n  display: flex;\n  justify-content: center;\n  padding-top: 5px;\n  padding-bottom: 5px;\n`\n\nconst FarmTable: React.FC<ITableProps> = (props) => {\n  const tableWrapperEl = useRef<HTMLDivElement>(null)\n  const { t } = useTranslation()\n  const { data, columns, userDataReady } = props\n\n  const { rows } = useTable(columns, data, { sortable: true, sortColumn: 'farm' })\n\n  const scrollToTop = (): void => {\n    tableWrapperEl.current.scrollIntoView({\n      behavior: 'smooth',\n    })\n  }\n\n  return (\n    <Container id=\"farms-table\">\n      <TableContainer>\n        <TableWrapper ref={tableWrapperEl}>\n          <StyledTable>\n            <TableBody>\n              {rows.map((row) => {\n                return <Row {...row.original} userDataReady={userDataReady} key={`table-row-${row.id}`} />\n              })}\n            </TableBody>\n          </StyledTable>\n        </TableWrapper>\n        <ScrollButtonContainer>\n          <Button variant=\"text\" onClick={scrollToTop}>\n            {t('To Top')}\n            <ChevronUpIcon color=\"primary\" />\n          </Button>\n        </ScrollButtonContainer>\n      </TableContainer>\n    </Container>\n  )\n}\n\nexport default FarmTable\n","import React from 'react'\nimport styled from 'styled-components'\nimport { useLocation, Link, useRouteMatch } from 'react-router-dom'\nimport { ButtonMenu, ButtonMenuItem, NotificationDot } from '@pancakeswap/uikit'\nimport { useTranslation } from 'contexts/Localization'\n\ninterface FarmTabButtonsProps {\n  hasStakeInFinishedFarms: boolean\n}\n\nconst FarmTabButtons: React.FC<FarmTabButtonsProps> = ({ hasStakeInFinishedFarms }) => {\n  const { url } = useRouteMatch()\n  const location = useLocation()\n  const { t } = useTranslation()\n\n  let activeIndex\n  switch (location.pathname) {\n    case '/farms':\n      activeIndex = 0\n      break\n    case '/farms/history':\n      activeIndex = 1\n      break\n    case '/farms/archived':\n      activeIndex = 2\n      break\n    default:\n      activeIndex = 0\n      break\n  }\n\n  return (\n    <Wrapper>\n      <ButtonMenu activeIndex={activeIndex} scale=\"sm\" variant=\"subtle\">\n        <ButtonMenuItem as={Link} to={`${url}`}>\n          {t('Live')}\n        </ButtonMenuItem>\n        <NotificationDot show={hasStakeInFinishedFarms}>\n          <ButtonMenuItem id=\"finished-farms-button\" as={Link} to={`${url}/history`}>\n            {t('Finished')}\n          </ButtonMenuItem>\n        </NotificationDot>\n      </ButtonMenu>\n    </Wrapper>\n  )\n}\n\nexport default FarmTabButtons\n\nconst Wrapper = styled.div`\n  display: flex;\n  justify-content: center;\n  align-items: center;\n\n  a {\n    padding-left: 12px;\n    padding-right: 12px;\n  }\n\n  ${({ theme }) => theme.mediaQueries.sm} {\n    margin-left: 16px;\n  }\n`\n","import React from 'react'\nimport styled from 'styled-components'\nimport { ListViewIcon, CardViewIcon, IconButton } from '@pancakeswap/uikit'\nimport { ViewMode } from 'state/user/actions'\n\ninterface ToggleViewProps {\n  viewMode: ViewMode\n  onToggle: (mode: ViewMode) => void\n}\n\nconst Container = styled.div`\n  margin-left: -8px;\n\n  ${({ theme }) => theme.mediaQueries.sm} {\n    margin-left: 0;\n  }\n`\n\nconst ToggleView: React.FunctionComponent<ToggleViewProps> = ({ viewMode, onToggle }) => {\n  const handleToggle = (mode: ViewMode) => {\n    if (viewMode !== mode) {\n      onToggle(mode)\n    }\n  }\n\n  return (\n    <Container>\n      <IconButton variant=\"text\" scale=\"sm\" id=\"clickFarmCardView\" onClick={() => handleToggle(ViewMode.CARD)}>\n        <CardViewIcon color={viewMode === ViewMode.CARD ? 'primary' : 'textDisabled'} />\n      </IconButton>\n      <IconButton variant=\"text\" scale=\"sm\" id=\"clickFarmTableView\" onClick={() => handleToggle(ViewMode.TABLE)}>\n        <ListViewIcon color={viewMode === ViewMode.TABLE ? 'primary' : 'textDisabled'} />\n      </IconButton>\n    </Container>\n  )\n}\n\nexport default ToggleView\n","import React, { useEffect, useCallback, useState, useMemo, useRef } from 'react'\nimport { Route, useRouteMatch, useLocation, NavLink } from 'react-router-dom'\nimport BigNumber from 'bignumber.js'\nimport { useWeb3React } from '@web3-react/core'\nimport { Image, Heading, RowType, Toggle, Text, Button, ArrowForwardIcon, Flex } from '@pancakeswap/uikit'\nimport { ChainId } from '@pancakeswap/sdk'\nimport styled from 'styled-components'\nimport FlexLayout from 'components/Layout/Flex'\nimport Page from 'components/Layout/Page'\nimport { useFarms, usePollFarmsWithUserData, usePriceCakeBusd } from 'state/farms/hooks'\nimport useIntersectionObserver from 'hooks/useIntersectionObserver'\nimport { DeserializedFarm } from 'state/types'\nimport { useTranslation } from 'contexts/Localization'\nimport { getBalanceNumber } from 'utils/formatBalance'\nimport { getFarmApr } from 'utils/apr'\nimport { orderBy } from 'lodash'\nimport isArchivedPid from 'utils/farmHelpers'\nimport { latinise } from 'utils/latinise'\nimport { useUserFarmStakedOnly, useUserFarmsViewMode } from 'state/user/hooks'\nimport { ViewMode } from 'state/user/actions'\nimport PageHeader from 'components/PageHeader'\nimport SearchInput from 'components/SearchInput'\nimport Select, { OptionProps } from 'components/Select/Select'\nimport Loading from 'components/Loading'\nimport FarmCard, { FarmWithStakedValue } from './components/FarmCard/FarmCard'\nimport Table from './components/FarmTable/FarmTable'\nimport FarmTabButtons from './components/FarmTabButtons'\nimport { RowProps } from './components/FarmTable/Row'\nimport ToggleView from './components/ToggleView/ToggleView'\nimport { DesktopColumnSchema } from './components/types'\n\nconst ControlContainer = styled.div`\n  display: flex;\n  width: 100%;\n  align-items: center;\n  position: relative;\n\n  justify-content: space-between;\n  flex-direction: column;\n  margin-bottom: 32px;\n\n  ${({ theme }) => theme.mediaQueries.sm} {\n    flex-direction: row;\n    flex-wrap: wrap;\n    padding: 16px 32px;\n    margin-bottom: 0;\n  }\n`\n\nconst ToggleWrapper = styled.div`\n  display: flex;\n  align-items: center;\n  margin-left: 10px;\n\n  ${Text} {\n    margin-left: 8px;\n  }\n`\n\nconst LabelWrapper = styled.div`\n  > ${Text} {\n    font-size: 12px;\n  }\n`\n\nconst FilterContainer = styled.div`\n  display: flex;\n  align-items: center;\n  width: 100%;\n  padding: 8px 0px;\n\n  ${({ theme }) => theme.mediaQueries.sm} {\n    width: auto;\n    padding: 0;\n  }\n`\n\nconst ViewControls = styled.div`\n  flex-wrap: wrap;\n  justify-content: space-between;\n  display: flex;\n  align-items: center;\n  width: 100%;\n\n  > div {\n    padding: 8px 0px;\n  }\n\n  ${({ theme }) => theme.mediaQueries.sm} {\n    justify-content: flex-start;\n    width: auto;\n\n    > div {\n      padding: 0;\n    }\n  }\n`\n\nconst StyledImage = styled(Image)`\n  margin-left: auto;\n  margin-right: auto;\n  margin-top: 58px;\n`\nconst NUMBER_OF_FARMS_VISIBLE = 12\n\nconst getDisplayApr = (cakeRewardsApr?: number, lpRewardsApr?: number) => {\n  if (cakeRewardsApr && lpRewardsApr) {\n    return (cakeRewardsApr + lpRewardsApr).toLocaleString('en-US', { maximumFractionDigits: 2 })\n  }\n  if (cakeRewardsApr) {\n    return cakeRewardsApr.toLocaleString('en-US', { maximumFractionDigits: 2 })\n  }\n  return null\n}\n\nconst Farms: React.FC = () => {\n  const { path } = useRouteMatch()\n  const { pathname } = useLocation()\n  const { t } = useTranslation()\n  const { data: farmsLP, userDataLoaded } = useFarms()\n  const cakePrice = usePriceCakeBusd()\n  const [query, setQuery] = useState('')\n  const [viewMode, setViewMode] = useUserFarmsViewMode()\n  const { account } = useWeb3React()\n  const [sortOption, setSortOption] = useState('hot')\n  const { observerRef, isIntersecting } = useIntersectionObserver()\n  const chosenFarmsLength = useRef(0)\n\n  const isArchived = pathname.includes('archived')\n  const isInactive = pathname.includes('history')\n  const isActive = !isInactive && !isArchived\n\n  usePollFarmsWithUserData(isArchived)\n\n  // Users with no wallet connected should see 0 as Earned amount\n  // Connected users should see loading indicator until first userData has loaded\n  const userDataReady = !account || (!!account && userDataLoaded)\n\n  const [stakedOnly, setStakedOnly] = useUserFarmStakedOnly(isActive)\n\n  const activeFarms = farmsLP.filter((farm) => farm.multiplier !== '0X' && !isArchivedPid(farm.pid))\n  const inactiveFarms = farmsLP.filter((farm) => farm.multiplier === '0X' && !isArchivedPid(farm.pid))\n  const archivedFarms = farmsLP.filter((farm) => isArchivedPid(farm.pid))\n\n  const stakedOnlyFarms = activeFarms.filter(\n    (farm) => farm.userData && new BigNumber(farm.userData.stakedBalance).isGreaterThan(0),\n  )\n\n  const stakedInactiveFarms = inactiveFarms.filter(\n    (farm) => farm.userData && new BigNumber(farm.userData.stakedBalance).isGreaterThan(0),\n  )\n\n  const stakedArchivedFarms = archivedFarms.filter(\n    (farm) => farm.userData && new BigNumber(farm.userData.stakedBalance).isGreaterThan(0),\n  )\n\n  const farmsList = useCallback(\n    (farmsToDisplay: DeserializedFarm[]): FarmWithStakedValue[] => {\n      let farmsToDisplayWithAPR: FarmWithStakedValue[] = farmsToDisplay.map((farm) => {\n        if (!farm.lpTotalInQuoteToken || !farm.quoteTokenPriceBusd) {\n          return farm\n        }\n        const totalLiquidity = new BigNumber(farm.lpTotalInQuoteToken).times(farm.quoteTokenPriceBusd)\n        const { cakeRewardsApr, lpRewardsApr } = isActive\n          ? getFarmApr(new BigNumber(farm.poolWeight), farm.crowPerBlock, cakePrice, totalLiquidity, farm.lpAddresses[parseInt(process.env.REACT_APP_CHAIN_ID, 10)])\n          : { cakeRewardsApr: 0, lpRewardsApr: 0 }\n\n        return { ...farm, apr: cakeRewardsApr, lpRewardsApr, liquidity: totalLiquidity }\n      })\n\n      if (query) {\n        const lowercaseQuery = latinise(query.toLowerCase())\n        farmsToDisplayWithAPR = farmsToDisplayWithAPR.filter((farm: FarmWithStakedValue) => {\n          return latinise(farm.lpSymbol.toLowerCase()).includes(lowercaseQuery)\n        })\n      }\n      return farmsToDisplayWithAPR\n    },\n    [cakePrice, query, isActive],\n  )\n\n  const handleChangeQuery = (event: React.ChangeEvent<HTMLInputElement>) => {\n    setQuery(event.target.value)\n  }\n\n  const [numberOfFarmsVisible, setNumberOfFarmsVisible] = useState(NUMBER_OF_FARMS_VISIBLE)\n\n  const chosenFarmsMemoized = useMemo(() => {\n    let chosenFarms = []\n\n    const sortFarms = (farms: FarmWithStakedValue[]): FarmWithStakedValue[] => {\n      switch (sortOption) {\n        case 'apr':\n          return orderBy(farms, (farm: FarmWithStakedValue) => farm.apr + farm.lpRewardsApr, 'desc')\n        case 'multiplier':\n          return orderBy(\n            farms,\n            (farm: FarmWithStakedValue) => (farm.multiplier ? Number(farm.multiplier.slice(0, -1)) : 0),\n            'desc',\n          )\n        case 'earned':\n          return orderBy(\n            farms,\n            (farm: FarmWithStakedValue) => (farm.userData ? Number(farm.userData.earnings) : 0),\n            'desc',\n          )\n        case 'liquidity':\n          return orderBy(farms, (farm: FarmWithStakedValue) => Number(farm.liquidity), 'desc')\n        default:\n          return farms\n      }\n    }\n\n    if (isActive) {\n      chosenFarms = stakedOnly ? farmsList(stakedOnlyFarms) : farmsList(activeFarms)\n    }\n    if (isInactive) {\n      chosenFarms = stakedOnly ? farmsList(stakedInactiveFarms) : farmsList(inactiveFarms)\n    }\n    if (isArchived) {\n      chosenFarms = stakedOnly ? farmsList(stakedArchivedFarms) : farmsList(archivedFarms)\n    }\n\n    return sortFarms(chosenFarms).slice(0, numberOfFarmsVisible)\n  }, [\n    sortOption,\n    activeFarms,\n    farmsList,\n    inactiveFarms,\n    archivedFarms,\n    isActive,\n    isInactive,\n    isArchived,\n    stakedArchivedFarms,\n    stakedInactiveFarms,\n    stakedOnly,\n    stakedOnlyFarms,\n    numberOfFarmsVisible,\n  ])\n\n  chosenFarmsLength.current = chosenFarmsMemoized.length\n\n  useEffect(() => {\n    if (isIntersecting) {\n      setNumberOfFarmsVisible((farmsCurrentlyVisible) => {\n        if (farmsCurrentlyVisible <= chosenFarmsLength.current) {\n          return farmsCurrentlyVisible + NUMBER_OF_FARMS_VISIBLE\n        }\n        return farmsCurrentlyVisible\n      })\n    }\n  }, [isIntersecting])\n\n  const rowData = chosenFarmsMemoized.map((farm) => {\n    const { token, quoteToken } = farm\n    const tokenAddress = token.address\n    const quoteTokenAddress = quoteToken.address\n    const lpLabel = farm.lpSymbol && farm.lpSymbol.split(' ')[0].toUpperCase().replace('PANCAKE', '')\n\n    const row: RowProps = {\n      apr: {\n        value: getDisplayApr(farm.apr, farm.lpRewardsApr),\n        pid: farm.pid,\n        multiplier: farm.multiplier,\n        lpLabel,\n        lpSymbol: farm.lpSymbol,\n        tokenAddress,\n        quoteTokenAddress,\n        cakePrice,\n        originalValue: farm.apr,\n      },\n      farm: {\n        label: lpLabel,\n        pid: farm.pid,\n        token: farm.token,\n        quoteToken: farm.quoteToken,\n      },\n      earned: {\n        earnings: getBalanceNumber(new BigNumber(farm.userData.earnings)),\n        pid: farm.pid,\n      },\n      liquidity: {\n        liquidity: farm.liquidity,\n      },\n      multiplier: {\n        multiplier: farm.multiplier,\n      },\n      details: farm,\n    }\n\n    return row\n  })\n\n  const renderContent = (): JSX.Element => {\n    if (viewMode === ViewMode.CARD && rowData.length) {\n      const columnSchema = DesktopColumnSchema\n\n      const columns = columnSchema.map((column) => ({\n        id: column.id,\n        name: column.name,\n        label: column.label,\n        sort: (a: RowType<RowProps>, b: RowType<RowProps>) => {\n          switch (column.name) {\n            case 'farm':\n              return b.id - a.id\n            case 'apr':\n              if (a.original.apr.value && b.original.apr.value) {\n                return Number(a.original.apr.value) - Number(b.original.apr.value)\n              }\n\n              return 0\n            case 'earned':\n              return a.original.earned.earnings - b.original.earned.earnings\n            default:\n              return 1\n          }\n        },\n        sortable: column.sortable,\n      }))\n\n      return <Table data={rowData} columns={columns} userDataReady={userDataReady} />\n    }\n\n    return (\n      <FlexLayout>\n        <Route exact path={`${path}`}>\n          {chosenFarmsMemoized.map((farm) => (\n            <FarmCard\n              key={farm.pid}\n              farm={farm}\n              displayApr={getDisplayApr(farm.apr, farm.lpRewardsApr)}\n              cakePrice={cakePrice}\n              account={account}\n              removed={false}\n            />\n          ))}\n        </Route>\n        <Route exact path={`${path}/history`}>\n          {chosenFarmsMemoized.map((farm) => (\n            <FarmCard\n              key={farm.pid}\n              farm={farm}\n              displayApr={getDisplayApr(farm.apr, farm.lpRewardsApr)}\n              cakePrice={cakePrice}\n              account={account}\n              removed\n            />\n          ))}\n        </Route>\n        <Route exact path={`${path}/archived`}>\n          {chosenFarmsMemoized.map((farm) => (\n            <FarmCard\n              key={farm.pid}\n              farm={farm}\n              displayApr={getDisplayApr(farm.apr, farm.lpRewardsApr)}\n              cakePrice={cakePrice}\n              account={account}\n              removed\n            />\n          ))}\n        </Route>\n      </FlexLayout>\n    )\n  }\n\n  const handleSortOptionChange = (option: OptionProps): void => {\n    setSortOption(option.value)\n  }\n\n  return (\n    <>\n      {/* <PageHeader>\n        <Heading as=\"h1\" scale=\"xxl\" color=\"secondary\" mb=\"24px\">\n          {t('Farms')}\n        </Heading>\n        <Heading scale=\"lg\" color=\"text\">\n          {t('Stake LP tokens to earn.')}\n        </Heading>\n        <NavLink exact activeClassName=\"active\" to=\"/farms/auction\" id=\"lottery-pot-banner\">\n          <Button p=\"0\" variant=\"text\">\n            <Text color=\"primary\" bold fontSize=\"16px\" mr=\"4px\">\n              {t('Community Auctions')}\n            </Text>\n            <ArrowForwardIcon color=\"primary\" />\n          </Button>\n        </NavLink>\n      </PageHeader> */}\n      <Page>\n        <ControlContainer>\n          <ViewControls>\n            <ToggleView viewMode={viewMode} onToggle={(mode: ViewMode) => setViewMode(mode)} />\n            <ToggleWrapper>\n              <Toggle\n                id=\"staked-only-farms\"\n                checked={stakedOnly}\n                onChange={() => setStakedOnly(!stakedOnly)}\n                scale=\"sm\"\n              />\n              <Text> {t('Staked only')}</Text>\n            </ToggleWrapper>\n            <FarmTabButtons hasStakeInFinishedFarms={stakedInactiveFarms.length > 0} />\n          </ViewControls>\n          {/* <FilterContainer>\n            <LabelWrapper>\n              <Text textTransform=\"uppercase\">{t('Sort by')}</Text>\n              <Select\n                options={[\n                  {\n                    label: t('Hot'),\n                    value: 'hot',\n                  },\n                  {\n                    label: t('APR'),\n                    value: 'apr',\n                  },\n                  {\n                    label: t('Multiplier'),\n                    value: 'multiplier',\n                  },\n                  {\n                    label: t('Earned'),\n                    value: 'earned',\n                  },\n                  {\n                    label: t('Liquidity'),\n                    value: 'liquidity',\n                  },\n                ]}\n                onOptionChange={handleSortOptionChange}\n              />\n            </LabelWrapper>\n            <LabelWrapper style={{ marginLeft: 16 }}>\n              <Text textTransform=\"uppercase\">{t('Search')}</Text>\n              <SearchInput onChange={handleChangeQuery} placeholder=\"Search Farms\" />\n            </LabelWrapper>\n          </FilterContainer> */}\n        </ControlContainer>\n        {renderContent()}\n        {account && !userDataLoaded && stakedOnly && (\n          <Flex justifyContent=\"center\">\n            <Loading />\n          </Flex>\n        )}\n        <div ref={observerRef} />\n        {/* <StyledImage src=\"/images/decorations/3dpan.png\" alt=\"Pancake illustration\" width={120} height={103} /> */}\n      </Page>\n    </>\n  )\n}\n\nexport default Farms\n"],"sourceRoot":""}