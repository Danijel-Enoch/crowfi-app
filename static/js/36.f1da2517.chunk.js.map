{"version":3,"sources":["components/Modal/Spacer.tsx","components/Modal/ModalActions.tsx","components/Modal/ModalInput.tsx","views/PrivateSales/components/PrivateSaleRow.tsx","state/privatesales/hooks.ts","views/PrivateSales/hooks/useBuySale.ts","views/PrivateSales/components/NumericalInput.tsx","views/PrivateSales/components/PSPriceInput.tsx","views/PrivateSales/hooks/useApproveJoinSale.ts","views/PrivateSales/components/PrivateSaleBuyCard.tsx","views/PrivateSales/components/PSClaimInput.tsx","views/PrivateSales/hooks/useApproveClaimSale.ts","views/PrivateSales/hooks/useClaimSale.ts","views/PrivateSales/components/PrivateSaleClaimCard.tsx","views/PrivateSales/PrivateSales.tsx"],"names":["StyledSpacer","styled","div","props","size","Spacer","s","spacing","useContext","ThemeContext","StyledModalActions","theme","colors","primaryDark","StyledModalAction","ModalActions","children","l","React","Children","toArray","length","map","child","i","StyledTokenInput","input","isWarning","shadows","warning","inset","text","StyledInput","Input","mediaQueries","xs","sm","StyledErrorMessage","Text","ModalInput","max","symbol","onChange","onSelectMax","value","addLiquidityUrl","inputTitle","decimals","t","useTranslation","isBalanceZero","style","position","justifyContent","pl","fontSize","balance","balanceUnits","parseUnits","formatBigNumber","displayBalance","alignItems","pattern","inputMode","step","min","placeholder","scale","onClick","mr","color","bold","href","external","SaleStatus","deserializePrivateSale","privatesale","sale","type","manager","price","name","startDate","endDate","claimStartDate","claimEndDate","claimDays","claimPercents","tempToken","deserializeToken","quoteToken","Date","undefined","startBlock","BigNumber","BIG_ZERO","endBlock","claimStartBlock","claimEndBlock","userData","tempAllowance","quoteAllowance","purchasedBalance","claimableBalance","claimedBalance","useBuySale","managerAddress","pvSaleMgr","usePrivateSaleManager","handleBuy","useCallback","amount","a","buySale","onBuy","error","failure","align","textSubtle","inputRegex","RegExp","memo","onUserInput","rest","event","nextUserInput","target","replace","test","escapeRegExp","title","autoComplete","autoCorrect","minLength","maxLength","spellCheck","PSPriceInput","enabled","tooLow","parseFloat","tooMuch","usdPrice","Number","isNaN","disabled","className","useApproveJoinSale","token","callWithGasPrice","useCallWithGasPrice","onApprove","ethers","constants","MaxUint256","tx","wait","receipt","status","StyledCard","Card","Wrapper","PrivateSaleBuyCard","account","useState","val","setVal","useToast","toastError","toastSuccess","requestedApproval","setRequestedApproval","isApproved","isGreaterThan","pendingTx","setPendingTx","dispatch","useAppDispatch","fullBalance","useMemo","getFullDisplayBalance","valNumber","fullBalanceNumber","useERC20","address","getAddress","handleApprove","fetchPrivateSalesUserDataAsync","types","console","handleChange","App","subtitle","getBalanceNumber","noConfig","gap","Modal","isFinite","eq","gt","width","mt","ConnectWalletButton","PSClaimInput","ml","useApproveClaimSale","useClaimSale","handleClaim","claimSale","onClaim","PrivateSaleClaimCard","handleSelectMax","toString","StyledWrapper","Flex","SectionWrapper","md","PrivateSaleRow","NOT_STARTED","setStatus","useEffect","now","getTime","status_","EXPIRED","CLAIMING","ENDED","ACTIVE","flexDirection","flex","mb","toDateString","PrivateSales","sales","useSelector","state","privatesales","deserializedPrivateSalesData","data","loadArchivedData","userDataLoaded","usePrivateSales","privateSales","useWeb3React","includeArchive","slowRefresh","useRefresh","privatesalesConfig","saleToFetch","fetchPrivateSalesPublicDataAsync","usePollPrivateSalesPublicData","usePollPrivateSalesWithUserData","Page","filter"],"mappings":"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","file":"static/js/36.f1da2517.chunk.js","sourcesContent":["import React, { useContext } from 'react'\nimport styled, { ThemeContext } from 'styled-components'\n\ninterface SpacerProps {\n  size?: 'sm' | 'md' | 'lg'\n}\n\nconst Spacer: React.FC<SpacerProps> = ({ size = 'md' }) => {\n  const { spacing } = useContext(ThemeContext)\n\n  let s: number\n  switch (size) {\n    case 'lg':\n      s = spacing[6]\n      break\n    case 'sm':\n      s = spacing[2]\n      break\n    case 'md':\n    default:\n      s = spacing[4]\n  }\n\n  return <StyledSpacer size={s} />\n}\n\ninterface StyledSpacerProps {\n  size: number\n}\n\nconst StyledSpacer = styled.div<StyledSpacerProps>`\n  height: ${(props) => props.size}px;\n  width: ${(props) => props.size}px;\n`\n\nexport default Spacer\n","import React from 'react'\nimport styled from 'styled-components'\nimport Spacer from './Spacer'\n\nconst ModalActions: React.FC = ({ children }) => {\n  const l = React.Children.toArray(children).length\n  return (\n    <StyledModalActions>\n      {React.Children.map(children, (child, i) => (\n        <>\n          <StyledModalAction>{child}</StyledModalAction>\n          {i < l - 1 && <Spacer />}\n        </>\n      ))}\n    </StyledModalActions>\n  )\n}\n\nconst StyledModalActions = styled.div`\n  align-items: center;\n  background-color: ${(props) => props.theme.colors.primaryDark}00;\n  display: flex;\n  margin: 0;\n  padding: ${(props) => props.theme.spacing[4]}px 0;\n`\n\nconst StyledModalAction = styled.div`\n  flex: 1;\n`\n\nexport default ModalActions\n","import React from 'react'\nimport styled from 'styled-components'\nimport { Text, Button, Input, InputProps, Flex, Link } from '@pancakeswap/uikit'\nimport { useTranslation } from 'contexts/Localization'\nimport { parseUnits } from 'ethers/lib/utils'\nimport { formatBigNumber } from 'utils/formatBalance'\n\ninterface ModalInputProps {\n  max: string\n  symbol: string\n  onSelectMax?: () => void\n  onChange: (e: React.FormEvent<HTMLInputElement>) => void\n  placeholder?: string\n  value: string\n  addLiquidityUrl?: string\n  inputTitle?: string\n  decimals?: number\n}\n\nconst getBoxShadow = ({ isWarning = false, theme }) => {\n  if (isWarning) {\n    return theme.shadows.warning\n  }\n\n  return theme.shadows.inset\n}\n\nconst StyledTokenInput = styled.div<InputProps>`\n  display: flex;\n  flex-direction: column;\n  background-color: ${({ theme }) => theme.colors.input};\n  border-radius: 16px;\n  box-shadow: ${getBoxShadow};\n  color: ${({ theme }) => theme.colors.text};\n  padding: 8px 16px 8px 0;\n  width: 100%;\n`\n\nconst StyledInput = styled(Input)`\n  box-shadow: none;\n  width: 60px;\n  margin: 0 8px;\n  padding: 0 8px;\n  border: none;\n\n  ${({ theme }) => theme.mediaQueries.xs} {\n    width: 80px;\n  }\n\n  ${({ theme }) => theme.mediaQueries.sm} {\n    width: auto;\n  }\n`\n\nconst StyledErrorMessage = styled(Text)`\n  position: absolute;\n  bottom: -22px;\n  a {\n    display: inline;\n  }\n`\n\nconst ModalInput: React.FC<ModalInputProps> = ({\n  max,\n  symbol,\n  onChange,\n  onSelectMax,\n  value,\n  addLiquidityUrl,\n  inputTitle,\n  decimals = 18,\n}) => {\n  const { t } = useTranslation()\n  const isBalanceZero = max === '0' || !max\n\n  const displayBalance = (balance: string) => {\n    if (isBalanceZero) {\n      return '0'\n    }\n\n    const balanceUnits = parseUnits(balance, decimals)\n    return formatBigNumber(balanceUnits, decimals, decimals)\n  }\n\n  return (\n    <div style={{ position: 'relative' }}>\n      <StyledTokenInput isWarning={isBalanceZero}>\n        <Flex justifyContent=\"space-between\" pl=\"16px\">\n          <Text fontSize=\"14px\">{inputTitle}</Text>\n          <Text fontSize=\"14px\">{t('Balance: %balance%', { balance: displayBalance(max) })}</Text>\n        </Flex>\n        <Flex alignItems=\"flex-end\" justifyContent=\"space-around\">\n          <StyledInput\n            pattern={`^[0-9]*[.,]?[0-9]{0,${decimals}}$`}\n            inputMode=\"decimal\"\n            step=\"any\"\n            min=\"0\"\n            onChange={onChange}\n            placeholder=\"0\"\n            value={value}\n          />\n          <Button scale=\"sm\" onClick={onSelectMax} mr=\"8px\">\n            {t('Max')}\n          </Button>\n          <Text fontSize=\"16px\">{symbol}</Text>\n        </Flex>\n      </StyledTokenInput>\n      {isBalanceZero && (\n        <StyledErrorMessage fontSize=\"14px\" color=\"failure\">\n          {t('No tokens to stake')}:{' '}\n          <Link fontSize=\"14px\" bold={false} href={addLiquidityUrl} external color=\"failure\">\n            {t('Get %symbol%', { symbol })}\n          </Link>\n        </StyledErrorMessage>\n      )}\n    </div>\n  )\n}\n\nexport default ModalInput\n","import React, { useState, useEffect } from 'react'\nimport BigNumber from 'bignumber.js'\nimport styled from 'styled-components'\nimport { Card, Flex, Text, Skeleton, Heading } from '@pancakeswap/uikit'\nimport { DeserializedPrivateSale } from 'state/types'\nimport { getBalanceAmount, getBalanceNumber } from 'utils/formatBalance'\nimport { useTranslation } from 'contexts/Localization'\nimport PrivateSaleBuyCard from './PrivateSaleBuyCard'\nimport PrivateSaleClaimCard from './PrivateSaleClaimCard'\n\n\nconst StyledWrapper= styled(Flex)`\n`\nconst SectionWrapper = styled(Flex)`\n  padding: 20px 10px;\n  ${({ theme }) => theme.mediaQueries.md} {\n    padding: 20px 40px;\n  }\n`\n\ninterface PrivateSaleRowProps {\n  sale: DeserializedPrivateSale\n  account?: string\n}\n\nenum SaleStatus {\n  NOT_STARTED,\n  ACTIVE,\n  ENDED,\n  CLAIMING,\n  EXPIRED\n}\n\nconst PrivateSaleRow: React.FC<PrivateSaleRowProps> = ({ sale, account }) => {\n  const { t } = useTranslation()\n  const [status, setStatus] = useState(SaleStatus.NOT_STARTED)\n\n  useEffect(() => {\n    const now = new Date().getTime()\n    let status_ = SaleStatus.NOT_STARTED\n    if (sale.claimEndDate?.getTime() < now) {\n      status_ = SaleStatus.EXPIRED\n    } else if (sale.claimStartDate?.getTime() <= now) {\n      status_ = SaleStatus.CLAIMING\n    } else if (sale.endDate?.getTime() < now) {\n      status_ = SaleStatus.ENDED\n    } else if (sale.startDate?.getTime() < now) {\n      status_ = SaleStatus.ACTIVE\n    }\n    setStatus(status_)\n  }, [sale])\n\n  return (\n      <StyledWrapper flexDirection={['column', 'column', 'column', 'row']}>\n        <SectionWrapper flexDirection=\"column\" style={{flex:1}} justifyContent=\"center\">\n          <Heading scale=\"lg\" color=\"primary\" mb=\"24px\">\n          {sale.name}\n          </Heading>\n          <Text fontSize=\"16px\">\n            {t('Join the CrowFi Private Sales and get tokens at a cheaper price.')}\n          </Text>\n          { \n            status === SaleStatus.NOT_STARTED ?  \n            (\n              <Text fontSize=\"16px\">\n                {t('It starts on')}&nbsp;{sale.startDate?.toDateString()}, listing price ${sale.price}\n              </Text>\n            )\n            : status === SaleStatus.ACTIVE ?  \n            (\n              <Text fontSize=\"16px\">\n                {t('It ends on')}&nbsp;{sale.endDate?.toDateString()}, listing price ${sale.price}\n              </Text>\n            )\n            : status === SaleStatus.ENDED ?  \n            (\n              <Text fontSize=\"16px\">\n                {t('All sold and claim will be start on')}&nbsp;{sale.claimStartDate?.toDateString()}\n              </Text>\n            )\n            : status === SaleStatus.CLAIMING ?  \n            (\n              <Text fontSize=\"16px\">\n                {t('Claim will be end on ')}&nbsp;{sale.claimEndDate?.toDateString()}\n              </Text>\n            )\n            : \n            (\n              <Text fontSize=\"16px\">\n                {t('All sold and claim ended. If you did not claim your tokens, contact us with your wallet address')}\n              </Text>\n            )\n          }\n\n          { status !== SaleStatus.NOT_STARTED && sale.userData?.purchasedBalance.eq(0) && (\n            <Text fontSize=\"14px\" color=\"secondary\">\n            {t('No tokens purchased.')}\n            </Text>\n          )}\n          { status !== SaleStatus.NOT_STARTED && sale.userData?.purchasedBalance.gt(0) && (\n            <Text fontSize=\"14px\" color=\"secondary\">\n              {t('You purchased %amount% CROW for this sale', {amount: getBalanceNumber(sale.userData?.purchasedBalance)})}\n            </Text>\n          )}\n          { status !== SaleStatus.NOT_STARTED && sale.userData?.claimedBalance.gt(0) && (\n            <Text fontSize=\"14px\" color=\"secondary\">\n              {t('You claimed %amount% CROW for this sale', {amount: getBalanceNumber(sale.userData?.claimedBalance)})}\n            </Text>\n          )}\n          { status !== SaleStatus.NOT_STARTED && sale.userData?.claimableBalance.gt(0) && (\n            <Text fontSize=\"14px\" color=\"secondary\">\n              {t('You can claim %amount% CROW now', {amount: getBalanceNumber(sale.userData?.claimableBalance)})}\n            </Text>\n          )}\n        </SectionWrapper>\n        <SectionWrapper justifyContent=\"center\" alignItems=\"center\">\n          {/* <PrivateSaleBuyCard sale={sale} /> */}\n          { (status === SaleStatus.CLAIMING || status === SaleStatus.ENDED) && (\n            <PrivateSaleClaimCard account={account} sale={sale} enabled={status === SaleStatus.CLAIMING}/>\n          )}\n          { (status === SaleStatus.ACTIVE  || status === SaleStatus.NOT_STARTED) && (\n            <PrivateSaleBuyCard account={account} sale={sale} enabled={status === SaleStatus.ACTIVE} />\n          )}\n          \n        </SectionWrapper>\n        \n\n      </StyledWrapper>\n  )\n}\n\nexport default PrivateSaleRow\n","import { useEffect, useMemo } from 'react'\nimport { useSelector } from 'react-redux'\nimport { useAppDispatch } from 'state'\nimport { useWeb3React } from '@web3-react/core'\nimport BigNumber from 'bignumber.js'\nimport { BIG_ZERO } from 'utils/bigNumber'\nimport { getBalanceAmount } from 'utils/formatBalance'\nimport { privatesalesConfig } from 'config/constants'\nimport useRefresh from 'hooks/useRefresh'\nimport { deserializeToken } from 'state/user/hooks/helpers'\nimport { PrivateSaleType } from 'config/constants/types'\nimport { fetchPrivateSalesPublicDataAsync, fetchPrivateSalesUserDataAsync } from '.'\nimport { State, SerializedPrivateSale, DeserializedPrivateSaleUserData, DeserializedPrivateSale, DeserializedPrivateSalesState } from '../types'\n\nconst deserializePrivateSaleUserData = (sale: SerializedPrivateSale): DeserializedPrivateSaleUserData => {\n  return {\n    tempAllowance: sale.userData ? new BigNumber(sale.userData.tempAllowance) : BIG_ZERO,\n    quoteAllowance: sale.userData ? new BigNumber(sale.userData.quoteAllowance) : BIG_ZERO,\n    purchasedBalance: sale.userData ? new BigNumber(sale.userData.purchasedBalance) : BIG_ZERO,\n    claimableBalance: sale.userData ? new BigNumber(sale.userData.claimableBalance) : BIG_ZERO,\n    claimedBalance: sale.userData ? new BigNumber(sale.userData.claimedBalance) : BIG_ZERO,\n  }\n}\n\nconst deserializePrivateSale = (privatesale: SerializedPrivateSale): DeserializedPrivateSale => {\n  const { type, manager, price, name, startDate, endDate, claimStartDate, claimEndDate, claimDays, claimPercents } = privatesale\n\n  return {\n    type,\n    manager,\n    tempToken: deserializeToken(privatesale.tempToken),\n    quoteToken: deserializeToken(privatesale.quoteToken),\n    price,\n    name,\n    startDate: startDate? new Date(startDate * 1000) : undefined,\n    endDate: endDate? new Date(endDate * 1000) : undefined,\n    claimStartDate: claimStartDate ? new Date(claimStartDate * 1000) : undefined,\n    claimEndDate: claimEndDate ? new Date(claimEndDate * 1000) : undefined,\n    startBlock: privatesale.startBlock ? new BigNumber(privatesale.startBlock) : BIG_ZERO,\n    endBlock: privatesale.endBlock ? new BigNumber(privatesale.endBlock) : BIG_ZERO,\n    claimStartBlock: privatesale.claimStartBlock ? new BigNumber(privatesale.claimStartBlock) : BIG_ZERO,\n    claimEndBlock: privatesale.claimEndBlock ? new BigNumber(privatesale.claimEndBlock) : BIG_ZERO,\n    claimDays,\n    claimPercents,\n    userData: deserializePrivateSaleUserData(privatesale),\n  }\n}\n\nexport const usePollPrivateSalesPublicData = (includeArchive = false) => {\n  const dispatch = useAppDispatch()\n  const { slowRefresh } = useRefresh()\n\n  useEffect(() => {\n    const types = privatesalesConfig.map((saleToFetch) => saleToFetch.type)\n\n    dispatch(fetchPrivateSalesPublicDataAsync(types))\n  }, [includeArchive, dispatch, slowRefresh])\n}\n\nexport const usePollPrivateSalesWithUserData = (includeArchive = false) => {\n  const dispatch = useAppDispatch()\n  const { slowRefresh } = useRefresh()\n  const { account } = useWeb3React()\n  useEffect(() => {\n    const types = privatesalesConfig.map((saleToFetch) => saleToFetch.type)\n\n    dispatch(fetchPrivateSalesPublicDataAsync(types))\n\n    if (account) {\n      dispatch(fetchPrivateSalesUserDataAsync({ account, types }))\n    }\n  }, [dispatch, slowRefresh, account])\n}\n\nexport const usePrivateSales = (): DeserializedPrivateSalesState => {\n  const sales = useSelector((state: State) => state.privatesales)\n  const deserializedPrivateSalesData = sales.data.map(deserializePrivateSale)\n  const { loadArchivedData, userDataLoaded } = sales\n  return {\n    loadArchivedData,\n    userDataLoaded,\n    data: deserializedPrivateSalesData,\n  }\n}\n\nexport const usePrivateSaleFromType = (type: PrivateSaleType): DeserializedPrivateSale => {\n  const sale = useSelector((state: State) => state.privatesales.data.find((f) => f.type === type))\n  return deserializePrivateSale(sale)\n}\n\nexport const usePrivateSaleUser = (type): DeserializedPrivateSaleUserData => {\n  const { userData } = usePrivateSaleFromType(type)\n  const { tempAllowance, quoteAllowance, purchasedBalance, claimedBalance, claimableBalance } = userData\n  return {\n    tempAllowance, quoteAllowance, purchasedBalance, claimedBalance, claimableBalance\n  }\n}\n","import { useCallback } from 'react'\nimport { buySale } from 'utils/calls'\nimport { usePrivateSaleManager } from 'hooks/useContract'\n\nconst useBuySale = (managerAddress: string) => {\n  const pvSaleMgr = usePrivateSaleManager(managerAddress)\n\n  const handleBuy = useCallback(async (amount: string) => {\n    await buySale(pvSaleMgr, amount)\n  }, [pvSaleMgr])\n\n  return { onBuy: handleBuy }\n}\n\nexport default useBuySale\n","import React from 'react'\nimport styled from 'styled-components'\nimport { useTranslation } from 'contexts/Localization'\nimport { escapeRegExp } from '../../../utils'\n\nconst StyledInput = styled.input<{ error?: boolean; fontSize?: string; align?: string }>`\n  color: ${({ error, theme }) => (error ? theme.colors.failure : theme.colors.text)};\n  width: 0;\n  position: relative;\n  font-weight: 500;\n  outline: none;\n  border: none;\n  flex: 1 1 auto;\n  background-color: transparent;\n  font-size: 16px;\n  text-align: ${({ align }) => align && align};\n  white-space: nowrap;\n  overflow: hidden;\n  text-overflow: ellipsis;\n  padding: 0px;\n  -webkit-appearance: textfield;\n\n  ::-webkit-search-decoration {\n    -webkit-appearance: none;\n  }\n\n  [type='number'] {\n    -moz-appearance: textfield;\n  }\n\n  ::-webkit-outer-spin-button,\n  ::-webkit-inner-spin-button {\n    -webkit-appearance: none;\n  }\n\n  ::placeholder {\n    color: ${({ theme }) => theme.colors.textSubtle};\n  }\n\n  :disabled {\n    cursor:not-allowed;\n  }\n`\n\nconst inputRegex = RegExp(`^\\\\d*(?:\\\\\\\\[.])?\\\\d*$`) // match escaped \".\" characters via in a non-capturing group\n\nexport const Input = React.memo(function InnerInput({\n  value,\n  onUserInput,\n  placeholder,\n  ...rest\n}: {\n  value: string | number\n  onUserInput: (input: string) => void\n  error?: boolean\n  fontSize?: string\n  align?: 'right' | 'left'\n} & Omit<React.HTMLProps<HTMLInputElement>, 'ref' | 'onChange' | 'as'>) {\n  const enforcer = (nextUserInput: string) => {\n    if (nextUserInput === '' || inputRegex.test(escapeRegExp(nextUserInput))) {\n      onUserInput(nextUserInput)\n    }\n  }\n\n  const { t } = useTranslation()\n\n  return (\n    <StyledInput\n      {...rest}\n      value={value}\n      onChange={(event) => {\n        // replace commas with periods, because we exclusively uses period as the decimal separator\n        enforcer(event.target.value.replace(/,/g, '.'))\n      }}\n      // universal input options\n      inputMode=\"decimal\"\n      title={t('Token Amount')}\n      autoComplete=\"off\"\n      autoCorrect=\"off\"\n      // text-specific options\n      type=\"text\"\n      pattern=\"^[0-9]*[.,]?[0-9]*$\"\n      placeholder={placeholder || '0.0'}\n      minLength={1}\n      maxLength={79}\n      spellCheck=\"false\"\n    />\n  )\n})\n\nexport default Input\n","import React from 'react'\nimport styled from 'styled-components'\nimport { Text, Button, Input, InputProps, Flex, Link } from '@pancakeswap/uikit'\nimport { useTranslation } from 'contexts/Localization'\nimport { parseUnits } from 'ethers/lib/utils'\nimport { formatBigNumber } from 'utils/formatBalance'\nimport { Input as NumericalInput } from './NumericalInput'\n\ninterface PSPriceInputProps {\n  enabled: boolean\n  price: number\n  max: string\n  symbol: string\n  onChange: (string) => void\n  value: string\n}\n\nconst getBoxShadow = ({ isWarning = false, theme }) => {\n  if (isWarning) {\n    return theme.shadows.warning\n  }\n\n  return theme.shadows.inset\n}\n\nconst StyledTokenInput = styled.div<InputProps>`\n  display: flex;\n  flex-direction: column;\n  background-color: ${({ theme }) => theme.colors.input};\n  border-radius: 16px;\n  box-shadow: ${getBoxShadow};\n  color: ${({ theme }) => theme.colors.text};\n  padding: 8px 16px 8px 0;\n  width: 100%;\n  min-width: 300px;\n`\n\nconst StyledInput = styled(Input)`\n  box-shadow: none;\n  width: 60px;\n  margin: 0 8px;\n  padding: 0 8px;\n  border: none;\n\n  ${({ theme }) => theme.mediaQueries.xs} {\n    width: 80px;\n  }\n\n  ${({ theme }) => theme.mediaQueries.sm} {\n    width: auto;\n  }\n`\n\nconst StyledErrorMessage = styled(Text)`\n  position: absolute;\n  bottom: -22px;\n  a {\n    display: inline;\n  }\n`\n\nconst PSPriceInput: React.FC<PSPriceInputProps> = ({\n  enabled,\n  max,\n  price,\n  symbol,\n  onChange,\n  value,\n}) => {\n  const { t } = useTranslation()\n  const tooLow = value ? parseFloat(value) < 1e-3 : false\n  const tooMuch = value ? parseFloat(value) > parseFloat(max) : false\n  const usdPrice = Number.isNaN(parseFloat(value)) ? 0 : price * parseFloat(value)\n\n  return (\n    <div style={{ position: 'relative' }}>\n      <StyledTokenInput isWarning={tooLow || tooMuch}>\n        <Flex alignItems=\"flex-end\" justifyContent=\"space-around\" pl=\"16px\">\n          <NumericalInput\n            disabled={!enabled}\n            className=\"token-amount-input\"\n            value={value}\n            onUserInput={onChange}\n            align=\"right\"\n          />\n        </Flex>\n        <Flex justifyContent=\"right\" pl=\"16px\" alignItems=\"end\">\n          <Text fontSize=\"14px\">${usdPrice}</Text>\n          <Text fontSize=\"12px\">&nbsp;{'  USDC'}</Text>\n        </Flex>\n      </StyledTokenInput>\n      {tooLow && enabled && (\n        <StyledErrorMessage fontSize=\"14px\" color=\"failure\">\n          {t('Too small to buy')}\n        </StyledErrorMessage>\n      )}\n      {tooMuch && enabled && (\n        <StyledErrorMessage fontSize=\"14px\" color=\"failure\">\n          {t('At most ')}{max}&nbsp;{symbol}\n        </StyledErrorMessage>\n      )}\n    </div>\n  )\n}\n\nexport default PSPriceInput\n","import { useCallback } from 'react'\nimport { ethers, Contract } from 'ethers'\nimport { useMasterchef } from 'hooks/useContract'\nimport { useCallWithGasPrice } from 'hooks/useCallWithGasPrice'\n\nconst useApproveJoinSale = (token: Contract, manager: string) => {\n  const { callWithGasPrice } = useCallWithGasPrice()\n  const handleApprove = useCallback(async () => {\n    const tx = await callWithGasPrice(token, 'approve', [manager, ethers.constants.MaxUint256])\n    const receipt = await tx.wait()\n    return receipt.status\n  }, [token, manager, callWithGasPrice])\n\n  return { onApprove: handleApprove }\n}\n\nexport default useApproveJoinSale\n","import BigNumber from 'bignumber.js'\nimport React, { useCallback, useMemo, useState } from 'react'\nimport styled from 'styled-components'\nimport { Card, Flex, Text, Skeleton, Heading, Button, Modal } from '@pancakeswap/uikit'\nimport { ModalActions, ModalInput } from 'components/Modal'\nimport ConnectWalletButton from 'components/ConnectWalletButton'\nimport { useTranslation } from 'contexts/Localization'\nimport { getFullDisplayBalance, getBalanceAmount, getBalanceNumber } from 'utils/formatBalance'\nimport { useAppDispatch } from 'state'\nimport { fetchPrivateSalesUserDataAsync } from 'state/privatesales'\nimport { DeserializedPrivateSale } from 'state/types'\nimport useToast from 'hooks/useToast'\nimport useApproveConfirmTransaction from 'hooks/useApproveConfirmTransaction'\nimport { useERC20 } from 'hooks/useContract'\nimport { getAddress } from 'utils/addressHelpers'\nimport useBuySale from '../hooks/useBuySale'\nimport { AppHeader, AppBody } from '../../../components/App'\nimport Column, { AutoColumn } from '../../../components/Layout/Column'\nimport PSPriceInput from './PSPriceInput'\nimport useApproveJoinSale from '../hooks/useApproveJoinSale'\n\nconst StyledCard = styled(Card)`\n  align-self: baseline;\n`\n\nexport const Wrapper = styled.div`\n  position: relative;\n  padding: 1rem;\n`\n\ninterface PPrivateSaleBuyCardProps {\n  sale: DeserializedPrivateSale\n  enabled: boolean\n  account?: string\n}\n\nconst PrivateSaleBuyCard: React.FC<PPrivateSaleBuyCardProps> = ({ sale, enabled, account }) => {\n  const [val, setVal] = useState('')\n  const [max, setMax] = useState(new BigNumber(2500e18))\n  const { toastSuccess, toastError } = useToast()\n  const [requestedApproval, setRequestedApproval] = useState(false)\n  const { quoteAllowance } = sale.userData || {}\n  const isApproved = account && quoteAllowance && quoteAllowance.isGreaterThan(0)\n  const [pendingTx, setPendingTx] = useState(false)\n  const { t } = useTranslation()\n  const dispatch = useAppDispatch()\n  const fullBalance = useMemo(() => {\n    return getFullDisplayBalance(max)\n  }, [max])\n\n  const valNumber = new BigNumber(val)\n  const fullBalanceNumber = new BigNumber(fullBalance)\n\n  const quoteToken = useERC20(sale.quoteToken.address)\n  const { onApprove } = useApproveJoinSale(quoteToken, getAddress(sale.manager))\n  const { onBuy } = useBuySale(getAddress(sale.manager))\n\n  const handleApprove = useCallback(async () => {\n    try {\n      setRequestedApproval(true)\n      await onApprove()\n      dispatch(fetchPrivateSalesUserDataAsync({ account, types: [sale.type] }))\n    } catch (e) {\n      toastError(t('Error'), t('Please try again. Confirm the transaction and make sure you are paying enough gas!'))\n      console.error(e)\n    } finally {\n      setRequestedApproval(false)\n    }\n  }, [onApprove, dispatch, account, t, toastError, sale.type])\n\n  const handleChange = useCallback(\n    (value: string) => {\n      setVal(value)\n    },\n    [setVal],\n  )\n\n  const handleBuy = useCallback(async () => {\n    try {\n      setPendingTx(true)\n      await onBuy(val)\n      dispatch(fetchPrivateSalesUserDataAsync({ account, types: [sale.type] }))\n    } catch (e) {\n      toastError(t('Error'), t('Please try again. Confirm the transaction and make sure you are paying enough gas!'))\n      console.error(e)\n    } finally {\n      setPendingTx(false)\n    }\n  }, [onBuy, dispatch, account, t, toastError, sale.type, val])\n\n  const handleSelectMax = useCallback(() => {\n    setVal(fullBalance)\n  }, [fullBalance, setVal])\n\n  const renderApprovalOrBuyButton = () => {\n    return isApproved ? (\n      <Button\n        disabled={!enabled || pendingTx || !valNumber.isFinite() || valNumber.eq(0) || valNumber.gt(fullBalanceNumber)}\n        onClick={handleBuy}\n        width=\"100%\"\n      >\n        {pendingTx ? t('Processing...') : t('Buy')}\n      </Button>\n    ) : (\n      <Button mt=\"8px\" width=\"100%\" disabled={requestedApproval || !enabled} onClick={handleApprove}>\n        {t('Enable Contract')}\n      </Button>\n    )\n  }\n\n  return (\n      <StyledCard >\n        <AppHeader title={t('Buy with USDC')} subtitle={t('Your purchase : %amount% CROW', {amount: getBalanceNumber(sale.userData?.purchasedBalance)})} noConfig />\n        <Wrapper>\n          <AutoColumn gap=\"md\">\n            <PSPriceInput\n              enabled={enabled}\n              price={sale.price}\n              onChange={handleChange}\n              value={val}\n              max='2500'\n              symbol=\"CROW\"\n            />\n          </AutoColumn>\n          <ModalActions>\n            \n          {!account ? <ConnectWalletButton mt=\"8px\" width=\"100%\" /> : renderApprovalOrBuyButton()}\n          </ModalActions>\n        </Wrapper>\n\n      </StyledCard>\n  )\n}\n\nexport default PrivateSaleBuyCard\n","import React from 'react'\nimport styled from 'styled-components'\nimport { Text, Button, Input, InputProps, Flex, Link } from '@pancakeswap/uikit'\nimport { useTranslation } from 'contexts/Localization'\nimport { parseUnits } from 'ethers/lib/utils'\nimport { getFullDisplayBalance, getBalanceAmount, getBalanceNumber, formatBigNumber } from 'utils/formatBalance'\nimport BigNumber from 'bignumber.js'\nimport { Input as NumericalInput } from './NumericalInput'\n\ninterface PSClaimInputProps {\n  enabled:boolean\n  max?: BigNumber\n  symbol: string\n  onSelectMax?: () => void\n  onChange: (string) => void\n  placeholder?: string\n  value: string\n  inputTitle?: string\n  decimals?: number\n}\n\nconst getBoxShadow = ({ isWarning = false, theme }) => {\n  if (isWarning) {\n    return theme.shadows.warning\n  }\n\n  return theme.shadows.inset\n}\n\nconst StyledTokenInput = styled.div<InputProps>`\n  display: flex;\n  flex-direction: column;\n  background-color: ${({ theme }) => theme.colors.input};\n  border-radius: 16px;\n  box-shadow: ${getBoxShadow};\n  color: ${({ theme }) => theme.colors.text};\n  padding: 8px 16px 8px 0;\n  width: 100%;\n  min-width: 300px;\n`\n\nconst StyledErrorMessage = styled(Text)`\n  position: absolute;\n  bottom: -22px;\n  a {\n    display: inline;\n  }\n`\n\nconst PSClaimInput: React.FC<PSClaimInputProps> = ({\n  enabled = true,\n  max,\n  symbol,\n  onChange,\n  onSelectMax,\n  value,\n  inputTitle,\n  decimals = 18,\n}) => {\n  const { t } = useTranslation()\n  const isBalanceZero = !max || max.eq(0)\n  const displayBalance = (balance: string) => {\n    if (isBalanceZero) {\n      return '0'\n    }\n\n\n    const balanceUnits = parseUnits(balance, decimals)\n    \n    const res= formatBigNumber(balanceUnits, decimals, decimals)\n    return res\n  }\n\n  return (\n    <div style={{ position: 'relative' }}>\n      <StyledTokenInput isWarning={isBalanceZero && enabled}>\n        <Flex justifyContent=\"space-between\" pl=\"16px\">\n          <Text fontSize=\"14px\">{inputTitle}</Text>\n          <Text fontSize=\"14px\">{t('Balance: %balance%', { balance: getBalanceNumber(max) })}</Text>\n        </Flex>\n        <Flex alignItems=\"flex-end\" justifyContent=\"space-around\">\n          <Button scale=\"sm\" onClick={onSelectMax} ml=\"8px\">\n            {t('Max')}\n          </Button>\n          <NumericalInput\n            disabled={!enabled}\n            className=\"token-amount-input\"\n            value={value}\n            onUserInput={onChange}\n            align=\"right\"\n            placeholder=\"0\"\n          />\n          <Text fontSize=\"14px\">&nbsp;{symbol}</Text>\n        </Flex>\n      </StyledTokenInput>\n      {isBalanceZero && enabled && (\n        <StyledErrorMessage fontSize=\"14px\" color=\"failure\">\n          {t('No tokens to claim')}\n        </StyledErrorMessage>\n      )}\n    </div>\n  )\n}\n\nexport default PSClaimInput\n","import { useCallback } from 'react'\nimport { ethers, Contract } from 'ethers'\nimport { useMasterchef } from 'hooks/useContract'\nimport { useCallWithGasPrice } from 'hooks/useCallWithGasPrice'\n\nconst useApproveClaimSale = (token: Contract, manager: string) => {\n  const { callWithGasPrice } = useCallWithGasPrice()\n  const handleApprove = useCallback(async () => {\n    const tx = await callWithGasPrice(token, 'approve', [manager, ethers.constants.MaxUint256])\n    const receipt = await tx.wait()\n    return receipt.status\n  }, [token, manager, callWithGasPrice])\n\n  return { onApprove: handleApprove }\n}\n\nexport default useApproveClaimSale\n","import { useCallback } from 'react'\nimport { claimSale } from 'utils/calls'\nimport { usePrivateSaleManager } from 'hooks/useContract'\n\n\nconst useClaimSale = (managerAddress: string) => {\n  const pvSaleMgr = usePrivateSaleManager(managerAddress)\n\n  const handleClaim = useCallback(async (amount: string) => {\n    await claimSale(pvSaleMgr, amount)\n  }, [pvSaleMgr])\n\n  return { onClaim: handleClaim }\n}\n\nexport default useClaimSale\n","import BigNumber from 'bignumber.js'\nimport React, { useCallback, useMemo, useState } from 'react'\nimport styled from 'styled-components'\nimport { Card, Flex, Text, Skeleton, Heading, Button, Modal } from '@pancakeswap/uikit'\nimport { ModalActions, ModalInput } from 'components/Modal'\nimport ConnectWalletButton from 'components/ConnectWalletButton'\nimport { useTranslation } from 'contexts/Localization'\nimport { getFullDisplayBalance, getBalanceNumber } from 'utils/formatBalance'\nimport { useAppDispatch } from 'state'\nimport { fetchPrivateSalesUserDataAsync } from 'state/privatesales'\nimport { DeserializedPrivateSale } from 'state/types'\nimport useToast from 'hooks/useToast'\nimport { useERC20 } from 'hooks/useContract'\nimport { getAddress } from 'utils/addressHelpers'\nimport { AppHeader, AppBody } from '../../../components/App'\nimport Column, { AutoColumn } from '../../../components/Layout/Column'\nimport PSClaimInput from './PSClaimInput'\nimport useApproveClaimSale from '../hooks/useApproveClaimSale'\nimport useClaimSale from '../hooks/useClaimSale'\n\n\nconst StyledCard = styled(Card)`\n  align-self: baseline;\n`\n\nexport const Wrapper = styled.div`\n  position: relative;\n  padding: 1rem;\n`\n\ninterface PPrivateSaleBuyCardProps {\n  sale: DeserializedPrivateSale\n  account?: string\n  enabled: boolean\n}\n\nconst PrivateSaleClaimCard: React.FC<PPrivateSaleBuyCardProps> = ({ sale, account, enabled }) => {\n  const [val, setVal] = useState('')\n  const { toastSuccess, toastError } = useToast()\n  const [pendingTx, setPendingTx] = useState(false)\n  const [requestedApproval, setRequestedApproval] = useState(false)\n  const { tempAllowance } = sale.userData || {}\n  const isApproved = account && tempAllowance && tempAllowance.isGreaterThan(0)\n  const { t } = useTranslation()\n  const dispatch = useAppDispatch()\n  const fullBalance = useMemo(() => {\n    return sale.userData ? getFullDisplayBalance(sale.userData?.claimableBalance) : '0'\n  }, [sale.userData])\n\n  const valNumber = new BigNumber(val)\n  const fullBalanceNumber = new BigNumber(fullBalance)\n\n  const handleChange = useCallback(\n    (value: string) => {\n      setVal(value)\n    },\n    [setVal],\n  )\n\n  const handleSelectMax = useCallback(() => {\n    setVal(sale.userData ? getBalanceNumber(sale.userData?.claimableBalance).toString() : '0')\n  }, [sale.userData, setVal])\n\n  const quoteToken = useERC20(sale.tempToken.address)\n  const { onApprove } = useApproveClaimSale(quoteToken, getAddress(sale.manager))\n  const { onClaim } = useClaimSale(getAddress(sale.manager))\n\n  const handleApprove = useCallback(async () => {\n    try {\n      setRequestedApproval(true)\n      await onApprove()\n      dispatch(fetchPrivateSalesUserDataAsync({ account, types: [sale.type] }))\n    } catch (e) {\n      toastError(t('Error'), t('Please try again. Confirm the transaction and make sure you are paying enough gas!'))\n      console.error(e)\n    } finally {\n      setRequestedApproval(false)\n    }\n  }, [onApprove, dispatch, account, t, toastError, sale.type])\n\n  const handleClaim = useCallback(async () => {\n    try {\n      setPendingTx(true)\n      await onClaim(val)\n      dispatch(fetchPrivateSalesUserDataAsync({ account, types: [sale.type] }))\n    } catch (e) {\n      toastError(t('Error'), t('Please try again. Confirm the transaction and make sure you are paying enough gas!'))\n      console.error(e)\n    } finally {\n      setPendingTx(false)\n    }\n  }, [onClaim, dispatch, account, t, toastError, sale.type, val])\n\n\n\n  const renderApprovalOrClaimButton = () => {\n    return isApproved ? (\n      <Button\n        disabled={!enabled || pendingTx || !valNumber.isFinite() || valNumber.eq(0) || valNumber.gt(fullBalanceNumber)}\n        onClick={handleClaim}\n        width=\"100%\"\n      >\n        {pendingTx ? t('Claiming...') : t('Claim')}\n      </Button>\n    ) : (\n      <Button mt=\"8px\" width=\"100%\" disabled={requestedApproval || !enabled} onClick={handleApprove}>\n        {t('Enable Contract')}\n      </Button>\n    )\n  }\n\n  return (\n      <StyledCard >\n        <AppHeader title={t('')} subtitle={t('Claim your tokens')} noConfig />\n        <Wrapper>\n          <AutoColumn gap=\"md\">\n            <PSClaimInput\n              enabled={enabled}\n              onChange={handleChange}\n              onSelectMax={handleSelectMax}\n              value={val}\n              max={sale.userData?.claimableBalance}\n              symbol=\"CROW\"\n            />\n          </AutoColumn>\n          <ModalActions>\n          {!account ? <ConnectWalletButton mt=\"8px\" width=\"100%\" /> : renderApprovalOrClaimButton()}\n          </ModalActions>\n        </Wrapper>\n\n        \n\n      </StyledCard>\n  )\n}\n\nexport default PrivateSaleClaimCard\n","import React, { useEffect, useMemo, useRef, useState } from 'react'\nimport { useLocation } from 'react-router-dom'\nimport styled from 'styled-components'\nimport { ethers } from 'ethers'\nimport { formatUnits } from 'ethers/lib/utils'\nimport BigNumber from 'bignumber.js'\nimport { useWeb3React } from '@web3-react/core'\nimport { Heading, Flex, Image, Text } from '@pancakeswap/uikit'\nimport { useTranslation } from 'contexts/Localization'\nimport Page from 'components/Layout/Page'\nimport PageHeader from 'components/PageHeader'\n\nimport { usePrivateSales, usePollPrivateSalesPublicData, usePollPrivateSalesWithUserData } from 'state/privatesales/hooks'\nimport PrivateSaleRow from './components/PrivateSaleRow'\n\nconst PrivateSales: React.FC = () => {\n    const { t } = useTranslation()\n    const { data: privateSales, userDataLoaded } = usePrivateSales()\n    const { account } = useWeb3React()\n\n    usePollPrivateSalesPublicData();\n    usePollPrivateSalesWithUserData();\n    return (\n        <>\n            <Page>\n                {/* <PageHeader>\n                    <Flex justifyContent=\"space-between\" flexDirection={['column', null, null, 'row']}>\n                        <Flex flex=\"1\" flexDirection=\"column\" mr={['8px', 0]}>\n                            <Heading as=\"h1\" scale=\"xxl\" color=\"secondary\" mb=\"24px\">\n                            {t('Private Sales')}\n                            </Heading>\n                            <Heading scale=\"md\" color=\"text\">\n                            {t('Join the CrowFi Private Sales and get tokens at a cheaper price.')}\n                            </Heading>\n                            <Heading scale=\"md\" color=\"text\">\n                            {t('High APR, low risk.')}\n                            </Heading>\n                        </Flex>\n                    </Flex>\n                </PageHeader> */}\n                <Flex flexDirection=\"column\">\n                    {privateSales.filter((sale) => sale.startDate).map((sale) => (\n                        <PrivateSaleRow\n                        sale={sale}\n                        account={account}\n                        />\n                    ))}\n                </Flex>\n            </Page>\n        </>\n    )\n}\n\nexport default PrivateSales"],"sourceRoot":""}