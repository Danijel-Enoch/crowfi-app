{"version":3,"sources":["state/nftMarket/hooks.ts","hooks/useApproveConfirmTransaction.ts","components/ApproveConfirmButtons.tsx","views/Nft/market/Profile/hooks/useFetchUserNfts.tsx","state/teams/hooks.ts","views/ProfileCreation/SelectionCard.tsx","views/ProfileCreation/UserName.tsx","views/ProfileCreation/config.ts","views/ProfileCreation/contexts/ProfileCreationProvider.tsx","views/ProfileCreation/Header.tsx","views/ProfileCreation/WalletNotConnected.tsx","views/ProfileCreation/NextStepButton.tsx","views/ProfileCreation/contexts/hook.ts","views/ProfileCreation/Mint.tsx","views/ProfileCreation/ProfilePicture.tsx","views/ProfileCreation/TeamSelection.tsx","views/ProfileCreation/ConfirmProfileCreationModal.tsx","views/ProfileCreation/Steps.tsx","views/ProfileCreation/index.tsx"],"names":["useFetchCollections","dispatch","useAppDispatch","useEffect","fetchCollections","useFetchCollection","collectionAddress","fetchCollection","useFetchByBunnyIdAndUpdate","bunnyId","useSelector","state","nftMarket","data","loadingState","latestPancakeBunniesUpdateAt","isUpdatingPancakeBunnies","existingBunniesInState","useGetAllBunniesByBunnyId","existingTokensWithBunnyId","map","nft","tokenId","allPancakeBunnies","useNftsFromCollection","pancakeBunniesAddress","allExistingPBTokenIds","firstBunny","length","existingMetadata","useMemo","name","description","collection","collectionName","image","fetchMorePancakeBunnies","orderDirection","fetchNewPBAndUpdateExisting","useLoadingState","useGetCollections","collections","useGetCollection","checksummedCollectionAddress","isAddress","nfts","filter","attributes","value","marketData","isTradable","useGetNFTInitializationState","initializationState","useUserNfts","user","useGetNftFilters","collectionFilter","filters","activeFilters","useGetNftFilterLoadingState","NftFilterLoadingState","IDLE","useGetNftOrdering","ordering","field","direction","useGetNftShowOnlyOnSale","showOnlyOnSale","initialState","approvalState","confirmState","reducer","actions","type","useApproveConfirmTransaction","onApprove","onConfirm","onRequiresApproval","onSuccess","noop","onApproveSuccess","t","useTranslation","account","useWeb3React","useReducer","handlePreApprove","useRef","toastError","useToast","current","then","result","isApproving","isApproved","isConfirming","isConfirmed","hasApproveFailed","hasConfirmFailed","handleApprove","a","tx","wait","receipt","status","handleConfirm","params","ButtonArrangement","StyledApproveConfirmButtonRow","styled","div","theme","mediaQueries","md","Button","UIKitButton","iconAttrs","width","color","ChevronRight","ChevronRightIcon","attrs","ChevronBottom","ChevronDownIcon","spinnerIcon","spin","ApproveConfirmButtons","isApproveDisabled","isConfirmDisabled","buttonArrangement","ROW","confirmLabel","confirmId","confirmButtonText","disabled","onClick","endIcon","undefined","isLoading","justifyContent","id","useFetchUserNfts","useProfile","profile","isProfileInitialized","isInitialized","isProfileLoading","userNftsInitializationState","hasProfileNft","profileNftTokenId","toString","profileNftCollectionAddress","profileNftWithCollectionAddress","nftLocation","NftLocation","PROFILE","previousProfileNftTokenId","usePreviousValue","shouldFetch","UserNftInitializationState","UNINITIALIZED","hasAccountSwitched","isEmpty","fetchUserNfts","useTeam","team","teams","fetchTeam","useTeams","fetchTeams","Label","label","isDisabled","Body","Children","StyledBackgroundImage","src","SelectionCard","isChecked","onChange","children","props","isSuccess","mb","checked","e","target","style","flex","ExistingUserState","MINT_COST","parseUnits","REGISTER_COST","STARTER_NFT_BUNNY_IDS","totalCost","add","allowance","mul","currentStep","teamId","selectedNft","userName","minimumCakeRequired","action","step","ProfileCreationContext","createContext","ProfileCreationProvider","isSubscribed","fetchData","bunnyFactoryContract","getBunnyFactoryContract","canMint","nextStep","setTeamId","setSelectedNft","setUserName","Provider","Wrapper","colors","textSubtle","steps","Header","useContext","as","scale","href","nftsBaseUrl","variant","translationKey","index","WalletNotConnected","ConnectWalletButton","NextStepButton","useProfileCreation","Mint","useState","selectedBunnyId","setSelectedBunnyId","starterNfts","setStarterNfts","toastSuccess","cakeContract","useCake","useBunnyFactory","useGetCakeBalance","cakeBalance","balance","hasMinimumCakeRequired","fetchStatus","FetchStatus","SUCCESS","gte","callWithGasPrice","useCallWithGasPrice","getStarterNfts","getNftsFromCollectionApi","allPbTokens","address","response","fontSize","bold","num","formatUnits","thumbnail","Link","RouterLink","primary","NftWrapper","ProfilePicture","library","setIsApproved","setIsApproving","contract","getErc721Contract","getSigner","getPancakeProfileAddress","INITIALIZED","to","marginLeft","walletNft","location","WALLET","Team","currentTeamId","handleTeamSelection","parseInt","teamValues","shuffle","Object","values","images","isJoinable","mr","users","toLocaleString","ConfirmProfileCreationModal","onDismiss","profileContract","toJSON","fetchProfile","Toast","txHash","transactionHash","title","InputWrap","Input","UIKitInput","Indicator","Flex","UserName","isAcknowledged","setIsAcknowledged","useWeb3Provider","existingUserState","setExistingUserState","isValid","setIsValid","setIsLoading","message","setMessage","useModal","onPresentConfirmProfileCreation","isUserCreated","CREATED","checkUsernameValidity","debounce","fetch","API_PROFILE","res","ok","json","error","signMessage","signature","method","headers","body","JSON","stringify","username","fetchUser","dateCreated","formatDistance","parseISO","created_at","Date","NEW","height","event","isWarning","minLength","maxLength","placeholder","py","minHeight","htmlFor","display","cursor","marginBottom","alignItems","ml","mt","Steps","TeamSelection","ProfileCreation","hasProfile","PageLoader","toLowerCase","Page"],"mappings":"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","file":"static/js/24.6c689c6d.chunk.js","sourcesContent":["import { useEffect, useMemo } from 'react'\nimport { useSelector } from 'react-redux'\nimport { useAppDispatch } from 'state'\nimport { pancakeBunniesAddress } from 'views/Nft/market/constants'\nimport { isAddress } from 'utils'\nimport { fetchCollection, fetchCollections, fetchNewPBAndUpdateExisting } from './reducer'\nimport { State } from '../types'\nimport { NftFilter, NftFilterLoadingState, NftToken, UserNftsState } from './types'\n\nconst MAX_GEN0_ID = 4\n\nexport const useFetchCollections = () => {\n  const dispatch = useAppDispatch()\n  useEffect(() => {\n    dispatch(fetchCollections())\n  }, [dispatch])\n}\n\nexport const useFetchCollection = (collectionAddress: string) => {\n  const dispatch = useAppDispatch()\n  useEffect(() => {\n    dispatch(fetchCollection(collectionAddress))\n  }, [dispatch, collectionAddress])\n}\n\n// Returns a function that fetches more NFTs for specified bunny id\n// as well as updating existing PB NFTs in state\n// Note: PancakeBunny specific\nexport const useFetchByBunnyIdAndUpdate = (bunnyId: string) => {\n  const dispatch = useAppDispatch()\n\n  const { latestPancakeBunniesUpdateAt, isUpdatingPancakeBunnies } = useSelector(\n    (state: State) => state.nftMarket.data.loadingState,\n  )\n\n  // Extra guard in case market data shifts\n  // we don't wanna fetch same tokens multiple times\n  const existingBunniesInState = useGetAllBunniesByBunnyId(bunnyId)\n  const existingTokensWithBunnyId = existingBunniesInState ? existingBunniesInState.map((nft) => nft.tokenId) : []\n\n  const allPancakeBunnies = useNftsFromCollection(pancakeBunniesAddress)\n  const allExistingPBTokenIds = allPancakeBunnies ? allPancakeBunnies.map((nft) => nft.tokenId) : []\n\n  const firstBunny = existingBunniesInState.length > 0 ? existingBunniesInState[0] : null\n\n  // If we already have NFT with this bunny id in state - we can reuse its metadata without making API request\n  const existingMetadata = useMemo(() => {\n    return firstBunny\n      ? {\n          name: firstBunny.name,\n          description: firstBunny.description,\n          collection: { name: firstBunny.collectionName },\n          image: firstBunny.image,\n        }\n      : null\n  }, [firstBunny])\n\n  // This fetches more bunnies when called\n  const fetchMorePancakeBunnies = (orderDirection: 'asc' | 'desc') => {\n    dispatch(\n      fetchNewPBAndUpdateExisting({\n        bunnyId,\n        existingTokensWithBunnyId,\n        allExistingPBTokenIds,\n        existingMetadata,\n        orderDirection,\n      }),\n    )\n  }\n\n  return { isUpdatingPancakeBunnies, latestPancakeBunniesUpdateAt, fetchMorePancakeBunnies }\n}\n\nexport const useLoadingState = () => {\n  return useSelector((state: State) => state.nftMarket.data.loadingState)\n}\n\nexport const useGetCollections = () => {\n  return useSelector((state: State) => state.nftMarket.data.collections)\n}\n\nexport const useGetCollection = (collectionAddress: string) => {\n  const checksummedCollectionAddress = isAddress(collectionAddress) || ''\n  const collections = useGetCollections()\n  return collections[checksummedCollectionAddress]\n}\n\nexport const useNftsFromCollection = (collectionAddress: string) => {\n  const checksummedCollectionAddress = isAddress(collectionAddress) || ''\n  const nfts: NftToken[] = useSelector((state: State) => state.nftMarket.data.nfts[checksummedCollectionAddress])\n  return nfts\n}\n\nexport const useGetAllBunniesByBunnyId = (bunnyId: string) => {\n  const nfts: NftToken[] = useSelector((state: State) => state.nftMarket.data.nfts[pancakeBunniesAddress])\n  return nfts ? nfts.filter((nft) => nft.attributes[0].value === bunnyId && nft.marketData.isTradable) : []\n}\n\nexport const useGetNFTInitializationState = () => {\n  return useSelector((state: State) => state.nftMarket.initializationState)\n}\n\nexport const useUserNfts = (): UserNftsState => {\n  return useSelector((state: State) => state.nftMarket.data.user)\n}\n\nexport const useHasGen0Nfts = (): boolean => {\n  const userNfts = useSelector((state: State) => state.nftMarket.data.user)\n  return userNfts.nfts.some((nft) => nft.attributes && Number(nft.attributes[0]?.value) <= MAX_GEN0_ID)\n}\n\nexport const useGetNftFilters = (collectionAddress: string) => {\n  const collectionFilter: NftFilter = useSelector((state: State) => state.nftMarket.data.filters[collectionAddress])\n  return collectionFilter ? collectionFilter.activeFilters : {}\n}\n\nexport const useGetNftFilterLoadingState = (collectionAddress: string) => {\n  const collectionFilter: NftFilter = useSelector((state: State) => state.nftMarket.data.filters[collectionAddress])\n  return collectionFilter ? collectionFilter.loadingState : NftFilterLoadingState.IDLE\n}\n\nexport const useGetNftOrdering = (collectionAddress: string) => {\n  const collectionFilter: NftFilter = useSelector((state: State) => state.nftMarket.data.filters[collectionAddress])\n  return collectionFilter ? collectionFilter.ordering : { field: 'currentAskPrice', direction: 'asc' as 'asc' | 'desc' }\n}\n\nexport const useGetNftShowOnlyOnSale = (collectionAddress: string) => {\n  const collectionFilter: NftFilter = useSelector((state: State) => state.nftMarket.data.filters[collectionAddress])\n  return collectionFilter ? collectionFilter.showOnlyOnSale : true\n}\n","import { useEffect, useReducer, useRef } from 'react'\nimport { noop } from 'lodash'\nimport { useWeb3React } from '@web3-react/core'\nimport { ethers } from 'ethers'\nimport useToast from 'hooks/useToast'\nimport { useTranslation } from 'contexts/Localization'\n\ntype LoadingState = 'idle' | 'loading' | 'success' | 'fail'\n\ntype Action =\n  | { type: 'requires_approval' }\n  | { type: 'approve_sending' }\n  | { type: 'approve_receipt' }\n  | { type: 'approve_error' }\n  | { type: 'confirm_sending' }\n  | { type: 'confirm_receipt' }\n  | { type: 'confirm_error' }\n\ninterface State {\n  approvalState: LoadingState\n  confirmState: LoadingState\n}\n\nconst initialState: State = {\n  approvalState: 'idle',\n  confirmState: 'idle',\n}\n\nconst reducer = (state: State, actions: Action): State => {\n  switch (actions.type) {\n    case 'requires_approval':\n      return {\n        ...state,\n        approvalState: 'success',\n      }\n    case 'approve_sending':\n      return {\n        ...state,\n        approvalState: 'loading',\n      }\n    case 'approve_receipt':\n      return {\n        ...state,\n        approvalState: 'success',\n      }\n    case 'approve_error':\n      return {\n        ...state,\n        approvalState: 'fail',\n      }\n    case 'confirm_sending':\n      return {\n        ...state,\n        confirmState: 'loading',\n      }\n    case 'confirm_receipt':\n      return {\n        ...state,\n        confirmState: 'success',\n      }\n    case 'confirm_error':\n      return {\n        ...state,\n        confirmState: 'fail',\n      }\n    default:\n      return state\n  }\n}\n\ninterface OnSuccessProps {\n  state: State\n  receipt: ethers.providers.TransactionReceipt\n}\n\ninterface ApproveConfirmTransaction {\n  onApprove: () => Promise<ethers.providers.TransactionResponse>\n  onConfirm: (params?) => Promise<ethers.providers.TransactionResponse>\n  onRequiresApproval?: () => Promise<boolean>\n  onSuccess: ({ state, receipt }: OnSuccessProps) => void\n  onApproveSuccess?: ({ state, receipt }: OnSuccessProps) => void\n}\n\nconst useApproveConfirmTransaction = ({\n  onApprove,\n  onConfirm,\n  onRequiresApproval,\n  onSuccess = noop,\n  onApproveSuccess = noop,\n}: ApproveConfirmTransaction) => {\n  const { t } = useTranslation()\n  const { account } = useWeb3React()\n  const [state, dispatch] = useReducer(reducer, initialState)\n  const handlePreApprove = useRef(onRequiresApproval)\n  const { toastError } = useToast()\n\n  // Check if approval is necessary, re-check if account changes\n  useEffect(() => {\n    if (account && handlePreApprove.current) {\n      handlePreApprove.current().then((result) => {\n        if (result) {\n          dispatch({ type: 'requires_approval' })\n        }\n      })\n    }\n  }, [account, handlePreApprove, dispatch])\n\n  return {\n    isApproving: state.approvalState === 'loading',\n    isApproved: state.approvalState === 'success',\n    isConfirming: state.confirmState === 'loading',\n    isConfirmed: state.confirmState === 'success',\n    hasApproveFailed: state.approvalState === 'fail',\n    hasConfirmFailed: state.confirmState === 'fail',\n    handleApprove: async () => {\n      try {\n        const tx = await onApprove()\n        dispatch({ type: 'approve_sending' })\n        const receipt = await tx.wait()\n        if (receipt.status) {\n          dispatch({ type: 'approve_receipt' })\n          onApproveSuccess({ state, receipt })\n        }\n      } catch (error) {\n        dispatch({ type: 'approve_error' })\n        toastError(t('Error'), t('Please try again. Confirm the transaction and make sure you are paying enough gas!'))\n      }\n    },\n    handleConfirm: async (params = {}) => {\n      dispatch({ type: 'confirm_sending' })\n      try {\n        const tx = await onConfirm(params)\n        const receipt = await tx.wait()\n        if (receipt.status) {\n          dispatch({ type: 'confirm_receipt' })\n          onSuccess({ state, receipt })\n        }\n      } catch (error) {\n        dispatch({ type: 'confirm_error' })\n        toastError(t('Error'), t('Please try again. Confirm the transaction and make sure you are paying enough gas!'))\n      }\n    },\n  }\n}\n\nexport default useApproveConfirmTransaction\n","import React from 'react'\nimport styled from 'styled-components'\nimport { ChevronRightIcon, Button as UIKitButton, AutoRenewIcon, ChevronDownIcon, Box, Flex } from '@pancakeswap/uikit'\nimport { useTranslation } from 'contexts/Localization'\n\nexport enum ButtonArrangement {\n  ROW = 'row',\n  SEQUENTIAL = 'sequential',\n}\n\ninterface ApproveConfirmButtonsProps {\n  isApproveDisabled: boolean\n  isApproving: boolean\n  isConfirming: boolean\n  isConfirmDisabled: boolean\n  onApprove: () => void\n  onConfirm: () => void\n  buttonArrangement?: ButtonArrangement\n  confirmLabel?: string\n  confirmId?: string\n}\n\nconst StyledApproveConfirmButtonRow = styled.div`\n  align-items: center;\n  display: grid;\n  grid-template-columns: 1fr;\n  justify-content: center;\n\n  ${({ theme }) => theme.mediaQueries.md} {\n    grid-template-columns: 1fr 24px 1fr;\n  }\n`\n\nconst Button = styled(UIKitButton)`\n  width: 100%;\n\n  ${({ theme }) => theme.mediaQueries.md} {\n    min-width: 160px;\n  }\n`\n\nconst iconAttrs = { width: '24px', color: 'textDisabled' }\n\nconst ChevronRight = styled(ChevronRightIcon).attrs(iconAttrs)`\n  display: none;\n\n  ${({ theme }) => theme.mediaQueries.md} {\n    display: block;\n  }\n`\n\nconst ChevronBottom = styled(ChevronDownIcon).attrs(iconAttrs)`\n  display: block;\n\n  ${({ theme }) => theme.mediaQueries.md} {\n    display: none;\n  }\n`\n\nconst spinnerIcon = <AutoRenewIcon spin color=\"currentColor\" />\n\nconst ApproveConfirmButtons: React.FC<ApproveConfirmButtonsProps> = ({\n  isApproveDisabled,\n  isApproving,\n  isConfirming,\n  isConfirmDisabled,\n  onApprove,\n  onConfirm,\n  buttonArrangement = ButtonArrangement.ROW,\n  confirmLabel,\n  confirmId,\n}) => {\n  const { t } = useTranslation()\n  const confirmButtonText = confirmLabel ?? t('Confirm')\n\n  const ApproveConfirmRow = () => {\n    return (\n      <StyledApproveConfirmButtonRow>\n        <Box>\n          <Button\n            disabled={isApproveDisabled}\n            onClick={onApprove}\n            endIcon={isApproving ? spinnerIcon : undefined}\n            isLoading={isApproving}\n          >\n            {isApproving ? t('Enabling') : t('Enable')}\n          </Button>\n        </Box>\n        <Flex justifyContent=\"center\">\n          <ChevronRight />\n          <ChevronBottom />\n        </Flex>\n        <Box>\n          <Button\n            id={confirmId}\n            onClick={onConfirm}\n            disabled={isConfirmDisabled}\n            isLoading={isConfirming}\n            endIcon={isConfirming ? spinnerIcon : undefined}\n          >\n            {isConfirming ? t('Confirming') : confirmButtonText}\n          </Button>\n        </Box>\n      </StyledApproveConfirmButtonRow>\n    )\n  }\n\n  const ApproveConfirmSequential = () => {\n    return (\n      <>\n        {isApproveDisabled ? (\n          <Box>\n            <Button\n              id={confirmId}\n              onClick={onConfirm}\n              disabled={isConfirmDisabled}\n              isLoading={isConfirming}\n              endIcon={isConfirming ? spinnerIcon : undefined}\n            >\n              {isConfirming ? t('Confirming') : confirmButtonText}\n            </Button>\n          </Box>\n        ) : (\n          <Box>\n            <Button onClick={onApprove} endIcon={isApproving ? spinnerIcon : undefined} isLoading={isApproving}>\n              {isApproving ? t('Enabling') : t('Enable')}\n            </Button>\n          </Box>\n        )}\n      </>\n    )\n  }\n\n  return buttonArrangement === ButtonArrangement.ROW ? ApproveConfirmRow() : ApproveConfirmSequential()\n}\n\nexport default ApproveConfirmButtons\n","import { useEffect, useMemo } from 'react'\nimport isEmpty from 'lodash/isEmpty'\nimport { useAppDispatch } from 'state'\nimport { fetchUserNfts } from 'state/nftMarket/reducer'\nimport { useGetCollections, useUserNfts } from 'state/nftMarket/hooks'\nimport usePreviousValue from 'hooks/usePreviousValue'\nimport { useProfile } from 'state/profile/hooks'\nimport { NftLocation, UserNftInitializationState } from 'state/nftMarket/types'\nimport { useWeb3React } from '@web3-react/core'\n\nconst useFetchUserNfts = () => {\n  const dispatch = useAppDispatch()\n  const { account } = useWeb3React()\n  const { profile, isInitialized: isProfileInitialized, isLoading: isProfileLoading } = useProfile()\n  const { userNftsInitializationState } = useUserNfts()\n  const collections = useGetCollections()\n\n  const hasProfileNft = profile?.tokenId\n  const profileNftTokenId = profile?.tokenId?.toString()\n  const profileNftCollectionAddress = profile?.collectionAddress\n\n  const profileNftWithCollectionAddress = useMemo(() => {\n    if (hasProfileNft) {\n      return {\n        tokenId: profileNftTokenId,\n        collectionAddress: profileNftCollectionAddress,\n        nftLocation: NftLocation.PROFILE,\n      }\n    }\n    return null\n  }, [profileNftTokenId, profileNftCollectionAddress, hasProfileNft])\n\n  const previousProfileNftTokenId = usePreviousValue(profileNftTokenId)\n\n  // Fetch on first load when profile fetch is resolved\n  const shouldFetch =\n    account &&\n    userNftsInitializationState === UserNftInitializationState.UNINITIALIZED &&\n    isProfileInitialized &&\n    !isProfileLoading\n\n  // Fetch on account / profile change, once profile fetch is resolved\n  const hasAccountSwitched = previousProfileNftTokenId !== profileNftTokenId && !isProfileLoading && account\n\n  useEffect(() => {\n    if ((shouldFetch || hasAccountSwitched) && !isEmpty(collections)) {\n      dispatch(fetchUserNfts({ account, collections, profileNftWithCollectionAddress }))\n    }\n  }, [\n    dispatch,\n    account,\n    shouldFetch,\n    hasAccountSwitched,\n    profileNftTokenId,\n    collections,\n    profileNftWithCollectionAddress,\n  ])\n}\n\nexport default useFetchUserNfts\n","import { useEffect } from 'react'\nimport { useSelector } from 'react-redux'\nimport { useAppDispatch } from 'state'\nimport { Team } from 'config/constants/types'\nimport { State, TeamsState } from '../types'\nimport { fetchTeam, fetchTeams } from '.'\n\nexport const useTeam = (id: number) => {\n  const team: Team = useSelector((state: State) => state.teams.data[id])\n  const dispatch = useAppDispatch()\n\n  useEffect(() => {\n    dispatch(fetchTeam(id))\n  }, [id, dispatch])\n\n  return team\n}\n\nexport const useTeams = () => {\n  const { isInitialized, isLoading, data }: TeamsState = useSelector((state: State) => state.teams)\n  const dispatch = useAppDispatch()\n\n  useEffect(() => {\n    dispatch(fetchTeams())\n  }, [dispatch])\n\n  return { teams: data, isInitialized, isLoading }\n}\n","import React from 'react'\nimport styled from 'styled-components'\nimport { Card, Radio } from '@pancakeswap/uikit'\n\ninterface SelectionCardProps {\n  name: string\n  value: string | number\n  isChecked?: boolean\n  onChange: (val: any) => void\n  image: string\n  disabled?: boolean\n}\n\nconst Label = styled.label<{ isDisabled: boolean }>`\n  cursor: ${({ isDisabled }) => (isDisabled ? 'not-allowed' : 'pointer')};\n  display: flex;\n  justify-content: space-between;\n  align-items: center;\n  opacity: ${({ isDisabled }) => (isDisabled ? '0.6' : '1')};\n`\n\nconst Body = styled.div`\n  align-items: center;\n  display: flex;\n  flex-grow: 1;\n  height: 80px;\n  padding: 8px 16px;\n`\n\nconst Children = styled.div`\n  margin-left: 16px;\n`\n\nconst StyledBackgroundImage = styled.div<{ src: string }>`\n  align-self: stretch;\n  background-image: url('${({ src }) => src}');\n  background-size: contain;\n  background-position: center;\n  background-repeat: no-repeat;\n  flex: none;\n  width: 80px;\n`\n\nconst SelectionCard: React.FC<SelectionCardProps> = ({\n  name,\n  value,\n  isChecked = false,\n  image,\n  onChange,\n  disabled,\n  children,\n  ...props\n}) => {\n  return (\n    <Card isSuccess={isChecked} isDisabled={disabled} mb=\"16px\" {...props}>\n      <Label isDisabled={disabled}>\n        <Body>\n          <Radio\n            name={name}\n            checked={isChecked}\n            value={value}\n            onChange={(e) => onChange(e.target.value)}\n            disabled={disabled}\n            style={{ flex: 'none' }}\n          />\n          <Children>{children}</Children>\n        </Body>\n        <StyledBackgroundImage src={image} />\n      </Label>\n    </Card>\n  )\n}\n\nexport default SelectionCard\n","import React, { ChangeEvent, useEffect, useState } from 'react'\nimport styled from 'styled-components'\nimport {\n  Card,\n  CardBody,\n  Heading,\n  Text,\n  Input as UIKitInput,\n  Button,\n  AutoRenewIcon,\n  CheckmarkIcon,\n  Flex,\n  WarningIcon,\n  useModal,\n  Skeleton,\n  Checkbox,\n} from '@pancakeswap/uikit'\nimport { parseISO, formatDistance } from 'date-fns'\nimport { useWeb3React } from '@web3-react/core'\nimport { formatUnits } from '@ethersproject/units'\nimport { API_PROFILE } from 'config/constants/endpoints'\nimport useToast from 'hooks/useToast'\nimport { FetchStatus, useGetCakeBalance } from 'hooks/useTokenBalance'\nimport { signMessage } from 'utils/web3React'\nimport useWeb3Provider from 'hooks/useActiveWeb3React'\nimport { useTranslation } from 'contexts/Localization'\nimport debounce from 'lodash/debounce'\nimport ConfirmProfileCreationModal from './ConfirmProfileCreationModal'\nimport useProfileCreation from './contexts/hook'\nimport { USERNAME_MIN_LENGTH, USERNAME_MAX_LENGTH, REGISTER_COST } from './config'\n\nenum ExistingUserState {\n  IDLE = 'idle', // initial state\n  CREATED = 'created', // username has already been created\n  NEW = 'new', // username has not been created\n}\n\nconst InputWrap = styled.div`\n  position: relative;\n  max-width: 240px;\n`\n\nconst Input = styled(UIKitInput)`\n  padding-right: 40px;\n`\n\nconst Indicator = styled(Flex)`\n  align-items: center;\n  height: 24px;\n  justify-content: center;\n  margin-top: -12px;\n  position: absolute;\n  right: 16px;\n  top: 50%;\n  width: 24px;\n`\n\nconst UserName: React.FC = () => {\n  const [isAcknowledged, setIsAcknowledged] = useState(false)\n  const { teamId, selectedNft, userName, actions, minimumCakeRequired, allowance } = useProfileCreation()\n  const { t } = useTranslation()\n  const { account } = useWeb3React()\n  const { toastError } = useToast()\n  const { library } = useWeb3Provider()\n  const [existingUserState, setExistingUserState] = useState<ExistingUserState>(ExistingUserState.IDLE)\n  const [isValid, setIsValid] = useState(false)\n  const [isLoading, setIsLoading] = useState(false)\n  const [message, setMessage] = useState('')\n  const { balance: cakeBalance, fetchStatus } = useGetCakeBalance()\n  const hasMinimumCakeRequired = fetchStatus === FetchStatus.SUCCESS && cakeBalance.gte(REGISTER_COST)\n  const [onPresentConfirmProfileCreation] = useModal(\n    <ConfirmProfileCreationModal\n      userName={userName}\n      selectedNft={selectedNft}\n      account={account}\n      teamId={teamId}\n      minimumCakeRequired={minimumCakeRequired}\n      allowance={allowance}\n    />,\n    false,\n  )\n  const isUserCreated = existingUserState === ExistingUserState.CREATED\n\n  const checkUsernameValidity = debounce(async (value: string) => {\n    try {\n      setIsLoading(true)\n      const res = await fetch(`${API_PROFILE}/api/users/valid/${value}`)\n\n      if (res.ok) {\n        setIsValid(true)\n        setMessage('')\n      } else {\n        const data = await res.json()\n        setIsValid(false)\n        setMessage(data?.error?.message)\n      }\n    } finally {\n      setIsLoading(false)\n    }\n  }, 200)\n\n  const handleChange = (event: ChangeEvent<HTMLInputElement>) => {\n    const { value } = event.target\n    actions.setUserName(value)\n    checkUsernameValidity(value)\n  }\n\n  const handleConfirm = async () => {\n    try {\n      setIsLoading(true)\n\n      const signature = await signMessage(library, account, userName)\n      const response = await fetch(`${API_PROFILE}/api/users/register`, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n        },\n        body: JSON.stringify({\n          address: account,\n          username: userName,\n          signature,\n        }),\n      })\n\n      if (response.ok) {\n        setExistingUserState(ExistingUserState.CREATED)\n      } else {\n        const data = await response.json()\n        toastError(t('Error'), data?.error?.message)\n      }\n    } catch (error) {\n      toastError(error?.message ? error.message : JSON.stringify(error))\n    } finally {\n      setIsLoading(false)\n    }\n  }\n\n  const handleAcknowledge = () => setIsAcknowledged(!isAcknowledged)\n\n  // Perform an initial check to see if the wallet has already created a username\n  useEffect(() => {\n    const fetchUser = async () => {\n      try {\n        const response = await fetch(`${API_PROFILE}/api/users/${account}`)\n        const data = await response.json()\n\n        if (response.ok) {\n          const dateCreated = formatDistance(parseISO(data.created_at), new Date())\n          setMessage(t('Created %dateCreated% ago', { dateCreated }))\n\n          actions.setUserName(data.username)\n          setExistingUserState(ExistingUserState.CREATED)\n          setIsValid(true)\n        } else {\n          setExistingUserState(ExistingUserState.NEW)\n        }\n      } catch (error) {\n        toastError(t('Error'), t('Unable to verify username'))\n      }\n    }\n\n    if (account) {\n      fetchUser()\n    }\n  }, [account, setExistingUserState, setIsValid, setMessage, actions, toastError, t])\n\n  return (\n    <>\n      <Text fontSize=\"20px\" color=\"textSubtle\" bold>\n        {t('Step %num%', { num: 4 })}\n      </Text>\n      <Heading as=\"h3\" scale=\"xl\" mb=\"24px\">\n        {t('Set Your Name')}\n      </Heading>\n      <Text as=\"p\" mb=\"24px\">\n        {t('This name will be shown in team leaderboards and search results as long as your profile is active.')}\n      </Text>\n      <Card mb=\"24px\">\n        <CardBody>\n          <Heading as=\"h4\" scale=\"lg\" mb=\"8px\">\n            {t('Set Your Name')}\n          </Heading>\n          <Text as=\"p\" color=\"textSubtle\" mb=\"24px\">\n            {t(\n              'Your name must be at least 3 and at most 15 standard letters and numbers long. You can’t change this once you click Confirm.',\n            )}\n          </Text>\n          {existingUserState === ExistingUserState.IDLE ? (\n            <Skeleton height=\"40px\" width=\"240px\" />\n          ) : (\n            <InputWrap>\n              <Input\n                onChange={handleChange}\n                isWarning={userName && !isValid}\n                isSuccess={userName && isValid}\n                minLength={USERNAME_MIN_LENGTH}\n                maxLength={USERNAME_MAX_LENGTH}\n                disabled={isUserCreated}\n                placeholder={t('Enter your name...')}\n                value={userName}\n              />\n              <Indicator>\n                {isLoading && <AutoRenewIcon spin />}\n                {!isLoading && isValid && userName && <CheckmarkIcon color=\"success\" />}\n                {!isLoading && !isValid && userName && <WarningIcon color=\"failure\" />}\n              </Indicator>\n            </InputWrap>\n          )}\n          <Text color=\"textSubtle\" fontSize=\"14px\" py=\"4px\" mb=\"16px\" style={{ minHeight: '30px' }}>\n            {message}\n          </Text>\n          <Text as=\"p\" color=\"failure\" mb=\"8px\">\n            {t(\n              \"Only reuse a name from other social media if you're OK with people viewing your wallet. You can't change your name once you click Confirm.\",\n            )}\n          </Text>\n          <label htmlFor=\"checkbox\" style={{ display: 'block', cursor: 'pointer', marginBottom: '24px' }}>\n            <Flex alignItems=\"center\">\n              <div style={{ flex: 'none' }}>\n                <Checkbox id=\"checkbox\" scale=\"sm\" checked={isAcknowledged} onChange={handleAcknowledge} />\n              </div>\n              <Text ml=\"8px\">{t('I understand that people can view my wallet if they know my username')}</Text>\n            </Flex>\n          </label>\n          <Button onClick={handleConfirm} disabled={!isValid || isUserCreated || isLoading || !isAcknowledged}>\n            {t('Confirm')}\n          </Button>\n        </CardBody>\n      </Card>\n      <Button\n        onClick={onPresentConfirmProfileCreation}\n        disabled={!isValid || !isUserCreated}\n        id=\"completeProfileCreation\"\n      >\n        {t('Complete Profile')}\n      </Button>\n      {!hasMinimumCakeRequired && (\n        <Text color=\"failure\" mt=\"16px\">\n          {t('A minimum of %num% CAKE is required', { num: formatUnits(REGISTER_COST) })}\n        </Text>\n      )}\n    </>\n  )\n}\n\nexport default UserName\n","import { parseUnits } from '@ethersproject/units'\n\nexport const MINT_COST = parseUnits('1')\nexport const REGISTER_COST = parseUnits('0.5')\nexport const ALLOWANCE_MULTIPLIER = 5\nexport const STARTER_NFT_BUNNY_IDS = ['5', '6', '7', '8', '9'] // 'sleepy', 'dollop', 'twinkle', 'churro', 'sunny'\nexport const USERNAME_MIN_LENGTH = 3\nexport const USERNAME_MAX_LENGTH = 15\n","import React, { createContext, useEffect, useMemo, useReducer } from 'react'\nimport { useWeb3React } from '@web3-react/core'\nimport { getBunnyFactoryContract } from 'utils/contractHelpers'\nimport { MINT_COST, REGISTER_COST, ALLOWANCE_MULTIPLIER } from '../config'\nimport { Actions, State, ContextType } from './types'\n\nconst totalCost = MINT_COST.add(REGISTER_COST)\nconst allowance = totalCost.mul(ALLOWANCE_MULTIPLIER)\n\nconst initialState: State = {\n  isInitialized: false,\n  currentStep: 0,\n  teamId: null,\n  selectedNft: {\n    collectionAddress: null,\n    tokenId: null,\n  },\n  userName: '',\n  minimumCakeRequired: totalCost,\n  allowance,\n}\n\nconst reducer = (state: State, action: Actions): State => {\n  switch (action.type) {\n    case 'initialize':\n      return {\n        ...state,\n        isInitialized: true,\n        currentStep: action.step,\n      }\n    case 'next_step':\n      return {\n        ...state,\n        currentStep: state.currentStep + 1,\n      }\n    case 'set_team':\n      return {\n        ...state,\n        teamId: action.teamId,\n      }\n    case 'set_selected_nft':\n      return {\n        ...state,\n        selectedNft: {\n          tokenId: action.tokenId,\n          collectionAddress: action.collectionAddress,\n        },\n      }\n    case 'set_username':\n      return {\n        ...state,\n        userName: action.userName,\n      }\n    default:\n      return state\n  }\n}\n\nexport const ProfileCreationContext = createContext<ContextType>(null)\n\nconst ProfileCreationProvider: React.FC = ({ children }) => {\n  const [state, dispatch] = useReducer(reducer, initialState)\n  const { account } = useWeb3React()\n\n  // Initial checks\n  useEffect(() => {\n    let isSubscribed = true\n\n    const fetchData = async () => {\n      const bunnyFactoryContract = getBunnyFactoryContract()\n      const canMint = await bunnyFactoryContract.canMint(account)\n      dispatch({ type: 'initialize', step: canMint ? 0 : 1 })\n\n      // When changing wallets quickly unmounting before the hasClaim finished causes a React error\n      if (isSubscribed) {\n        dispatch({ type: 'initialize', step: canMint ? 0 : 1 })\n      }\n    }\n\n    if (account) {\n      fetchData()\n    }\n\n    return () => {\n      isSubscribed = false\n    }\n  }, [account, dispatch])\n\n  const actions: ContextType['actions'] = useMemo(\n    () => ({\n      nextStep: () => dispatch({ type: 'next_step' }),\n      setTeamId: (teamId: number) => dispatch({ type: 'set_team', teamId }),\n      setSelectedNft: (tokenId: string, collectionAddress: string) =>\n        dispatch({ type: 'set_selected_nft', tokenId, collectionAddress }),\n      setUserName: (userName: string) => dispatch({ type: 'set_username', userName }),\n    }),\n    [dispatch],\n  )\n\n  return <ProfileCreationContext.Provider value={{ ...state, actions }}>{children}</ProfileCreationContext.Provider>\n}\n\nexport default ProfileCreationProvider\n","import React, { useContext } from 'react'\nimport styled from 'styled-components'\nimport { Breadcrumbs, Heading, Text, Link, Button } from '@pancakeswap/uikit'\nimport { useTranslation } from 'contexts/Localization'\nimport { nftsBaseUrl } from 'views/Nft/market/constants'\nimport { ProfileCreationContext } from './contexts/ProfileCreationProvider'\n\nconst Wrapper = styled.div`\n  border-bottom: 2px solid ${({ theme }) => theme.colors.textSubtle};\n  margin-top: 32px;\n  margin-bottom: 24px;\n  padding-bottom: 24px;\n`\n\nconst steps = ['Get Starter Collectible', 'Set Profile Picture', 'Join Team', 'Set Name']\n\nconst Header: React.FC = () => {\n  const { t } = useTranslation()\n  const { currentStep } = useContext(ProfileCreationContext)\n\n  return (\n    <Wrapper>\n      <Heading as=\"h1\" scale=\"xxl\" color=\"secondary\" mb=\"8px\" id=\"profile-setup-title\">\n        {t('Profile Setup')}\n      </Heading>\n      <Heading as=\"h2\" scale=\"lg\" mb=\"8px\">\n        {t('Show off your stats and collectibles with your unique profile')}\n      </Heading>\n      <Text color=\"textSubtle\" mb=\"8px\">\n        {t('Total cost: 1.5 CAKE')}\n      </Text>\n      <Link href={`${nftsBaseUrl}/profile`}>\n        <Button mb=\"24px\" scale=\"sm\" variant=\"secondary\">\n          {t('Back to profile')}\n        </Button>\n      </Link>\n      <Breadcrumbs>\n        {steps.map((translationKey, index) => {\n          return (\n            <Text key={translationKey} color={index <= currentStep ? 'text' : 'textDisabled'}>\n              {t(translationKey)}\n            </Text>\n          )\n        })}\n      </Breadcrumbs>\n    </Wrapper>\n  )\n}\n\nexport default Header\n","import React from 'react'\nimport { Heading, Text } from '@pancakeswap/uikit'\nimport { useTranslation } from 'contexts/Localization'\nimport ConnectWalletButton from 'components/ConnectWalletButton'\n\nconst WalletNotConnected = () => {\n  const { t } = useTranslation()\n\n  return (\n    <div>\n      <Heading scale=\"xl\" mb=\"8px\">\n        {t('Oops!')}\n      </Heading>\n      <Text as=\"p\" mb=\"16px\">\n        {t('Please connect your wallet to continue')}\n      </Text>\n      <ConnectWalletButton />\n    </div>\n  )\n}\n\nexport default WalletNotConnected\n","import React from 'react'\nimport { ArrowForwardIcon, Button, ButtonProps } from '@pancakeswap/uikit'\n\nconst NextStepButton: React.FC<ButtonProps> = (props) => {\n  return <Button endIcon={<ArrowForwardIcon color=\"currentColor\" />} {...props} />\n}\n\nexport default NextStepButton\n","import { useContext } from 'react'\nimport { ProfileCreationContext } from './ProfileCreationProvider'\n\nconst useProfileCreation = () => {\n  return useContext(ProfileCreationContext)\n}\n\nexport default useProfileCreation\n","import React, { useState, useEffect } from 'react'\nimport { formatUnits } from '@ethersproject/units'\nimport { Card, CardBody, Heading, Text } from '@pancakeswap/uikit'\nimport { useWeb3React } from '@web3-react/core'\nimport { useTranslation } from 'contexts/Localization'\nimport useApproveConfirmTransaction from 'hooks/useApproveConfirmTransaction'\nimport { useCake, useBunnyFactory } from 'hooks/useContract'\nimport { FetchStatus, useGetCakeBalance } from 'hooks/useTokenBalance'\nimport { useCallWithGasPrice } from 'hooks/useCallWithGasPrice'\nimport ApproveConfirmButtons from 'components/ApproveConfirmButtons'\nimport useToast from 'hooks/useToast'\nimport { useAppDispatch } from 'state'\nimport { fetchUserNfts } from 'state/nftMarket/reducer'\nimport { useGetCollections } from 'state/nftMarket/hooks'\nimport { getNftsFromCollectionApi } from 'state/nftMarket/helpers'\nimport { ApiSingleTokenData } from 'state/nftMarket/types'\nimport { pancakeBunniesAddress } from 'views/Nft/market/constants'\nimport SelectionCard from './SelectionCard'\nimport NextStepButton from './NextStepButton'\nimport useProfileCreation from './contexts/hook'\nimport { MINT_COST, STARTER_NFT_BUNNY_IDS } from './config'\n\ninterface MintNftData extends ApiSingleTokenData {\n  bunnyId?: string\n}\n\nconst Mint: React.FC = () => {\n  const [selectedBunnyId, setSelectedBunnyId] = useState<string>('')\n  const [starterNfts, setStarterNfts] = useState<MintNftData[]>([])\n  const { actions, minimumCakeRequired, allowance } = useProfileCreation()\n  const collections = useGetCollections()\n  const { toastSuccess } = useToast()\n  const dispatch = useAppDispatch()\n\n  const { account } = useWeb3React()\n  const cakeContract = useCake()\n  const bunnyFactoryContract = useBunnyFactory()\n  const { t } = useTranslation()\n  const { balance: cakeBalance, fetchStatus } = useGetCakeBalance()\n  const hasMinimumCakeRequired = fetchStatus === FetchStatus.SUCCESS && cakeBalance.gte(MINT_COST)\n  const { callWithGasPrice } = useCallWithGasPrice()\n\n  useEffect(() => {\n    const getStarterNfts = async () => {\n      const { data: allPbTokens } = await getNftsFromCollectionApi(pancakeBunniesAddress)\n      const nfts = STARTER_NFT_BUNNY_IDS.map((bunnyId) => {\n        if (allPbTokens && allPbTokens[bunnyId]) {\n          return { ...allPbTokens[bunnyId], bunnyId }\n        }\n        return undefined\n      })\n      setStarterNfts(nfts)\n    }\n    if (starterNfts.length === 0) {\n      getStarterNfts()\n    }\n  }, [starterNfts])\n\n  const { isApproving, isApproved, isConfirmed, isConfirming, handleApprove, handleConfirm } =\n    useApproveConfirmTransaction({\n      onRequiresApproval: async () => {\n        // TODO: Move this to a helper, this check will be probably be used many times\n        try {\n          const response = await cakeContract.allowance(account, bunnyFactoryContract.address)\n          return response.gte(minimumCakeRequired)\n        } catch (error) {\n          return false\n        }\n      },\n      onApprove: () => {\n        return callWithGasPrice(cakeContract, 'approve', [bunnyFactoryContract.address, allowance.toString()])\n      },\n      onConfirm: () => {\n        return callWithGasPrice(bunnyFactoryContract, 'mintNFT', [selectedBunnyId])\n      },\n      onApproveSuccess: () => {\n        toastSuccess(t('Enabled'), t(\"Press 'confirm' to mint this NFT\"))\n      },\n      onSuccess: () => {\n        toastSuccess(t('Success'), t('You have minted your starter NFT'))\n        dispatch(fetchUserNfts({ account, collections }))\n        actions.nextStep()\n      },\n    })\n\n  return (\n    <>\n      <Text fontSize=\"20px\" color=\"textSubtle\" bold>\n        {t('Step %num%', { num: 1 })}\n      </Text>\n      <Heading as=\"h3\" scale=\"xl\" mb=\"24px\">\n        {t('Get Starter Collectible')}\n      </Heading>\n      <Text as=\"p\">{t('Every profile starts by making a “starter” collectible (NFT).')}</Text>\n      <Text as=\"p\">{t('This starter will also become your first profile picture.')}</Text>\n      <Text as=\"p\" mb=\"24px\">\n        {t('You can change your profile pic later if you get another approved Pancake Collectible.')}\n      </Text>\n      <Card mb=\"24px\">\n        <CardBody>\n          <Heading as=\"h4\" scale=\"lg\" mb=\"8px\">\n            {t('Choose your Starter!')}\n          </Heading>\n          <Text as=\"p\" color=\"textSubtle\">\n            {t('Choose wisely: you can only ever make one starter collectible!')}\n          </Text>\n          <Text as=\"p\" mb=\"24px\" color=\"textSubtle\">\n            {t('Cost: %num% CAKE', { num: formatUnits(MINT_COST) })}\n          </Text>\n          {starterNfts.map((nft) => {\n            const handleChange = (value: string) => setSelectedBunnyId(value)\n\n            return (\n              <SelectionCard\n                key={nft?.name}\n                name=\"mintStarter\"\n                value={nft?.bunnyId}\n                image={nft?.image.thumbnail}\n                isChecked={selectedBunnyId === nft?.bunnyId}\n                onChange={handleChange}\n                disabled={isApproving || isConfirming || isConfirmed || !hasMinimumCakeRequired}\n              >\n                <Text bold>{nft?.name}</Text>\n              </SelectionCard>\n            )\n          })}\n          {!hasMinimumCakeRequired && (\n            <Text color=\"failure\" mb=\"16px\">\n              {t('A minimum of %num% CAKE is required', { num: formatUnits(MINT_COST) })}\n            </Text>\n          )}\n          <ApproveConfirmButtons\n            isApproveDisabled={selectedBunnyId === null || isConfirmed || isConfirming || isApproved}\n            isApproving={isApproving}\n            isConfirmDisabled={!isApproved || isConfirmed || !hasMinimumCakeRequired}\n            isConfirming={isConfirming}\n            onApprove={handleApprove}\n            onConfirm={handleConfirm}\n          />\n        </CardBody>\n      </Card>\n      <NextStepButton onClick={actions.nextStep} disabled={!isConfirmed}>\n        {t('Next Step')}\n      </NextStepButton>\n    </>\n  )\n}\n\nexport default Mint\n","import React, { useContext, useState } from 'react'\nimport styled from 'styled-components'\nimport { AutoRenewIcon, Button, Card, CardBody, Heading, Text } from '@pancakeswap/uikit'\nimport { useWeb3React } from '@web3-react/core'\nimport { Link as RouterLink } from 'react-router-dom'\nimport { getPancakeProfileAddress } from 'utils/addressHelpers'\nimport { getErc721Contract } from 'utils/contractHelpers'\nimport { useTranslation } from 'contexts/Localization'\nimport { useUserNfts } from 'state/nftMarket/hooks'\nimport useToast from 'hooks/useToast'\nimport { useCallWithGasPrice } from 'hooks/useCallWithGasPrice'\nimport useFetchUserNfts from 'views/Nft/market/Profile/hooks/useFetchUserNfts'\nimport { nftsBaseUrl } from 'views/Nft/market/constants'\nimport { NftLocation, UserNftInitializationState } from 'state/nftMarket/types'\nimport SelectionCard from './SelectionCard'\nimport NextStepButton from './NextStepButton'\nimport { ProfileCreationContext } from './contexts/ProfileCreationProvider'\n\nconst Link = styled(RouterLink)`\n  color: ${({ theme }) => theme.colors.primary};\n`\n\nconst NftWrapper = styled.div`\n  margin-bottom: 24px;\n`\n\nconst ProfilePicture: React.FC = () => {\n  const { library } = useWeb3React()\n  const [isApproved, setIsApproved] = useState(false)\n  const [isApproving, setIsApproving] = useState(false)\n  const { selectedNft, actions } = useContext(ProfileCreationContext)\n\n  const { nfts, userNftsInitializationState } = useUserNfts()\n  useFetchUserNfts()\n\n  const { t } = useTranslation()\n  const { toastError, toastSuccess } = useToast()\n  const { callWithGasPrice } = useCallWithGasPrice()\n\n  const handleApprove = async () => {\n    const contract = getErc721Contract(selectedNft.collectionAddress, library.getSigner())\n    const tx = await callWithGasPrice(contract, 'approve', [getPancakeProfileAddress(), selectedNft.tokenId])\n    setIsApproving(true)\n    const receipt = await tx.wait()\n    if (receipt.status) {\n      toastSuccess(t('Enabled'), t('Please progress to the next step.'))\n      setIsApproving(false)\n      setIsApproved(true)\n    } else {\n      toastError(t('Error'), t('Please try again. Confirm the transaction and make sure you are paying enough gas!'))\n      setIsApproving(false)\n    }\n  }\n\n  if (nfts.length === 0 && userNftsInitializationState === UserNftInitializationState.INITIALIZED) {\n    return (\n      <>\n        <Heading scale=\"xl\" mb=\"24px\">\n          {t('Oops!')}\n        </Heading>\n        <Text bold fontSize=\"20px\" mb=\"24px\">\n          {t('We couldn’t find any Pancake Collectibles in your wallet.')}\n        </Text>\n        <Text as=\"p\">\n          {t(\n            'You need a Pancake Collectible to finish setting up your profile. If you sold or transferred your starter collectible to another wallet, you’ll need to get it back or acquire a new one somehow. You can’t make a new starter with this wallet address.',\n          )}\n        </Text>\n      </>\n    )\n  }\n\n  return (\n    <>\n      <Text fontSize=\"20px\" color=\"textSubtle\" bold>\n        {t('Step %num%', { num: 2 })}\n      </Text>\n      <Heading as=\"h3\" scale=\"xl\" mb=\"24px\">\n        {t('Set Profile Picture')}\n      </Heading>\n      <Card mb=\"24px\">\n        <CardBody>\n          <Heading as=\"h4\" scale=\"lg\" mb=\"8px\">\n            {t('Choose collectible')}\n          </Heading>\n          <Text as=\"p\" color=\"textSubtle\">\n            {t('Choose a profile picture from the eligible collectibles (NFT) in your wallet, shown below.')}\n          </Text>\n          <Text as=\"p\" color=\"textSubtle\" mb=\"24px\">\n            {t('Only approved Pancake Collectibles can be used.')}\n            <Link to={`${nftsBaseUrl}/collections`} style={{ marginLeft: '4px' }}>\n              {t('See the list >')}\n            </Link>\n          </Text>\n          <NftWrapper>\n            {nfts\n              .filter((walletNft) => walletNft.location === NftLocation.WALLET)\n              .map((walletNft) => {\n                return (\n                  <SelectionCard\n                    name=\"profilePicture\"\n                    key={`${walletNft.collectionAddress}#${walletNft.tokenId}`}\n                    value={walletNft.tokenId}\n                    image={walletNft.image.thumbnail}\n                    isChecked={walletNft.tokenId === selectedNft.tokenId}\n                    onChange={(value: string) => actions.setSelectedNft(value, walletNft.collectionAddress)}\n                  >\n                    <Text bold>{walletNft.name}</Text>\n                  </SelectionCard>\n                )\n              })}\n          </NftWrapper>\n          <Heading as=\"h4\" scale=\"lg\" mb=\"8px\">\n            {t('Allow collectible to be locked')}\n          </Heading>\n          <Text as=\"p\" color=\"textSubtle\" mb=\"16px\">\n            {t(\n              \"The collectible you've chosen will be locked in a smart contract while it’s being used as your profile picture. Don't worry - you'll be able to get it back at any time.\",\n            )}\n          </Text>\n          <Button\n            isLoading={isApproving}\n            disabled={isApproved || isApproving || selectedNft.tokenId === null}\n            onClick={handleApprove}\n            endIcon={isApproving ? <AutoRenewIcon spin color=\"currentColor\" /> : undefined}\n            id=\"approveStarterCollectible\"\n          >\n            {t('Enable')}\n          </Button>\n        </CardBody>\n      </Card>\n      <NextStepButton onClick={actions.nextStep} disabled={selectedNft.tokenId === null || !isApproved || isApproving}>\n        {t('Next Step')}\n      </NextStepButton>\n    </>\n  )\n}\n\nexport default ProfilePicture\n","import React, { useMemo } from 'react'\nimport { Card, CardBody, CommunityIcon, Flex, Heading, Text } from '@pancakeswap/uikit'\nimport shuffle from 'lodash/shuffle'\nimport { useTeams } from 'state/teams/hooks'\nimport { useTranslation } from 'contexts/Localization'\nimport SelectionCard from './SelectionCard'\nimport NextStepButton from './NextStepButton'\nimport useProfileCreation from './contexts/hook'\n\nconst Team: React.FC = () => {\n  const { teamId: currentTeamId, actions } = useProfileCreation()\n  const { t } = useTranslation()\n  const { teams } = useTeams()\n  const handleTeamSelection = (value: string) => actions.setTeamId(parseInt(value, 10))\n  const teamValues = useMemo(() => shuffle(Object.values(teams)), [teams])\n\n  return (\n    <>\n      <Text fontSize=\"20px\" color=\"textSubtle\" bold>\n        {t('Step %num%', { num: 3 })}\n      </Text>\n      <Heading as=\"h3\" scale=\"xl\" mb=\"24px\">\n        {t('Join a Team')}\n      </Heading>\n      <Text as=\"p\" mb=\"24px\">\n        {t('It won’t be possible to undo the choice you make for the foreseeable future!')}\n      </Text>\n      <Card mb=\"24px\">\n        <CardBody>\n          <Heading as=\"h4\" scale=\"lg\" mb=\"8px\">\n            {t('Join a Team')}\n          </Heading>\n          <Text as=\"p\" color=\"textSubtle\" mb=\"24px\">\n            {t(\n              'There’s currently no big difference between teams, and no benefit of joining one team over another for now. So pick whichever one you like!',\n            )}\n          </Text>\n          {teamValues &&\n            teamValues.map((team) => {\n              return (\n                <SelectionCard\n                  key={team.name}\n                  name=\"teams-selection\"\n                  value={team.id}\n                  isChecked={currentTeamId === team.id}\n                  image={`/images/teams/${team.images.md}`}\n                  onChange={handleTeamSelection}\n                  disabled={!team.isJoinable}\n                >\n                  <Text bold>{team.name}</Text>\n                  <Flex>\n                    <CommunityIcon mr=\"8px\" />\n                    <Text>{team.users.toLocaleString()}</Text>\n                  </Flex>\n                </SelectionCard>\n              )\n            })}\n        </CardBody>\n      </Card>\n      <NextStepButton onClick={actions.nextStep} disabled={currentTeamId === null}>\n        {t('Next Step')}\n      </NextStepButton>\n    </>\n  )\n}\n\nexport default Team\n","import React from 'react'\nimport { Modal, Flex, Text } from '@pancakeswap/uikit'\nimport { ethers } from 'ethers'\nimport { formatUnits } from '@ethersproject/units'\nimport { useAppDispatch } from 'state'\nimport { useTranslation } from 'contexts/Localization'\nimport { useCake, useProfile } from 'hooks/useContract'\nimport useApproveConfirmTransaction from 'hooks/useApproveConfirmTransaction'\nimport { fetchProfile } from 'state/profile'\nimport useToast from 'hooks/useToast'\nimport { useCallWithGasPrice } from 'hooks/useCallWithGasPrice'\nimport { ToastDescriptionWithTx } from 'components/Toast'\nimport ApproveConfirmButtons from 'components/ApproveConfirmButtons'\nimport { REGISTER_COST } from './config'\nimport { State } from './contexts/types'\n\ninterface Props {\n  userName: string\n  selectedNft: State['selectedNft']\n  account: string\n  teamId: number\n  minimumCakeRequired: ethers.BigNumber\n  allowance: ethers.BigNumber\n  onDismiss?: () => void\n}\n\nconst ConfirmProfileCreationModal: React.FC<Props> = ({\n  account,\n  teamId,\n  selectedNft,\n  minimumCakeRequired,\n  allowance,\n  onDismiss,\n}) => {\n  const { t } = useTranslation()\n  const profileContract = useProfile()\n  const dispatch = useAppDispatch()\n  const { toastSuccess } = useToast()\n  const cakeContract = useCake()\n  const { callWithGasPrice } = useCallWithGasPrice()\n\n  const { isApproving, isApproved, isConfirmed, isConfirming, handleApprove, handleConfirm } =\n    useApproveConfirmTransaction({\n      onRequiresApproval: async () => {\n        try {\n          const response = await cakeContract.allowance(account, profileContract.address)\n          return response.gte(minimumCakeRequired)\n        } catch (error) {\n          return false\n        }\n      },\n      onApprove: () => {\n        return callWithGasPrice(cakeContract, 'approve', [profileContract.address, allowance.toJSON()])\n      },\n      onConfirm: () => {\n        return callWithGasPrice(profileContract, 'createProfile', [\n          teamId,\n          selectedNft.collectionAddress,\n          selectedNft.tokenId,\n        ])\n      },\n      onSuccess: async ({ receipt }) => {\n        await dispatch(fetchProfile(account))\n        onDismiss()\n        toastSuccess(t('Profile created!'), <ToastDescriptionWithTx txHash={receipt.transactionHash} />)\n      },\n    })\n\n  return (\n    <Modal title={t('Complete Profile')} onDismiss={onDismiss}>\n      <Text color=\"textSubtle\" mb=\"8px\">\n        {t('Submitting NFT to contract and confirming User Name and Team.')}\n      </Text>\n      <Flex justifyContent=\"space-between\" mb=\"16px\">\n        <Text>{t('Cost')}</Text>\n        <Text>{t('%num% CAKE', { num: formatUnits(REGISTER_COST) })}</Text>\n      </Flex>\n      <ApproveConfirmButtons\n        isApproveDisabled={isConfirmed || isConfirming || isApproved}\n        isApproving={isApproving}\n        isConfirmDisabled={!isApproved || isConfirmed}\n        isConfirming={isConfirming}\n        onApprove={handleApprove}\n        onConfirm={handleConfirm}\n      />\n    </Modal>\n  )\n}\n\nexport default ConfirmProfileCreationModal\n","import React, { useContext } from 'react'\nimport { useTranslation } from 'contexts/Localization'\nimport { useWeb3React } from '@web3-react/core'\nimport NoWalletConnected from './WalletNotConnected'\nimport { ProfileCreationContext } from './contexts/ProfileCreationProvider'\nimport Mint from './Mint'\nimport ProfilePicture from './ProfilePicture'\nimport TeamSelection from './TeamSelection'\nimport UserName from './UserName'\n\nconst Steps = () => {\n  const { t } = useTranslation()\n  const { isInitialized, currentStep } = useContext(ProfileCreationContext)\n  const { account } = useWeb3React()\n\n  if (!account) {\n    return <NoWalletConnected />\n  }\n\n  if (!isInitialized) {\n    return <div>{t('Loading...')}</div>\n  }\n\n  if (currentStep === 0) {\n    return <Mint />\n  }\n\n  if (currentStep === 1) {\n    return <ProfilePicture />\n  }\n\n  if (currentStep === 2) {\n    return <TeamSelection />\n  }\n\n  if (currentStep === 3) {\n    return <UserName />\n  }\n\n  return null\n}\n\nexport default Steps\n","import React from 'react'\nimport { useWeb3React } from '@web3-react/core'\nimport { Redirect } from 'react-router'\nimport Page from 'components/Layout/Page'\nimport { useProfile } from 'state/profile/hooks'\nimport PageLoader from 'components/Loader/PageLoader'\nimport useFetchUserNfts from 'views/Nft/market/Profile/hooks/useFetchUserNfts'\nimport { nftsBaseUrl } from 'views/Nft/market/constants'\nimport { useFetchCollections } from 'state/nftMarket/hooks'\nimport Header from './Header'\nimport ProfileCreationProvider from './contexts/ProfileCreationProvider'\nimport Steps from './Steps'\n\nconst ProfileCreation = () => {\n  const { account } = useWeb3React()\n  const { isInitialized, isLoading, hasProfile } = useProfile()\n\n  useFetchUserNfts()\n  useFetchCollections()\n\n  if (!isInitialized || isLoading) {\n    return <PageLoader />\n  }\n\n  if (account && hasProfile) {\n    return <Redirect to={`${nftsBaseUrl}/profile/${account.toLowerCase()}`} />\n  }\n\n  return (\n    <>\n      <ProfileCreationProvider>\n        <Page>\n          <Header />\n          <Steps />\n        </Page>\n      </ProfileCreationProvider>\n    </>\n  )\n}\n\nexport default ProfileCreation\n"],"sourceRoot":""}